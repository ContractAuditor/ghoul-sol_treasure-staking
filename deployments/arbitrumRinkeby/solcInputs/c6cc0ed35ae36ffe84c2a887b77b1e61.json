{
  "language": "Solidity",
  "sources": {
    "contracts/AtlasMine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\n\nimport './interfaces/IMasterOfCoin.sol';\nimport './interfaces/ILegionMetadataStore.sol';\n\ncontract AtlasMine is Initializable, AccessControlEnumerableUpgradeable, ERC1155HolderUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeCastUpgradeable for uint256;\n    using SafeCastUpgradeable for int256;\n\n    enum Lock { twoWeeks, oneMonth, threeMonths, sixMonths, twelveMonths }\n\n    struct UserInfo {\n        uint256 originalDepositAmount;\n        uint256 depositAmount;\n        uint256 lpAmount;\n        uint256 lockedUntil;\n        uint256 vestingLastUpdate;\n        int256 rewardDebt;\n        Lock lock;\n    }\n\n    bytes32 public constant ATLAS_MINE_ADMIN_ROLE = keccak256(\"ATLAS_MINE_ADMIN_ROLE\");\n\n    uint256 public constant DAY = 1 days;\n    uint256 public constant ONE_WEEK = 7 days;\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\n    uint256 public constant ONE_MONTH = 30 days;\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\n    uint256 public constant SIX_MONTHS = ONE_MONTH * 6;\n    uint256 public constant TWELVE_MONTHS = 365 days;\n    uint256 public constant ONE = 1e18;\n\n    // Magic token addr\n    IERC20Upgradeable public magic;\n    IMasterOfCoin public masterOfCoin;\n\n    bool public unlockAll;\n\n    uint256 public totalRewardsEarned;\n    uint256 public totalUndistributedRewards;\n    uint256 public accMagicPerShare;\n    uint256 public totalLpToken;\n    uint256 public magicTotalDeposits;\n\n    uint256 public utilizationOverride;\n    EnumerableSetUpgradeable.AddressSet private excludedAddresses;\n\n    address public legionMetadataStore;\n    address public treasure;\n    address public legion;\n\n    // user => staked 1/1\n    mapping(address => bool) public isLegion1_1Staked;\n    uint256[][] public legionBoostMatrix;\n\n    /// @notice user => depositId => UserInfo\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\n    /// @notice user => depositId[]\n    mapping (address => EnumerableSetUpgradeable.UintSet) private allUserDepositIds;\n    /// @notice user => deposit index\n    mapping (address => uint256) public currentId;\n\n    // user => tokenIds\n    mapping (address => EnumerableSetUpgradeable.UintSet) private legionStaked;\n    // user => tokenId => amount\n    mapping (address => mapping(uint256 => uint256)) public treasureStaked;\n    // user => total amount staked\n    mapping (address => uint256) public treasureStakedAmount;\n    // user => boost\n    mapping (address => uint256) public boosts;\n\n    event Staked(address nft, uint256 tokenId, uint256 amount, uint256 currentBoost);\n    event Unstaked(address nft, uint256 tokenId, uint256 amount, uint256 currentBoost);\n\n    event Deposit(address indexed user, uint256 indexed index, uint256 amount, Lock lock);\n    event Withdraw(address indexed user, uint256 indexed index, uint256 amount);\n    event UndistributedRewardsWithdraw(address indexed to, uint256 amount);\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\n    event LogUpdateRewards(uint256 distributedRewards, uint256 undistributedRewards, uint256 lpSupply, uint256 accMagicPerShare);\n    event UtilizationRate(uint256 util);\n\n    modifier updateRewards() {\n        uint256 lpSupply = totalLpToken;\n        if (lpSupply > 0) {\n            (uint256 distributedRewards, uint256 undistributedRewards) = getRealMagicReward(masterOfCoin.requestRewards());\n            totalRewardsEarned += distributedRewards;\n            totalUndistributedRewards += undistributedRewards;\n            accMagicPerShare += distributedRewards * ONE / lpSupply;\n            emit LogUpdateRewards(distributedRewards, undistributedRewards, lpSupply, accMagicPerShare);\n        }\n\n        uint256 util = utilization();\n        emit UtilizationRate(util);\n        _;\n    }\n\n    function init(address _magic, address _masterOfCoin) external initializer {\n        magic = IERC20Upgradeable(_magic);\n        masterOfCoin = IMasterOfCoin(_masterOfCoin);\n\n        _setRoleAdmin(ATLAS_MINE_ADMIN_ROLE, ATLAS_MINE_ADMIN_ROLE);\n        _grantRole(ATLAS_MINE_ADMIN_ROLE, msg.sender);\n\n        // array follows values from ILegionMetadataStore.LegionGeneration and ILegionMetadataStore.LegionRarity\n        legionBoostMatrix = [\n            // GENESIS\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\n            [uint256(600e16), uint256(200e16), uint256(75e16), uint256(100e16), uint256(50e16), uint256(0)],\n            // AUXILIARY\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\n            [uint256(0), uint256(25e16), uint256(0), uint256(10e16), uint256(5e16), uint256(0)],\n            // RECRUIT\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\n            [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\n        ];\n\n        __AccessControlEnumerable_init();\n        __ERC1155Holder_init();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC1155ReceiverUpgradeable, AccessControlEnumerableUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function getStakedLegions(address _user) external view returns (uint256[] memory) {\n        return legionStaked[_user].values();\n    }\n\n    function getUserBoost(address _user) external view returns (uint256) {\n        return boosts[_user];\n    }\n\n    function getLegionBoostMatrix() external view returns (uint256[][] memory) {\n        return legionBoostMatrix;\n    }\n\n    function getLegionBoost(uint256 _legionGeneration, uint256 _legionRarity) public view returns (uint256) {\n        if (_legionGeneration < legionBoostMatrix.length && _legionRarity < legionBoostMatrix[_legionGeneration].length) {\n            return legionBoostMatrix[_legionGeneration][_legionRarity];\n        }\n        return 0;\n    }\n\n    function utilization() public view returns (uint256 util) {\n        if (utilizationOverride > 0) return utilizationOverride;\n\n        uint256 circulatingSupply = magic.totalSupply();\n        uint256 len = excludedAddresses.length();\n        for (uint256 i = 0; i < len; i++) {\n            circulatingSupply -= magic.balanceOf(excludedAddresses.at(i));\n        }\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\n        circulatingSupply -= rewardsAmount;\n        if (circulatingSupply != 0) {\n            util = magicTotalDeposits * ONE / circulatingSupply;\n        }\n    }\n\n    function getRealMagicReward(uint256 _magicReward)\n        public\n        view\n        returns (uint256 distributedRewards, uint256 undistributedRewards)\n    {\n        uint256 util = utilization();\n\n        if (util < 3e17) {\n            distributedRewards = 0;\n        } else if (util < 4e17) { // >30%\n            // 50%\n            distributedRewards = _magicReward * 5 / 10;\n        } else if (util < 5e17) { // >40%\n            // 60%\n            distributedRewards = _magicReward * 6 / 10;\n        } else if (util < 6e17) { // >50%\n            // 80%\n            distributedRewards = _magicReward * 8 / 10;\n        } else { // >60%\n            // 100%\n            distributedRewards = _magicReward;\n        }\n\n        undistributedRewards = _magicReward - distributedRewards;\n    }\n\n    function getAllUserDepositIds(address _user) public view returns (uint256[] memory) {\n        return allUserDepositIds[_user].values();\n    }\n\n    function getExcludedAddresses() public view returns (address[] memory) {\n        return excludedAddresses.values();\n    }\n\n    function getLockBoost(Lock _lock) public pure returns (uint256 boost, uint256 timelock) {\n        if (_lock == Lock.twoWeeks) {\n            // 10%\n            return (10e16, TWO_WEEKS);\n        } else if (_lock == Lock.oneMonth) {\n            // 25%\n            return (25e16, ONE_MONTH);\n        } else if (_lock == Lock.threeMonths) {\n            // 80%\n            return (80e16, THREE_MONTHS);\n        } else if (_lock == Lock.sixMonths) {\n            // 180%\n            return (180e16, SIX_MONTHS);\n        } else if (_lock == Lock.twelveMonths) {\n            // 400%\n            return (400e16, TWELVE_MONTHS);\n        } else {\n            revert(\"Invalid lock value\");\n        }\n    }\n\n    function getVestingTime(Lock _lock) public pure returns (uint256 vestingTime) {\n        if (_lock == Lock.twoWeeks) {\n            vestingTime = 0;\n        } else if (_lock == Lock.oneMonth) {\n            vestingTime = 7 days;\n        } else if (_lock == Lock.threeMonths) {\n            vestingTime = 14 days;\n        } else if (_lock == Lock.sixMonths) {\n            vestingTime = 30 days;\n        } else if (_lock == Lock.twelveMonths) {\n            vestingTime = 45 days;\n        }\n    }\n\n    function calcualteVestedPrincipal(address _user, uint256 _depositId) public view returns (uint256 amount) {\n        UserInfo storage user = userInfo[_user][_depositId];\n        Lock _lock = user.lock;\n\n        uint256 vestingEnd = user.lockedUntil + getVestingTime(_lock);\n        uint256 vestingBegin = user.lockedUntil;\n\n        if (block.timestamp >= vestingEnd || unlockAll) {\n            amount = user.originalDepositAmount;\n        } else if (block.timestamp > user.vestingLastUpdate) {\n            amount = user.originalDepositAmount * (block.timestamp - user.vestingLastUpdate) / (vestingEnd - vestingBegin);\n        }\n    }\n\n    function pendingRewardsPosition(address _user, uint256 _depositId) public view returns (uint256 pending) {\n        UserInfo storage user = userInfo[_user][_depositId];\n        uint256 _accMagicPerShare = accMagicPerShare;\n        uint256 lpSupply = totalLpToken;\n\n        (uint256 distributedRewards,) = getRealMagicReward(masterOfCoin.getPendingRewards(address(this)));\n        _accMagicPerShare += distributedRewards * ONE / lpSupply;\n\n        pending = ((user.lpAmount * _accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\n    }\n\n    function pendingRewardsAll(address _user) external view returns (uint256 pending) {\n        uint256 len = allUserDepositIds[_user].length();\n        for (uint256 i = 0; i < len; i++) {\n            uint256 depositId = allUserDepositIds[_user].at(i);\n            pending += pendingRewardsPosition(_user, depositId);\n        }\n    }\n\n    function deposit(uint256 _amount, Lock _lock) public updateRewards {\n        (UserInfo storage user, uint256 depositId) = _addDeposit(msg.sender);\n        (uint256 lockBoost, uint256 timelock) = getLockBoost(_lock);\n        uint256 nftBoost = boosts[msg.sender];\n        uint256 lpAmount = _amount + _amount * (lockBoost + nftBoost) / ONE;\n        magicTotalDeposits += _amount;\n        totalLpToken += lpAmount;\n\n        user.originalDepositAmount = _amount;\n        user.depositAmount = _amount;\n        user.lpAmount = lpAmount;\n        user.lockedUntil = block.timestamp + timelock;\n        user.vestingLastUpdate = user.lockedUntil;\n        user.rewardDebt = (lpAmount * accMagicPerShare / ONE).toInt256();\n        user.lock = _lock;\n\n        magic.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Deposit(msg.sender, depositId, _amount, _lock);\n    }\n\n    function withdrawPosition(uint256 _depositId, uint256 _amount) public updateRewards returns (bool) {\n        UserInfo storage user = userInfo[msg.sender][_depositId];\n        uint256 depositAmount = user.depositAmount;\n        if (depositAmount == 0) return false;\n\n        if (_amount > depositAmount) {\n            _amount = depositAmount;\n        }\n        // anyone can withdraw if kill swith was used\n        if (!unlockAll) {\n            require(block.timestamp >= user.lockedUntil, \"Position is still locked\");\n            uint256 vestedAmount = _vestedPrincipal(msg.sender, _depositId);\n            if (_amount > vestedAmount) {\n                _amount = vestedAmount;\n            }\n        }\n\n        // Effects\n        uint256 ratio = _amount * ONE / depositAmount;\n        uint256 lpAmount = user.lpAmount * ratio / ONE;\n\n        totalLpToken -= lpAmount;\n        magicTotalDeposits -= _amount;\n\n        user.depositAmount -= _amount;\n        user.lpAmount -= lpAmount;\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\n\n        // Interactions\n        magic.safeTransfer(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _depositId, _amount);\n\n        return true;\n    }\n\n    function withdrawAll() public {\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\n        for (uint256 i = 0; i < depositIds.length; i++) {\n            withdrawPosition(depositIds[i], type(uint256).max);\n        }\n    }\n\n    function harvestPosition(uint256 _depositId) public updateRewards {\n        UserInfo storage user = userInfo[msg.sender][_depositId];\n\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\n\n        // Effects\n        user.rewardDebt = accumulatedMagic;\n\n        if (user.depositAmount == 0 && user.lpAmount == 0) {\n            _removeDeposit(msg.sender, _depositId);\n        }\n\n        // Interactions\n        if (_pendingMagic != 0) {\n            magic.safeTransfer(msg.sender, _pendingMagic);\n        }\n\n        emit Harvest(msg.sender, _depositId, _pendingMagic);\n\n        require(magic.balanceOf(address(this)) >= magicTotalDeposits, \"Run on banks\");\n    }\n\n    function harvestAll() public {\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\n        for (uint256 i = 0; i < depositIds.length; i++) {\n            harvestPosition(depositIds[i]);\n        }\n    }\n\n    function withdrawAndHarvestPosition(uint256 _depositId, uint256 _amount) public {\n        withdrawPosition(_depositId, _amount);\n        harvestPosition(_depositId);\n    }\n\n    function withdrawAndHarvestAll() public {\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\n        for (uint256 i = 0; i < depositIds.length; i++) {\n            withdrawAndHarvestPosition(depositIds[i], type(uint256).max);\n        }\n    }\n\n    function stakeTreasure(uint256 _tokenId, uint256 _amount) external updateRewards {\n        require(treasure != address(0), \"Cannot stake Treasure\");\n        require(_amount > 0, \"Amount is 0\");\n\n        treasureStaked[msg.sender][_tokenId] += _amount;\n        treasureStakedAmount[msg.sender] += _amount;\n\n        require(treasureStakedAmount[msg.sender] <= 20, \"Max 20 treasures per wallet\");\n\n        uint256 boost = getNftBoost(treasure, _tokenId, _amount);\n        boosts[msg.sender] += boost;\n\n        _recalculateLpAmount(msg.sender);\n\n        IERC1155Upgradeable(treasure).safeTransferFrom(msg.sender, address(this), _tokenId, _amount, bytes(\"\"));\n\n        emit Staked(legion, _tokenId, _amount, boosts[msg.sender]);\n    }\n\n    function unstakeTreasure(uint256 _tokenId, uint256 _amount) external updateRewards {\n        require(treasure != address(0), \"Cannot stake Treasure\");\n        require(_amount > 0, \"Amount is 0\");\n        require(treasureStaked[msg.sender][_tokenId] >= _amount, \"Withdraw amount too big\");\n\n        treasureStaked[msg.sender][_tokenId] -= _amount;\n        treasureStakedAmount[msg.sender] -= _amount;\n\n        uint256 boost = getNftBoost(treasure, _tokenId, _amount);\n        boosts[msg.sender] -= boost;\n\n        _recalculateLpAmount(msg.sender);\n\n        IERC1155Upgradeable(treasure).safeTransferFrom(address(this), msg.sender, _tokenId, _amount, bytes(\"\"));\n\n        emit Unstaked(treasure, _tokenId, _amount, boosts[msg.sender]);\n    }\n\n    function stakeLegion(uint256 _tokenId) external updateRewards {\n        require(legion != address(0), \"Cannot stake Legion\");\n        require(legionStaked[msg.sender].add(_tokenId), \"NFT already staked\");\n        require(legionStaked[msg.sender].length() <= 3, \"Max 3 legions per wallet\");\n\n        if (isLegion1_1(_tokenId)) {\n            require(!isLegion1_1Staked[msg.sender], \"Max 1 1/1 legion per wallet\");\n            isLegion1_1Staked[msg.sender] = true;\n        }\n\n        uint256 boost = getNftBoost(legion, _tokenId, 1);\n        boosts[msg.sender] += boost;\n\n        _recalculateLpAmount(msg.sender);\n\n        IERC721Upgradeable(legion).transferFrom(msg.sender, address(this), _tokenId);\n\n        emit Staked(legion, _tokenId, 1, boosts[msg.sender]);\n    }\n\n    function unstakeLegion(uint256 _tokenId) external updateRewards {\n        require(legionStaked[msg.sender].remove(_tokenId), \"NFT is not staked\");\n\n        if (isLegion1_1(_tokenId)) {\n            isLegion1_1Staked[msg.sender] = false;\n        }\n\n        uint256 boost = getNftBoost(legion, _tokenId, 1);\n        boosts[msg.sender] -= boost;\n\n        _recalculateLpAmount(msg.sender);\n\n        IERC721Upgradeable(legion).transferFrom(address(this), msg.sender, _tokenId);\n\n        emit Unstaked(legion, _tokenId, 1, boosts[msg.sender]);\n    }\n\n    function isLegion1_1(uint256 _tokenId) public view returns (bool) {\n        try ILegionMetadataStore(legionMetadataStore).metadataForLegion(_tokenId) returns (ILegionMetadataStore.LegionMetadata memory metadata) {\n            return metadata.legionGeneration == ILegionMetadataStore.LegionGeneration.GENESIS &&\n                metadata.legionRarity == ILegionMetadataStore.LegionRarity.LEGENDARY;\n        } catch Error(string memory /*reason*/) {\n            return false;\n        } catch Panic(uint256) {\n            return false;\n        } catch (bytes memory /*lowLevelData*/) {\n            return false;\n        }\n    }\n\n    function getNftBoost(address _nft, uint256 _tokenId, uint256 _amount) public view returns (uint256) {\n        if (_nft == treasure) {\n            return getTreasureBoost(_tokenId, _amount);\n        } else if (_nft == legion) {\n            try ILegionMetadataStore(legionMetadataStore).metadataForLegion(_tokenId) returns (ILegionMetadataStore.LegionMetadata memory metadata) {\n                return getLegionBoost(uint256(metadata.legionGeneration), uint256(metadata.legionRarity));\n            } catch Error(string memory /*reason*/) {\n                return 0;\n            } catch Panic(uint256) {\n                return 0;\n            } catch (bytes memory /*lowLevelData*/) {\n                return 0;\n            }\n        }\n\n        return 0;\n    }\n\n    function _recalculateLpAmount(address _user) internal {\n        uint256 nftBoost = boosts[_user];\n\n        uint256[] memory depositIds = allUserDepositIds[_user].values();\n        for (uint256 i = 0; i < depositIds.length; i++) {\n            uint256 depositId = depositIds[i];\n            UserInfo storage user = userInfo[_user][depositId];\n\n            (uint256 lockBoost,) = getLockBoost(user.lock);\n            uint256 _amount = user.depositAmount;\n            uint256 newlLpAmount = _amount + _amount * (lockBoost + nftBoost) / ONE;\n            uint256 oldLpAmount = user.lpAmount;\n\n            if (newlLpAmount > oldLpAmount) {\n                uint256 lpDiff = newlLpAmount - oldLpAmount;\n                user.rewardDebt += (lpDiff * accMagicPerShare / ONE).toInt256();\n                totalLpToken += lpDiff;\n                user.lpAmount += lpDiff;\n            } else if (newlLpAmount < oldLpAmount) {\n                uint256 lpDiff = oldLpAmount - newlLpAmount;\n                user.rewardDebt -= (lpDiff * accMagicPerShare / ONE).toInt256();\n                totalLpToken -= lpDiff;\n                user.lpAmount -= lpDiff;\n            }\n        }\n    }\n\n    function addExcludedAddress(address _exclude) external onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\n        require(excludedAddresses.add(_exclude), \"Address already excluded\");\n    }\n\n    function removeExcludedAddress(address _excluded) external onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\n        require(excludedAddresses.remove(_excluded), \"Address is not excluded\");\n    }\n\n    function setUtilizationOverride(uint256 _utilizationOverride) external onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\n        utilizationOverride = _utilizationOverride;\n    }\n\n    function setMagicToken(address _magic) external onlyRole(ATLAS_MINE_ADMIN_ROLE) {\n        magic = IERC20Upgradeable(_magic);\n    }\n\n    function setTreasure(address _treasure) external onlyRole(ATLAS_MINE_ADMIN_ROLE) {\n        treasure = _treasure;\n    }\n\n    function setLegion(address _legion) external onlyRole(ATLAS_MINE_ADMIN_ROLE) {\n        legion = _legion;\n    }\n\n    function setLegionMetadataStore(address _legionMetadataStore) external onlyRole(ATLAS_MINE_ADMIN_ROLE) {\n        legionMetadataStore = _legionMetadataStore;\n    }\n\n    function setLegionBoostMatrix(uint256[][] memory _legionBoostMatrix) external onlyRole(ATLAS_MINE_ADMIN_ROLE) {\n        legionBoostMatrix = _legionBoostMatrix;\n    }\n\n    /// @notice EMERGENCY ONLY\n    function toggleUnlockAll() external onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\n        unlockAll = unlockAll ? false : true;\n    }\n\n    function withdrawUndistributedRewards(address _to) external onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\n        uint256 _totalUndistributedRewards = totalUndistributedRewards;\n        totalUndistributedRewards = 0;\n\n        magic.safeTransfer(_to, _totalUndistributedRewards);\n        emit UndistributedRewardsWithdraw(_to, _totalUndistributedRewards);\n    }\n\n    function getTreasureBoost(uint256 _tokenId, uint256 _amount) public pure returns (uint256 boost) {\n        if (_tokenId == 39) { // Ancient Relic 8%\n            boost = 75e15;\n        } else if (_tokenId == 46) { // Bag of Rare Mushrooms 6.2%\n            boost = 62e15;\n        } else if (_tokenId == 47) { // Bait for Monsters 7.3%\n            boost = 73e15;\n        } else if (_tokenId == 48) { // Beetle-wing 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 49) { // Blue Rupee 1.5%\n            boost = 15e15;\n        } else if (_tokenId == 51) { // Bottomless Elixir 7.6%\n            boost = 76e15;\n        } else if (_tokenId == 52) { // Cap of Invisibility 7.6%\n            boost = 76e15;\n        } else if (_tokenId == 53) { // Carriage 6.1%\n            boost = 61e15;\n        } else if (_tokenId == 54) { // Castle 7.3%\n            boost = 71e15;\n        } else if (_tokenId == 68) { // Common Bead 5.6%\n            boost = 56e15;\n        } else if (_tokenId == 69) { // Common Feather 3.4%\n            boost = 34e15;\n        } else if (_tokenId == 71) { // Common Relic 2.2%\n            boost = 22e15;\n        } else if (_tokenId == 72) { // Cow 5.8%\n            boost = 58e15;\n        } else if (_tokenId == 73) { // Diamond 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 74) { // Divine Hourglass 6.3%\n            boost = 63e15;\n        } else if (_tokenId == 75) { // Divine Mask 5.7%\n            boost = 57e15;\n        } else if (_tokenId == 76) { // Donkey 1.2%\n            boost = 12e15;\n        } else if (_tokenId == 77) { // Dragon Tail 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 79) { // Emerald 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 82) { // Favor from the Gods 5.6%\n            boost = 56e15;\n        } else if (_tokenId == 91) { // Framed Butterfly 5.8%\n            boost = 58e15;\n        } else if (_tokenId == 92) { // Gold Coin 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 93) { // Grain 3.2%\n            boost = 32e15;\n        } else if (_tokenId == 94) { // Green Rupee 3.3%\n            boost = 33e15;\n        } else if (_tokenId == 95) { // Grin 15.7%\n            boost = 157e15;\n        } else if (_tokenId == 96) { // Half-Penny 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 97) { // Honeycomb 15.8%\n            boost = 158e15;\n        } else if (_tokenId == 98) { // Immovable Stone 7.2%\n            boost = 72e15;\n        } else if (_tokenId == 99) { // Ivory Breastpin 6.4%\n            boost = 64e15;\n        } else if (_tokenId == 100) { // Jar of Fairies 5.3%\n            boost = 53e15;\n        } else if (_tokenId == 103) { // Lumber 3%\n            boost = 30e15;\n        } else if (_tokenId == 104) { // Military Stipend 6.2%\n            boost = 62e15;\n        } else if (_tokenId == 105) { // Mollusk Shell 6.7%\n            boost = 67e15;\n        } else if (_tokenId == 114) { // Ox 1.6%\n            boost = 16e15;\n        } else if (_tokenId == 115) { // Pearl 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 116) { // Pot of Gold 5.8%\n            boost = 58e15;\n        } else if (_tokenId == 117) { // Quarter-Penny 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 132) { // Red Feather 6.4%\n            boost = 64e15;\n        } else if (_tokenId == 133) { // Red Rupee 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 141) { // Score of Ivory 6%\n            boost = 60e15;\n        } else if (_tokenId == 151) { // Silver Coin 0.8%\n            boost = 8e15;\n        } else if (_tokenId == 152) { // Small Bird 6%\n            boost = 60e15;\n        } else if (_tokenId == 153) { // Snow White Feather 6.4%\n            boost = 64e15;\n        } else if (_tokenId == 161) { // Thread of Divine Silk 7.3%\n            boost = 73e15;\n        } else if (_tokenId == 162) { // Unbreakable Pocketwatch 5.9%\n            boost = 59e15;\n        } else if (_tokenId == 164) { // Witches Broom 5.1%\n            boost = 51e15;\n        }\n\n        boost = boost * _amount;\n    }\n\n    function _vestedPrincipal(address _user, uint256 _depositId) internal returns (uint256 amount) {\n        amount = calcualteVestedPrincipal(_user, _depositId);\n        UserInfo storage user = userInfo[_user][_depositId];\n        user.vestingLastUpdate = block.timestamp;\n    }\n\n    function _addDeposit(address _user) internal returns (UserInfo storage user, uint256 newDepositId) {\n        // start depositId from 1\n        newDepositId = ++currentId[_user];\n        allUserDepositIds[_user].add(newDepositId);\n        user = userInfo[_user][newDepositId];\n    }\n\n    function _removeDeposit(address _user, uint256 _depositId) internal {\n        require(allUserDepositIds[_user].remove(_depositId), 'depositId !exists');\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n        __ERC1155Holder_init_unchained();\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IMasterOfCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IMasterOfCoin {\n    struct CoinStream {\n        uint256 totalRewards;\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 lastRewardTimestamp;\n        uint256 ratePerSecond;\n        uint256 paid;\n    }\n    \n    function requestRewards() external returns (uint256 rewardsPaid);\n\n    function grantTokenToStream(address _stream, uint256 _amount) external;\n\n    function getStreams() external view returns (address[] memory);\n\n    function getStreamConfig(address _stream) external view returns (CoinStream memory);\n\n    function getGlobalRatePerSecond() external view returns (uint256 globalRatePerSecond);\n\n    function getRatePerSecond(address _stream) external view returns (uint256 ratePerSecond);\n\n    function getPendingRewards(address _stream) external view returns (uint256 pendingRewards);\n}\n"
    },
    "contracts/interfaces/ILegionMetadataStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\ninterface ILegionMetadataStore {\n    struct LegionMetadata {\n        LegionGeneration legionGeneration;\n        LegionClass legionClass;\n        LegionRarity legionRarity;\n        uint8 questLevel;\n        uint8 craftLevel;\n        uint8[6] constellationRanks;\n    }\n\n    enum Constellation {\n        FIRE,\n        EARTH,\n        WIND,\n        WATER,\n        LIGHT,\n        DARK\n    }\n\n    enum LegionRarity {\n        LEGENDARY,\n        RARE,\n        SPECIAL,\n        UNCOMMON,\n        COMMON,\n        RECRUIT\n    }\n\n    enum LegionClass {\n        RECRUIT,\n        SIEGE,\n        FIGHTER,\n        ASSASSIN,\n        RANGED,\n        SPELLCASTER,\n        RIVERMAN,\n        NUMERAIRE,\n        ALL_CLASS,\n        ORIGIN\n    }\n\n    enum LegionGeneration {\n        GENESIS,\n        AUXILIARY,\n        RECRUIT\n    }\n\n    // Sets the intial metadata for a token id.\n    // Admin only.\n    function setInitialMetadataForLegion(address _owner, uint256 _tokenId, LegionGeneration _generation, LegionClass _class, LegionRarity _rarity) external;\n\n    // Increases the quest level by one. It is up to the calling contract to regulate the max quest level. No validation.\n    // Admin only.\n    function increaseQuestLevel(uint256 _tokenId) external;\n\n    // Increases the craft level by one. It is up to the calling contract to regulate the max craft level. No validation.\n    // Admin only.\n    function increaseCraftLevel(uint256 _tokenId) external;\n\n    // Increases the rank of the given constellation to the given number. It is up to the calling contract to regulate the max constellation rank. No validation.\n    // Admin only.\n    function increaseConstellationRank(uint256 _tokenId, Constellation _constellation, uint8 _to) external;\n\n    // Returns the metadata for the given legion.\n    function metadataForLegion(uint256 _tokenId) external view returns(LegionMetadata memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/MasterOfCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport './interfaces/IMasterOfCoin.sol';\nimport './interfaces/IStream.sol';\n\ncontract MasterOfCoin is IMasterOfCoin, Initializable, AccessControlEnumerableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    bytes32 public constant MASTER_OF_COIN_ADMIN_ROLE = keccak256(\"MASTER_OF_COIN_ADMIN_ROLE\");\n\n    IERC20Upgradeable public magic;\n\n    /// @notice stream address => CoinStream\n    mapping (address => CoinStream) public streamConfig;\n\n    /// @notice stream ID => stream address\n    EnumerableSetUpgradeable.AddressSet private streams;\n\n    /// @notice stream address => bool\n    mapping (address => bool) public callbackRegistry;\n\n    modifier streamExists(address _stream) {\n        require(streams.contains(_stream), \"Stream does not exist\");\n        _;\n    }\n\n    modifier streamActive(address _stream) {\n        require(streamConfig[_stream].endTimestamp > block.timestamp, \"Stream ended\");\n        _;\n    }\n\n    modifier callbackStream(address _stream) {\n        if (callbackRegistry[_stream]) IStream(_stream).preRateUpdate();\n        _;\n        if (callbackRegistry[_stream]) IStream(_stream).postRateUpdate();\n    }\n\n    event StreamAdded(address indexed stream, uint256 amount, uint256 startTimestamp, uint256 endTimestamp);\n    event StreamTimeUpdated(address indexed stream, uint256 startTimestamp, uint256 endTimestamp);\n\n    event StreamGrant(address indexed stream, address from, uint256 amount);\n    event StreamFunded(address indexed stream, uint256 amount);\n    event StreamDefunded(address indexed stream, uint256 amount);\n    event StreamRemoved(address indexed stream);\n\n    event RewardsPaid(address indexed stream, uint256 rewardsPaid, uint256 rewardsPaidInTotal);\n    event Withdraw(address to, uint256 amount);\n    event CallbackSet(address stream, bool value);\n\n    function init(address _magic) external initializer {\n        magic = IERC20Upgradeable(_magic);\n\n        _setRoleAdmin(MASTER_OF_COIN_ADMIN_ROLE, MASTER_OF_COIN_ADMIN_ROLE);\n        _grantRole(MASTER_OF_COIN_ADMIN_ROLE, msg.sender);\n\n        __AccessControlEnumerable_init();\n    }\n\n    function requestRewards() public returns (uint256 rewardsPaid) {\n        CoinStream storage stream = streamConfig[msg.sender];\n\n        rewardsPaid = getPendingRewards(msg.sender);\n\n        if (rewardsPaid == 0 || magic.balanceOf(address(this)) < rewardsPaid) {\n            return 0;\n        }\n\n        stream.paid += rewardsPaid;\n        stream.lastRewardTimestamp = block.timestamp;\n\n        // this should never happen but better safe than sorry\n        require(stream.paid <= stream.totalRewards, \"Rewards overflow\");\n\n        magic.safeTransfer(msg.sender, rewardsPaid);\n        emit RewardsPaid(msg.sender, rewardsPaid, stream.paid);\n    }\n\n    function grantTokenToStream(address _stream, uint256 _amount)\n        public\n        streamExists(_stream)\n        streamActive(_stream)\n    {\n        _fundStream(_stream, _amount);\n\n        magic.safeTransferFrom(msg.sender, address(this), _amount);\n        emit StreamGrant(_stream, msg.sender, _amount);\n    }\n\n    function getStreams() external view returns (address[] memory) {\n        return streams.values();\n    }\n\n    function getStreamConfig(address _stream) external view returns (CoinStream memory) {\n        return streamConfig[_stream];\n    }\n\n    function getGlobalRatePerSecond() external view returns (uint256 globalRatePerSecond) {\n        uint256 len = streams.length();\n        for (uint256 i = 0; i < len; i++) {\n            globalRatePerSecond += getRatePerSecond(streams.at(i));\n        }\n    }\n\n    function getRatePerSecond(address _stream) public view returns (uint256 ratePerSecond) {\n        CoinStream storage stream = streamConfig[_stream];\n\n        if (stream.startTimestamp < block.timestamp && block.timestamp < stream.endTimestamp) {\n            ratePerSecond = stream.ratePerSecond;\n        }\n    }\n\n    function getPendingRewards(address _stream) public view returns (uint256 pendingRewards) {\n        CoinStream storage stream = streamConfig[_stream];\n\n        uint256 paid = stream.paid;\n        uint256 totalRewards = stream.totalRewards;\n        uint256 lastRewardTimestamp = stream.lastRewardTimestamp;\n\n        if (block.timestamp >= stream.endTimestamp) {\n            // stream ended\n            pendingRewards = totalRewards - paid;\n        } else if (block.timestamp > lastRewardTimestamp) {\n            // stream active\n            uint256 secondsFromLastPull = block.timestamp - lastRewardTimestamp;\n            pendingRewards = secondsFromLastPull * stream.ratePerSecond;\n\n            // in case of rounding error, make sure that paid + pending rewards is never more than totalRewards\n            if (paid + pendingRewards > totalRewards) {\n                pendingRewards = totalRewards - paid;\n            }\n        }\n    }\n\n    function _fundStream(address _stream, uint256 _amount) internal callbackStream(_stream) {\n        CoinStream storage stream = streamConfig[_stream];\n\n        uint256 secondsToEnd = stream.endTimestamp - stream.lastRewardTimestamp;\n        uint256 rewardsLeft = secondsToEnd * stream.ratePerSecond;\n        stream.ratePerSecond = (rewardsLeft + _amount) / secondsToEnd;\n        stream.totalRewards += _amount;\n    }\n\n    // ADMIN\n\n    /// @param _stream address of the contract that gets rewards\n    /// @param _totalRewards amount of MAGIC that should be distributed in total\n    /// @param _startTimestamp when MAGIC stream should start\n    /// @param _endTimestamp when MAGIC stream should end\n    /// @param _callback should callback be used (if you don't know, set false)\n    function addStream(\n        address _stream,\n        uint256 _totalRewards,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp,\n        bool _callback\n    ) external onlyRole(MASTER_OF_COIN_ADMIN_ROLE) {\n        require(_endTimestamp > _startTimestamp, \"Rewards must last > 1 sec\");\n        require(!streams.contains(_stream), \"Stream for address already exists\");\n\n        if (streams.add(_stream)) {\n            streamConfig[_stream] = CoinStream({\n                totalRewards: _totalRewards,\n                startTimestamp: _startTimestamp,\n                endTimestamp: _endTimestamp,\n                lastRewardTimestamp: _startTimestamp,\n                ratePerSecond: _totalRewards / (_endTimestamp - _startTimestamp),\n                paid: 0\n            });\n            emit StreamAdded(_stream, _totalRewards, _startTimestamp, _endTimestamp);\n\n            setCallback(_stream, _callback);\n        }\n    }\n\n    function fundStream(address _stream, uint256 _amount)\n        external\n        onlyRole(MASTER_OF_COIN_ADMIN_ROLE)\n        streamExists(_stream)\n        streamActive(_stream)\n    {\n        _fundStream(_stream, _amount);\n        emit StreamFunded(_stream, _amount);\n    }\n\n    function defundStream(address _stream, uint256 _amount)\n        external\n        onlyRole(MASTER_OF_COIN_ADMIN_ROLE)\n        streamExists(_stream)\n        streamActive(_stream)\n        callbackStream(_stream)\n    {\n        CoinStream storage stream = streamConfig[_stream];\n\n        uint256 secondsToEnd = stream.endTimestamp - stream.lastRewardTimestamp;\n        uint256 rewardsLeft = secondsToEnd * stream.ratePerSecond;\n\n        require(_amount <= rewardsLeft, \"Reduce amount too large, rewards already paid\");\n\n        stream.ratePerSecond = (rewardsLeft - _amount) / secondsToEnd;\n        stream.totalRewards -= _amount;\n\n        emit StreamDefunded(_stream, _amount);\n    }\n\n    function updateStreamTime(address _stream, uint256 _startTimestamp, uint256 _endTimestamp)\n        external\n        onlyRole(MASTER_OF_COIN_ADMIN_ROLE)\n        streamExists(_stream)\n        callbackStream(_stream)\n    {\n        CoinStream storage stream = streamConfig[_stream];\n\n        if (_startTimestamp > 0) {\n            require(_startTimestamp > block.timestamp, \"startTimestamp cannot be in the past\");\n\n            stream.startTimestamp = _startTimestamp;\n            stream.lastRewardTimestamp = _startTimestamp;\n        }\n\n        if (_endTimestamp > 0) {\n            require(_endTimestamp > _startTimestamp, \"Rewards must last > 1 sec\");\n            require(_endTimestamp > block.timestamp, \"Cannot end rewards in the past\");\n\n            stream.endTimestamp = _endTimestamp;\n        }\n\n        stream.ratePerSecond = (stream.totalRewards - stream.paid) / (stream.endTimestamp - stream.lastRewardTimestamp);\n\n        emit StreamTimeUpdated(_stream, _startTimestamp, _endTimestamp);\n    }\n\n    function removeStream(address _stream)\n        external\n        onlyRole(MASTER_OF_COIN_ADMIN_ROLE)\n        streamExists(_stream)\n        callbackStream(_stream)\n    {\n        if (streams.remove(_stream)) {\n            delete streamConfig[_stream];\n            emit StreamRemoved(_stream);\n        }\n    }\n\n    function setCallback(address _stream, bool _value)\n        public\n        onlyRole(MASTER_OF_COIN_ADMIN_ROLE)\n        streamExists(_stream)\n        callbackStream(_stream)\n    {\n        callbackRegistry[_stream] = _value;\n        emit CallbackSet(_stream, _value);\n    }\n\n    function withdrawMagic(address _to, uint256 _amount) external onlyRole(MASTER_OF_COIN_ADMIN_ROLE) {\n        magic.safeTransfer(_to, _amount);\n        emit Withdraw(_to, _amount);\n    }\n\n    function setMagicToken(address _magic) external onlyRole(MASTER_OF_COIN_ADMIN_ROLE) {\n        magic = IERC20Upgradeable(_magic);\n    }\n}\n"
    },
    "contracts/interfaces/IStream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IStream {\n    function preRateUpdate() external;\n    function postRateUpdate() external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}