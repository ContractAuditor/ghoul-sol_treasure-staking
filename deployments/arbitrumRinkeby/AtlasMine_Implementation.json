{
  "address": "0x5bc916ab78dF395bBe0769509063A75e9cDE603f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum AtlasMine.Lock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "undistributedRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accMagicPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdateRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBoost",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UndistributedRewardsWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBoost",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "util",
          "type": "uint256"
        }
      ],
      "name": "UtilizationRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATLAS_MINE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIX_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWELVE_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_WEEKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accMagicPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exclude",
          "type": "address"
        }
      ],
      "name": "addExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "boosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "calcualteVestedPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum AtlasMine.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllUserDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcludedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_legionGeneration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_legionRarity",
          "type": "uint256"
        }
      ],
      "name": "getLegionBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLegionBoostMatrix",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AtlasMine.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "getLockBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getNftBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_magicReward",
          "type": "uint256"
        }
      ],
      "name": "getRealMagicReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "distributedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undistributedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedLegions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getTreasureBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AtlasMine.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "getVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "harvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_magic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterOfCoin",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isLegion1_1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLegion1_1Staked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "legion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "legionBoostMatrix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "legionMetadataStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magic",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magicTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOfCoin",
      "outputs": [
        {
          "internalType": "contract IMasterOfCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewardsAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardsPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_excluded",
          "type": "address"
        }
      ],
      "name": "removeExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_legion",
          "type": "address"
        }
      ],
      "name": "setLegion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "_legionBoostMatrix",
          "type": "uint256[][]"
        }
      ],
      "name": "setLegionBoostMatrix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_legionMetadataStore",
          "type": "address"
        }
      ],
      "name": "setLegionMetadataStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_magic",
          "type": "address"
        }
      ],
      "name": "setMagicToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasure",
          "type": "address"
        }
      ],
      "name": "setTreasure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_utilizationOverride",
          "type": "uint256"
        }
      ],
      "name": "setUtilizationOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeLegion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTreasure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleUnlockAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUndistributedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasure",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "treasureStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "treasureStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeLegion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTreasure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "originalDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        },
        {
          "internalType": "enum AtlasMine.Lock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "util",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilizationOverride",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAndHarvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndHarvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawUndistributedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f85e7dd9a96a403de8f05824a1315413c2f150e335eb811283f7d21bba5117f",
  "receipt": {
    "to": null,
    "from": "0x393248aE29A7C2128E8E27d23330b1F87E0600fc",
    "contractAddress": "0x5bc916ab78dF395bBe0769509063A75e9cDE603f",
    "transactionIndex": 0,
    "gasUsed": "42080810",
    "logsBloom": "0x
    "blockHash": "0xd2eb164eebb919bd1dc54bd98374f17081a6e7cf0c1fae939fb4b0463098e287",
    "transactionHash": "0x6f85e7dd9a96a403de8f05824a1315413c2f150e335eb811283f7d21bba5117f",
    "logs": [],
    "blockNumber": 8956703,
    "cumulativeGasUsed": "338567",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e14d14bac66d96e29a03649673dacf5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AtlasMine.Lock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undistributedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accMagicPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBoost\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UndistributedRewardsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBoost\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"util\",\"type\":\"uint256\"}],\"name\":\"UtilizationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATLAS_MINE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWELVE_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_WEEKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accMagicPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exclude\",\"type\":\"address\"}],\"name\":\"addExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calcualteVestedPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AtlasMine.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllUserDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_legionGeneration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_legionRarity\",\"type\":\"uint256\"}],\"name\":\"getLegionBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLegionBoostMatrix\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtlasMine.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"getLockBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getNftBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_magicReward\",\"type\":\"uint256\"}],\"name\":\"getRealMagicReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undistributedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedLegions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTreasureBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtlasMine.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"harvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_magic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterOfCoin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isLegion1_1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLegion1_1Staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legionBoostMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legionMetadataStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magic\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOfCoin\",\"outputs\":[{\"internalType\":\"contract IMasterOfCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardsAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_excluded\",\"type\":\"address\"}],\"name\":\"removeExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legion\",\"type\":\"address\"}],\"name\":\"setLegion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_legionBoostMatrix\",\"type\":\"uint256[][]\"}],\"name\":\"setLegionBoostMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legionMetadataStore\",\"type\":\"address\"}],\"name\":\"setLegionMetadataStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_magic\",\"type\":\"address\"}],\"name\":\"setMagicToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasure\",\"type\":\"address\"}],\"name\":\"setTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilizationOverride\",\"type\":\"uint256\"}],\"name\":\"setUtilizationOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeLegion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUndistributedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasure\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasureStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"treasureStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeLegion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originalDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"enum AtlasMine.Lock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"util\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationOverride\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndHarvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndHarvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawUndistributedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentId(address)\":{\"notice\":\"user => deposit index\"},\"toggleUnlockAll()\":{\"notice\":\"EMERGENCY ONLY\"},\"userInfo(address,uint256)\":{\"notice\":\"user => depositId => UserInfo\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlasMine.sol\":\"AtlasMine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x639cf7eec29296042e3b06c9f8739d0c87fe84d8bc8c2d0be49af9ce057db009\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52381f5750ecefd05d7d5ef3d5ee3aaf60082307adebb003a367ddfa7ca01a37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x998a349fd3c0ed252f0d2a8b8f2385911b11ae5d40f102a3f3f596d235368c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/AtlasMine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\n\\nimport './interfaces/IMasterOfCoin.sol';\\nimport './interfaces/ILegionMetadataStore.sol';\\n\\ncontract AtlasMine is Initializable, AccessControlEnumerableUpgradeable, ERC1155HolderUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n\\n    enum Lock { twoWeeks, oneMonth, threeMonths, sixMonths, twelveMonths }\\n\\n    struct UserInfo {\\n        uint256 originalDepositAmount;\\n        uint256 depositAmount;\\n        uint256 lpAmount;\\n        uint256 lockedUntil;\\n        uint256 vestingLastUpdate;\\n        int256 rewardDebt;\\n        Lock lock;\\n    }\\n\\n    bytes32 public constant ATLAS_MINE_ADMIN_ROLE = keccak256(\\\"ATLAS_MINE_ADMIN_ROLE\\\");\\n\\n    uint256 public constant DAY = 1 days;\\n    uint256 public constant ONE_WEEK = 7 days;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = 30 days;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant SIX_MONTHS = ONE_MONTH * 6;\\n    uint256 public constant TWELVE_MONTHS = 365 days;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Magic token addr\\n    IERC20Upgradeable public magic;\\n    IMasterOfCoin public masterOfCoin;\\n\\n    bool public unlockAll;\\n\\n    uint256 public totalRewardsEarned;\\n    uint256 public totalUndistributedRewards;\\n    uint256 public accMagicPerShare;\\n    uint256 public totalLpToken;\\n    uint256 public magicTotalDeposits;\\n\\n    uint256 public utilizationOverride;\\n    EnumerableSetUpgradeable.AddressSet private excludedAddresses;\\n\\n    address public legionMetadataStore;\\n    address public treasure;\\n    address public legion;\\n\\n    // user => staked 1/1\\n    mapping(address => bool) public isLegion1_1Staked;\\n    uint256[][] public legionBoostMatrix;\\n\\n    /// @notice user => depositId => UserInfo\\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\\n    /// @notice user => depositId[]\\n    mapping (address => EnumerableSetUpgradeable.UintSet) private allUserDepositIds;\\n    /// @notice user => deposit index\\n    mapping (address => uint256) public currentId;\\n\\n    // user => tokenIds\\n    mapping (address => EnumerableSetUpgradeable.UintSet) private legionStaked;\\n    // user => tokenId => amount\\n    mapping (address => mapping(uint256 => uint256)) public treasureStaked;\\n    // user => total amount staked\\n    mapping (address => uint256) public treasureStakedAmount;\\n    // user => boost\\n    mapping (address => uint256) public boosts;\\n\\n    event Staked(address nft, uint256 tokenId, uint256 amount, uint256 currentBoost);\\n    event Unstaked(address nft, uint256 tokenId, uint256 amount, uint256 currentBoost);\\n\\n    event Deposit(address indexed user, uint256 indexed index, uint256 amount, Lock lock);\\n    event Withdraw(address indexed user, uint256 indexed index, uint256 amount);\\n    event UndistributedRewardsWithdraw(address indexed to, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(uint256 distributedRewards, uint256 undistributedRewards, uint256 lpSupply, uint256 accMagicPerShare);\\n    event UtilizationRate(uint256 util);\\n\\n    modifier updateRewards() {\\n        uint256 lpSupply = totalLpToken;\\n        if (lpSupply > 0) {\\n            (uint256 distributedRewards, uint256 undistributedRewards) = getRealMagicReward(masterOfCoin.requestRewards());\\n            totalRewardsEarned += distributedRewards;\\n            totalUndistributedRewards += undistributedRewards;\\n            accMagicPerShare += distributedRewards * ONE / lpSupply;\\n            emit LogUpdateRewards(distributedRewards, undistributedRewards, lpSupply, accMagicPerShare);\\n        }\\n\\n        uint256 util = utilization();\\n        emit UtilizationRate(util);\\n        _;\\n    }\\n\\n    function init(address _magic, address _masterOfCoin) external initializer {\\n        magic = IERC20Upgradeable(_magic);\\n        masterOfCoin = IMasterOfCoin(_masterOfCoin);\\n\\n        _setRoleAdmin(ATLAS_MINE_ADMIN_ROLE, ATLAS_MINE_ADMIN_ROLE);\\n        _grantRole(ATLAS_MINE_ADMIN_ROLE, msg.sender);\\n\\n        // array follows values from ILegionMetadataStore.LegionGeneration and ILegionMetadataStore.LegionRarity\\n        legionBoostMatrix = [\\n            // GENESIS\\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\\n            [uint256(600e16), uint256(200e16), uint256(75e16), uint256(100e16), uint256(50e16), uint256(0)],\\n            // AUXILIARY\\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\\n            [uint256(0), uint256(25e16), uint256(0), uint256(10e16), uint256(5e16), uint256(0)],\\n            // RECRUIT\\n            // LEGENDARY,RARE,SPECIAL,UNCOMMON,COMMON,RECRUIT\\n            [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\n        ];\\n\\n        __AccessControlEnumerable_init();\\n        __ERC1155Holder_init();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155ReceiverUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getStakedLegions(address _user) external view virtual returns (uint256[] memory) {\\n        return legionStaked[_user].values();\\n    }\\n\\n    function getUserBoost(address _user) external view virtual returns (uint256) {\\n        return boosts[_user];\\n    }\\n\\n    function getLegionBoostMatrix() external view virtual returns (uint256[][] memory) {\\n        return legionBoostMatrix;\\n    }\\n\\n    function getLegionBoost(uint256 _legionGeneration, uint256 _legionRarity) public view virtual returns (uint256) {\\n        if (_legionGeneration < legionBoostMatrix.length && _legionRarity < legionBoostMatrix[_legionGeneration].length) {\\n            return legionBoostMatrix[_legionGeneration][_legionRarity];\\n        }\\n        return 0;\\n    }\\n\\n    function utilization() public view virtual returns (uint256 util) {\\n        if (utilizationOverride > 0) return utilizationOverride;\\n\\n        uint256 circulatingSupply = magic.totalSupply();\\n        uint256 len = excludedAddresses.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            circulatingSupply -= magic.balanceOf(excludedAddresses.at(i));\\n        }\\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\\n        circulatingSupply -= rewardsAmount;\\n        if (circulatingSupply != 0) {\\n            util = magicTotalDeposits * ONE / circulatingSupply;\\n        }\\n    }\\n\\n    function getRealMagicReward(uint256 _magicReward)\\n        public\\n        view\\n        virtual\\n        returns (uint256 distributedRewards, uint256 undistributedRewards)\\n    {\\n        uint256 util = utilization();\\n\\n        if (util < 3e17) {\\n            distributedRewards = 0;\\n        } else if (util < 4e17) { // >30%\\n            // 50%\\n            distributedRewards = _magicReward * 5 / 10;\\n        } else if (util < 5e17) { // >40%\\n            // 60%\\n            distributedRewards = _magicReward * 6 / 10;\\n        } else if (util < 6e17) { // >50%\\n            // 80%\\n            distributedRewards = _magicReward * 8 / 10;\\n        } else { // >60%\\n            // 100%\\n            distributedRewards = _magicReward;\\n        }\\n\\n        undistributedRewards = _magicReward - distributedRewards;\\n    }\\n\\n    function getAllUserDepositIds(address _user) public view virtual returns (uint256[] memory) {\\n        return allUserDepositIds[_user].values();\\n    }\\n\\n    function getExcludedAddresses() public view virtual returns (address[] memory) {\\n        return excludedAddresses.values();\\n    }\\n\\n    function getLockBoost(Lock _lock) public pure virtual returns (uint256 boost, uint256 timelock) {\\n        if (_lock == Lock.twoWeeks) {\\n            // 10%\\n            return (10e16, TWO_WEEKS);\\n        } else if (_lock == Lock.oneMonth) {\\n            // 25%\\n            return (25e16, ONE_MONTH);\\n        } else if (_lock == Lock.threeMonths) {\\n            // 80%\\n            return (80e16, THREE_MONTHS);\\n        } else if (_lock == Lock.sixMonths) {\\n            // 180%\\n            return (180e16, SIX_MONTHS);\\n        } else if (_lock == Lock.twelveMonths) {\\n            // 400%\\n            return (400e16, TWELVE_MONTHS);\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n    }\\n\\n    function getVestingTime(Lock _lock) public pure virtual returns (uint256 vestingTime) {\\n        if (_lock == Lock.twoWeeks) {\\n            vestingTime = 0;\\n        } else if (_lock == Lock.oneMonth) {\\n            vestingTime = 7 days;\\n        } else if (_lock == Lock.threeMonths) {\\n            vestingTime = 14 days;\\n        } else if (_lock == Lock.sixMonths) {\\n            vestingTime = 30 days;\\n        } else if (_lock == Lock.twelveMonths) {\\n            vestingTime = 45 days;\\n        }\\n    }\\n\\n    function calcualteVestedPrincipal(address _user, uint256 _depositId) public view virtual returns (uint256 amount) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        Lock _lock = user.lock;\\n\\n        uint256 vestingEnd = user.lockedUntil + getVestingTime(_lock);\\n        uint256 vestingBegin = user.lockedUntil;\\n\\n        if (block.timestamp >= vestingEnd || unlockAll) {\\n            amount = user.originalDepositAmount;\\n        } else if (block.timestamp > user.vestingLastUpdate) {\\n            amount = user.originalDepositAmount * (block.timestamp - user.vestingLastUpdate) / (vestingEnd - vestingBegin);\\n        }\\n    }\\n\\n    function pendingRewardsPosition(address _user, uint256 _depositId) public view virtual returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        uint256 _accMagicPerShare = accMagicPerShare;\\n        uint256 lpSupply = totalLpToken;\\n\\n        (uint256 distributedRewards,) = getRealMagicReward(masterOfCoin.getPendingRewards(address(this)));\\n        _accMagicPerShare += distributedRewards * ONE / lpSupply;\\n\\n        pending = ((user.lpAmount * _accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function pendingRewardsAll(address _user) external view virtual returns (uint256 pending) {\\n        uint256 len = allUserDepositIds[_user].length();\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 depositId = allUserDepositIds[_user].at(i);\\n            pending += pendingRewardsPosition(_user, depositId);\\n        }\\n    }\\n\\n    function deposit(uint256 _amount, Lock _lock) public virtual updateRewards {\\n        (UserInfo storage user, uint256 depositId) = _addDeposit(msg.sender);\\n        (uint256 lockBoost, uint256 timelock) = getLockBoost(_lock);\\n        uint256 nftBoost = boosts[msg.sender];\\n        uint256 lpAmount = _amount + _amount * (lockBoost + nftBoost) / ONE;\\n        magicTotalDeposits += _amount;\\n        totalLpToken += lpAmount;\\n\\n        user.originalDepositAmount = _amount;\\n        user.depositAmount = _amount;\\n        user.lpAmount = lpAmount;\\n        user.lockedUntil = block.timestamp + timelock;\\n        user.vestingLastUpdate = user.lockedUntil;\\n        user.rewardDebt = (lpAmount * accMagicPerShare / ONE).toInt256();\\n        user.lock = _lock;\\n\\n        magic.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, depositId, _amount, _lock);\\n    }\\n\\n    function withdrawPosition(uint256 _depositId, uint256 _amount) public virtual updateRewards returns (bool) {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n        uint256 depositAmount = user.depositAmount;\\n        if (depositAmount == 0) return false;\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n        // anyone can withdraw if kill swith was used\\n        if (!unlockAll) {\\n            require(block.timestamp >= user.lockedUntil, \\\"Position is still locked\\\");\\n            uint256 vestedAmount = _vestedPrincipal(msg.sender, _depositId);\\n            if (_amount > vestedAmount) {\\n                _amount = vestedAmount;\\n            }\\n        }\\n\\n        // Effects\\n        uint256 ratio = _amount * ONE / depositAmount;\\n        uint256 lpAmount = user.lpAmount * ratio / ONE;\\n\\n        totalLpToken -= lpAmount;\\n        magicTotalDeposits -= _amount;\\n\\n        user.depositAmount -= _amount;\\n        user.lpAmount -= lpAmount;\\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        // Interactions\\n        magic.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _depositId, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            withdrawPosition(depositIds[i], type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _depositId) public virtual updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n\\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedMagic;\\n\\n        if (user.depositAmount == 0 && user.lpAmount == 0) {\\n            _removeDeposit(msg.sender, _depositId);\\n        }\\n\\n        // Interactions\\n        if (_pendingMagic != 0) {\\n            magic.safeTransfer(msg.sender, _pendingMagic);\\n        }\\n\\n        emit Harvest(msg.sender, _depositId, _pendingMagic);\\n\\n        require(magic.balanceOf(address(this)) >= magicTotalDeposits, \\\"Run on banks\\\");\\n    }\\n\\n    function harvestAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            harvestPosition(depositIds[i]);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _depositId, uint256 _amount) public virtual {\\n        withdrawPosition(_depositId, _amount);\\n        harvestPosition(_depositId);\\n    }\\n\\n    function withdrawAndHarvestAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            withdrawAndHarvestPosition(depositIds[i], type(uint256).max);\\n        }\\n    }\\n\\n    function stakeTreasure(uint256 _tokenId, uint256 _amount) external virtual updateRewards {\\n        require(treasure != address(0), \\\"Cannot stake Treasure\\\");\\n        require(_amount > 0, \\\"Amount is 0\\\");\\n\\n        treasureStaked[msg.sender][_tokenId] += _amount;\\n        treasureStakedAmount[msg.sender] += _amount;\\n\\n        require(treasureStakedAmount[msg.sender] <= 20, \\\"Max 20 treasures per wallet\\\");\\n\\n        uint256 boost = getNftBoost(treasure, _tokenId, _amount);\\n        boosts[msg.sender] += boost;\\n\\n        _recalculateLpAmount(msg.sender);\\n\\n        IERC1155Upgradeable(treasure).safeTransferFrom(msg.sender, address(this), _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Staked(treasure, _tokenId, _amount, boosts[msg.sender]);\\n    }\\n\\n    function unstakeTreasure(uint256 _tokenId, uint256 _amount) external virtual updateRewards {\\n        require(treasure != address(0), \\\"Cannot stake Treasure\\\");\\n        require(_amount > 0, \\\"Amount is 0\\\");\\n        require(treasureStaked[msg.sender][_tokenId] >= _amount, \\\"Withdraw amount too big\\\");\\n\\n        treasureStaked[msg.sender][_tokenId] -= _amount;\\n        treasureStakedAmount[msg.sender] -= _amount;\\n\\n        uint256 boost = getNftBoost(treasure, _tokenId, _amount);\\n        boosts[msg.sender] -= boost;\\n\\n        _recalculateLpAmount(msg.sender);\\n\\n        IERC1155Upgradeable(treasure).safeTransferFrom(address(this), msg.sender, _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Unstaked(treasure, _tokenId, _amount, boosts[msg.sender]);\\n    }\\n\\n    function stakeLegion(uint256 _tokenId) external virtual updateRewards {\\n        require(legion != address(0), \\\"Cannot stake Legion\\\");\\n        require(legionStaked[msg.sender].add(_tokenId), \\\"NFT already staked\\\");\\n        require(legionStaked[msg.sender].length() <= 3, \\\"Max 3 legions per wallet\\\");\\n\\n        if (isLegion1_1(_tokenId)) {\\n            require(!isLegion1_1Staked[msg.sender], \\\"Max 1 1/1 legion per wallet\\\");\\n            isLegion1_1Staked[msg.sender] = true;\\n        }\\n\\n        uint256 boost = getNftBoost(legion, _tokenId, 1);\\n        boosts[msg.sender] += boost;\\n\\n        _recalculateLpAmount(msg.sender);\\n\\n        IERC721Upgradeable(legion).transferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit Staked(legion, _tokenId, 1, boosts[msg.sender]);\\n    }\\n\\n    function unstakeLegion(uint256 _tokenId) external virtual updateRewards {\\n        require(legionStaked[msg.sender].remove(_tokenId), \\\"NFT is not staked\\\");\\n\\n        if (isLegion1_1(_tokenId)) {\\n            isLegion1_1Staked[msg.sender] = false;\\n        }\\n\\n        uint256 boost = getNftBoost(legion, _tokenId, 1);\\n        boosts[msg.sender] -= boost;\\n\\n        _recalculateLpAmount(msg.sender);\\n\\n        IERC721Upgradeable(legion).transferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit Unstaked(legion, _tokenId, 1, boosts[msg.sender]);\\n    }\\n\\n    function isLegion1_1(uint256 _tokenId) public view virtual returns (bool) {\\n        try ILegionMetadataStore(legionMetadataStore).metadataForLegion(_tokenId) returns (ILegionMetadataStore.LegionMetadata memory metadata) {\\n            return metadata.legionGeneration == ILegionMetadataStore.LegionGeneration.GENESIS &&\\n                metadata.legionRarity == ILegionMetadataStore.LegionRarity.LEGENDARY;\\n        } catch Error(string memory /*reason*/) {\\n            return false;\\n        } catch Panic(uint256) {\\n            return false;\\n        } catch (bytes memory /*lowLevelData*/) {\\n            return false;\\n        }\\n    }\\n\\n    function getNftBoost(address _nft, uint256 _tokenId, uint256 _amount) public view virtual returns (uint256) {\\n        if (_nft == treasure) {\\n            return getTreasureBoost(_tokenId, _amount);\\n        } else if (_nft == legion) {\\n            try ILegionMetadataStore(legionMetadataStore).metadataForLegion(_tokenId) returns (ILegionMetadataStore.LegionMetadata memory metadata) {\\n                return getLegionBoost(uint256(metadata.legionGeneration), uint256(metadata.legionRarity));\\n            } catch Error(string memory /*reason*/) {\\n                return 0;\\n            } catch Panic(uint256) {\\n                return 0;\\n            } catch (bytes memory /*lowLevelData*/) {\\n                return 0;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function _recalculateLpAmount(address _user) internal virtual {\\n        uint256 nftBoost = boosts[_user];\\n\\n        uint256[] memory depositIds = allUserDepositIds[_user].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            uint256 depositId = depositIds[i];\\n            UserInfo storage user = userInfo[_user][depositId];\\n\\n            (uint256 lockBoost,) = getLockBoost(user.lock);\\n            uint256 _amount = user.depositAmount;\\n            uint256 newlLpAmount = _amount + _amount * (lockBoost + nftBoost) / ONE;\\n            uint256 oldLpAmount = user.lpAmount;\\n\\n            if (newlLpAmount > oldLpAmount) {\\n                uint256 lpDiff = newlLpAmount - oldLpAmount;\\n                user.rewardDebt += (lpDiff * accMagicPerShare / ONE).toInt256();\\n                totalLpToken += lpDiff;\\n                user.lpAmount += lpDiff;\\n            } else if (newlLpAmount < oldLpAmount) {\\n                uint256 lpDiff = oldLpAmount - newlLpAmount;\\n                user.rewardDebt -= (lpDiff * accMagicPerShare / ONE).toInt256();\\n                totalLpToken -= lpDiff;\\n                user.lpAmount -= lpDiff;\\n            }\\n        }\\n    }\\n\\n    function addExcludedAddress(address _exclude) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\\n        require(excludedAddresses.add(_exclude), \\\"Address already excluded\\\");\\n    }\\n\\n    function removeExcludedAddress(address _excluded) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\\n        require(excludedAddresses.remove(_excluded), \\\"Address is not excluded\\\");\\n    }\\n\\n    function setUtilizationOverride(uint256 _utilizationOverride) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\\n        utilizationOverride = _utilizationOverride;\\n    }\\n\\n    function setMagicToken(address _magic) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) {\\n        magic = IERC20Upgradeable(_magic);\\n    }\\n\\n    function setTreasure(address _treasure) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) {\\n        treasure = _treasure;\\n    }\\n\\n    function setLegion(address _legion) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) {\\n        legion = _legion;\\n    }\\n\\n    function setLegionMetadataStore(address _legionMetadataStore) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) {\\n        legionMetadataStore = _legionMetadataStore;\\n    }\\n\\n    function setLegionBoostMatrix(uint256[][] memory _legionBoostMatrix) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) {\\n        legionBoostMatrix = _legionBoostMatrix;\\n    }\\n\\n    /// @notice EMERGENCY ONLY\\n    function toggleUnlockAll() external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\\n        unlockAll = unlockAll ? false : true;\\n    }\\n\\n    function withdrawUndistributedRewards(address _to) external virtual onlyRole(ATLAS_MINE_ADMIN_ROLE) updateRewards {\\n        uint256 _totalUndistributedRewards = totalUndistributedRewards;\\n        totalUndistributedRewards = 0;\\n\\n        magic.safeTransfer(_to, _totalUndistributedRewards);\\n        emit UndistributedRewardsWithdraw(_to, _totalUndistributedRewards);\\n    }\\n\\n    function getTreasureBoost(uint256 _tokenId, uint256 _amount) public pure virtual returns (uint256 boost) {\\n        if (_tokenId == 39) { // Ancient Relic 8%\\n            boost = 75e15;\\n        } else if (_tokenId == 46) { // Bag of Rare Mushrooms 6.2%\\n            boost = 62e15;\\n        } else if (_tokenId == 47) { // Bait for Monsters 7.3%\\n            boost = 73e15;\\n        } else if (_tokenId == 48) { // Beetle-wing 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 49) { // Blue Rupee 1.5%\\n            boost = 15e15;\\n        } else if (_tokenId == 51) { // Bottomless Elixir 7.6%\\n            boost = 76e15;\\n        } else if (_tokenId == 52) { // Cap of Invisibility 7.6%\\n            boost = 76e15;\\n        } else if (_tokenId == 53) { // Carriage 6.1%\\n            boost = 61e15;\\n        } else if (_tokenId == 54) { // Castle 7.3%\\n            boost = 71e15;\\n        } else if (_tokenId == 68) { // Common Bead 5.6%\\n            boost = 56e15;\\n        } else if (_tokenId == 69) { // Common Feather 3.4%\\n            boost = 34e15;\\n        } else if (_tokenId == 71) { // Common Relic 2.2%\\n            boost = 22e15;\\n        } else if (_tokenId == 72) { // Cow 5.8%\\n            boost = 58e15;\\n        } else if (_tokenId == 73) { // Diamond 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 74) { // Divine Hourglass 6.3%\\n            boost = 63e15;\\n        } else if (_tokenId == 75) { // Divine Mask 5.7%\\n            boost = 57e15;\\n        } else if (_tokenId == 76) { // Donkey 1.2%\\n            boost = 12e15;\\n        } else if (_tokenId == 77) { // Dragon Tail 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 79) { // Emerald 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 82) { // Favor from the Gods 5.6%\\n            boost = 56e15;\\n        } else if (_tokenId == 91) { // Framed Butterfly 5.8%\\n            boost = 58e15;\\n        } else if (_tokenId == 92) { // Gold Coin 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 93) { // Grain 3.2%\\n            boost = 32e15;\\n        } else if (_tokenId == 94) { // Green Rupee 3.3%\\n            boost = 33e15;\\n        } else if (_tokenId == 95) { // Grin 15.7%\\n            boost = 157e15;\\n        } else if (_tokenId == 96) { // Half-Penny 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 97) { // Honeycomb 15.8%\\n            boost = 158e15;\\n        } else if (_tokenId == 98) { // Immovable Stone 7.2%\\n            boost = 72e15;\\n        } else if (_tokenId == 99) { // Ivory Breastpin 6.4%\\n            boost = 64e15;\\n        } else if (_tokenId == 100) { // Jar of Fairies 5.3%\\n            boost = 53e15;\\n        } else if (_tokenId == 103) { // Lumber 3%\\n            boost = 30e15;\\n        } else if (_tokenId == 104) { // Military Stipend 6.2%\\n            boost = 62e15;\\n        } else if (_tokenId == 105) { // Mollusk Shell 6.7%\\n            boost = 67e15;\\n        } else if (_tokenId == 114) { // Ox 1.6%\\n            boost = 16e15;\\n        } else if (_tokenId == 115) { // Pearl 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 116) { // Pot of Gold 5.8%\\n            boost = 58e15;\\n        } else if (_tokenId == 117) { // Quarter-Penny 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 132) { // Red Feather 6.4%\\n            boost = 64e15;\\n        } else if (_tokenId == 133) { // Red Rupee 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 141) { // Score of Ivory 6%\\n            boost = 60e15;\\n        } else if (_tokenId == 151) { // Silver Coin 0.8%\\n            boost = 8e15;\\n        } else if (_tokenId == 152) { // Small Bird 6%\\n            boost = 60e15;\\n        } else if (_tokenId == 153) { // Snow White Feather 6.4%\\n            boost = 64e15;\\n        } else if (_tokenId == 161) { // Thread of Divine Silk 7.3%\\n            boost = 73e15;\\n        } else if (_tokenId == 162) { // Unbreakable Pocketwatch 5.9%\\n            boost = 59e15;\\n        } else if (_tokenId == 164) { // Witches Broom 5.1%\\n            boost = 51e15;\\n        }\\n\\n        boost = boost * _amount;\\n    }\\n\\n    function _vestedPrincipal(address _user, uint256 _depositId) internal virtual returns (uint256 amount) {\\n        amount = calcualteVestedPrincipal(_user, _depositId);\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        user.vestingLastUpdate = block.timestamp;\\n    }\\n\\n    function _addDeposit(address _user) internal virtual returns (UserInfo storage user, uint256 newDepositId) {\\n        // start depositId from 1\\n        newDepositId = ++currentId[_user];\\n        allUserDepositIds[_user].add(newDepositId);\\n        user = userInfo[_user][newDepositId];\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _depositId) internal virtual {\\n        require(allUserDepositIds[_user].remove(_depositId), 'depositId !exists');\\n    }\\n}\\n\",\"keccak256\":\"0x028b39877b3bf59d361a60fe41a1dc4c13086592c7507c09efe3268b9dde16e1\",\"license\":\"MIT\"},\"contracts/interfaces/ILegionMetadataStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface ILegionMetadataStore {\\n    struct LegionMetadata {\\n        LegionGeneration legionGeneration;\\n        LegionClass legionClass;\\n        LegionRarity legionRarity;\\n        uint8 questLevel;\\n        uint8 craftLevel;\\n        uint8[6] constellationRanks;\\n    }\\n\\n    enum Constellation {\\n        FIRE,\\n        EARTH,\\n        WIND,\\n        WATER,\\n        LIGHT,\\n        DARK\\n    }\\n\\n    enum LegionRarity {\\n        LEGENDARY,\\n        RARE,\\n        SPECIAL,\\n        UNCOMMON,\\n        COMMON,\\n        RECRUIT\\n    }\\n\\n    enum LegionClass {\\n        RECRUIT,\\n        SIEGE,\\n        FIGHTER,\\n        ASSASSIN,\\n        RANGED,\\n        SPELLCASTER,\\n        RIVERMAN,\\n        NUMERAIRE,\\n        ALL_CLASS,\\n        ORIGIN\\n    }\\n\\n    enum LegionGeneration {\\n        GENESIS,\\n        AUXILIARY,\\n        RECRUIT\\n    }\\n\\n    // Sets the intial metadata for a token id.\\n    // Admin only.\\n    function setInitialMetadataForLegion(address _owner, uint256 _tokenId, LegionGeneration _generation, LegionClass _class, LegionRarity _rarity) external;\\n\\n    // Increases the quest level by one. It is up to the calling contract to regulate the max quest level. No validation.\\n    // Admin only.\\n    function increaseQuestLevel(uint256 _tokenId) external;\\n\\n    // Increases the craft level by one. It is up to the calling contract to regulate the max craft level. No validation.\\n    // Admin only.\\n    function increaseCraftLevel(uint256 _tokenId) external;\\n\\n    // Increases the rank of the given constellation to the given number. It is up to the calling contract to regulate the max constellation rank. No validation.\\n    // Admin only.\\n    function increaseConstellationRank(uint256 _tokenId, Constellation _constellation, uint8 _to) external;\\n\\n    // Returns the metadata for the given legion.\\n    function metadataForLegion(uint256 _tokenId) external view returns(LegionMetadata memory);\\n}\\n\",\"keccak256\":\"0x9d625d923ee0cd7b3b61a6e88ade4d738e1e2d2c3ddb39cc78a6a832fde2f156\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterOfCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IMasterOfCoin {\\n    struct CoinStream {\\n        uint256 totalRewards;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 ratePerSecond;\\n        uint256 paid;\\n    }\\n    \\n    function requestRewards() external returns (uint256 rewardsPaid);\\n\\n    function grantTokenToStream(address _stream, uint256 _amount) external;\\n\\n    function getStreams() external view returns (address[] memory);\\n\\n    function getStreamConfig(address _stream) external view returns (CoinStream memory);\\n\\n    function getGlobalRatePerSecond() external view returns (uint256 globalRatePerSecond);\\n\\n    function getRatePerSecond(address _stream) external view returns (uint256 ratePerSecond);\\n\\n    function getPendingRewards(address _stream) external view returns (uint256 pendingRewards);\\n}\\n\",\"keccak256\":\"0x73726f4618dbb2c3c4694152a8fc23f9105fcbdc98b3b0167cae91d7b8c60bc8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a0680620000216000396000f3fe608060405234801561001057600080fd5b506004361061045f5760003560e01c8063884674b01161024c578063c924e99b11610146578063e2a2189a116100c3578063f15576a611610087578063f15576a614610a5d578063f23a6e6114610a67578063fcfce63f14610a86578063fd90904c14610a99578063fdabc98614610aac57600080fd5b8063e2a2189a14610a13578063e520fc7e14610a26578063ea21cd9214610a3a578063ecbefab714610a42578063f09a401614610a4a57600080fd5b8063d5713aea1161010a578063d5713aea146109b2578063d82b99d7146109c7578063d9914e85146109da578063df3418da146109ed578063df6564d414610a0057600080fd5b8063c924e99b14610949578063ca15c8731461096d578063cd24b0a314610980578063d0d1daf414610995578063d547741f1461099f57600080fd5b8063a646c35d116101d4578063ba579c7411610198578063ba579c74146108e6578063bc168ecb146108ee578063bc197c81146108f8578063c2ee3a0814610930578063c47b633f1461093f57600080fd5b8063a646c35d14610887578063a7e69fb41461089a578063a9b54bcd146108ad578063b1a2d9bd146108c0578063b5821dc9146108d357600080fd5b80639010d07c1161021b5780639010d07c1461082757806391d148541461083a578063934d1fa41461084d5780639581372b14610855578063a217fddf1461087f57600080fd5b8063884674b0146107d55780638a7bf804146108015780638e6f6b77146108155780638ed955b91461081f57600080fd5b80633ac286421161035d578063654cfdff116102e557806373503857116102a9578063735038571461079b57806373d9a56f146107a35780637a9de514146107b85780637c4a485c146107c2578063853828b6146107cd57600080fd5b8063654cfdff1461073b578063675857eb1461074e57806367888796146107625780636902bd1014610775578063708e2ae01461078857600080fd5b806359fe213b1161032c57806359fe213b146106e25780635fdf199a146106f5578063601130481461070a57806360a7efb21461071d578063620572071461073157600080fd5b80633ac2864214610696578063456fa2c0146106a95780634ae858b3146106bc5780634b3fd3b7146106cf57600080fd5b806320f8e94e116103eb5780632aa64534116103af5780632aa64534146106425780632bf968531461064a5780632f2ff15d1461065d5780632f623e771461067057806336568abe1461068357600080fd5b806320f8e94e1461057457806321ce919d146105875780632299b8fa146105f4578063248a9ca31461061557806327cfe8561461063857600080fd5b80630dd4117a116104325780630dd4117a146104f357806317640841146105135780631ae71d2d146105285780631d3cd2a61461055757806320988cef1461056a57600080fd5b806301ffc9a71461046457806308835bf81461048c5780630a4d467c1461049f5780630d854646146104c7575b600080fd5b610477610472366004614dcb565b610acd565b60405190151581526020015b60405180910390f35b61047761049a366004614df5565b610ade565b6104b26104ad366004614e1d565b610c11565b60408051928352602083019190915201610483565b61012d546104db906001600160a01b031681565b6040516001600160a01b039091168152602001610483565b610506610501366004614e4f565b610d50565b6040516104839190614e6a565b610526610521366004614eae565b610d75565b005b610549610536366004614e4f565b6101416020526000908152604090205481565b604051908152602001610483565b610526610565366004614e4f565b611146565b61054962278d0081565b610526610582366004614df5565b611183565b6105e1610595366004614ed0565b61013c6020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919060ff1687565b6040516104839796959493929190614f32565b610549610602366004614e4f565b61013e6020526000908152604090205481565b610549610623366004614df5565b60009081526065602052604090206001015490565b6105496201518081565b610526611465565b610526610658366004614eae565b6115fc565b61052661066b366004614f74565b6119a4565b61054961067e366004614e1d565b6119cf565b610526610691366004614f74565b611a82565b6105266106a4366004614df5565b611b00565b6105266106b7366004614e4f565b611c62565b6105496106ca366004614eae565b611c9f565b6105496106dd366004614fa0565b611cdd565b6105496106f0366004614e4f565b611e45565b6106fd611ecc565b6040516104839190614fd3565b610549610718366004614eae565b611ede565b61012e546104db906001600160a01b031681565b6105496101315481565b610526610749366004615014565b61230f565b610139546104db906001600160a01b031681565b610526610770366004614df5565b6125be565b610549610783366004614ed0565b6129bb565b610526610796366004615135565b612a77565b610526612aa4565b6107ab612b02565b60405161048391906151f1565b6105496101345481565b6105496301e1338081565b610526612b9c565b6105496107e3366004614ed0565b61014060209081526000928352604080842090915290825290205481565b610137546104db906001600160a01b031681565b61054962093a8081565b610526612bfb565b6104db610835366004614eae565b612c56565b610477610848366004614f74565b612c6e565b610549612c99565b610549610863366004614e4f565b6001600160a01b03166000908152610142602052604090205490565b610549600081565b610526610895366004614e4f565b612caa565b6105266108a8366004614eae565b612e61565b6105266108bb366004614e4f565b612e75565b6105266108ce366004614e4f565b613026565b6105066108e1366004614e4f565b613063565b610549613088565b6105496101325481565b6109176109063660046152ef565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610483565b610549670de0b6b3a764000081565b6105496101305481565b610477610957366004614e4f565b61013a6020526000908152604090205460ff1681565b61054961097b366004614df5565b613096565b61012e5461047790600160a01b900460ff1681565b6105496101335481565b6105266109ad366004614f74565b6130ad565b61054960008051602061597183398151915281565b6104776109d5366004614eae565b6130d3565b6105266109e8366004614e4f565b613418565b6104b26109fb366004614df5565b6135dd565b610526610a0e366004614e4f565b613683565b610526610a21366004614df5565b6136c0565b610138546104db906001600160a01b031681565b610549613991565b610549613b91565b610526610a58366004615399565b613b9f565b61054961012f5481565b610917610a753660046153c3565b63f23a6e6160e01b95945050505050565b610549610a94366004614eae565b613dc5565b610549610aa7366004614ed0565b613e3e565b610549610aba366004614e4f565b6101426020526000908152604090205481565b6000610ad882613f14565b92915050565b610137546040516378afdef960e11b8152600481018390526000916001600160a01b03169063f15fbdf29060240161016060405180830381865afa925050508015610b46575060408051601f3d908101601f19168201909252610b43918101906154bd565b60015b610bce57610b52615550565b806308c379a01415610b7b5750610b6761556c565b80610b725750610b95565b50600092915050565b634e487b711415610b9557610b8e6155f6565b90610b7257505b3d808015610bbf576040519150601f19603f3d011682016040523d82523d6000602084013e610bc4565b606091505b5060009392505050565b600081516002811115610be357610be3614efa565b148015610c055750600081604001516005811115610c0357610c03614efa565b145b9392505050565b919050565b60008080836004811115610c2757610c27614efa565b1415610c4d5767016345785d8a0000610c4462093a80600261562c565b91509150915091565b6001836004811115610c6157610c61614efa565b1415610c7c57506703782dace9d900009262278d0092509050565b6002836004811115610c9057610c90614efa565b1415610cad57670b1a2bc2ec500000610c4462278d00600361562c565b6003836004811115610cc157610cc1614efa565b1415610cde576718fae27693b40000610c4462278d00600661562c565b6004836004811115610cf257610cf2614efa565b1415610d0e5750673782dace9d900000926301e1338092509050565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206c6f636b2076616c756560701b60448201526064015b60405180910390fd5b6001600160a01b038116600090815261013d60205260409020606090610ad890613f39565b610132548015610ea657600080610dff61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb919061564b565b915091508161012f6000828254610e169190615664565b92505081905550806101306000828254610e309190615664565b90915550839050610e49670de0b6b3a76400008461562c565b610e53919061567c565b6101316000828254610e659190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000610eb0613991565b90506000805160206159b183398151915281604051610ed191815260200190565b60405180910390a1610138546001600160a01b0316610f2a5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b6520547265617375726560581b6044820152606401610d47565b60008311610f685760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610d47565b3360009081526101406020908152604080832087845290915281208054859290610f93908490615664565b9091555050336000908152610141602052604081208054859290610fb8908490615664565b909155505033600090815261014160205260409020546014101561101e5760405162461bcd60e51b815260206004820152601b60248201527f4d617820323020747265617375726573207065722077616c6c657400000000006044820152606401610d47565b61013854600090611039906001600160a01b03168686611cdd565b336000908152610142602052604081208054929350839290919061105e908490615664565b9091555061106d905033613f46565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a916110b191339130918b918b916004016156f6565b600060405180830381600087803b1580156110cb57600080fd5b505af11580156110df573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed945061113793506001600160a01b039092169189918991615730565b60405180910390a15050505050565b60008051602061597183398151915261115f813361413f565b5061013880546001600160a01b0319166001600160a01b0392909216919091179055565b610132548015611290576000806111e961012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546112009190615664565b9250508190555080610130600082825461121a9190615664565b90915550839050611233670de0b6b3a76400008461562c565b61123d919061567c565b610131600082825461124f9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b600061129a613991565b90506000805160206159b1833981519152816040516112bb91815260200190565b60405180910390a133600090815261013c60209081526040808320868452909152812061013154600282015491929161131191670de0b6b3a764000091611302919061562c565b61130c919061567c565b6141a3565b9050600061132d8360050154836113289190615756565b614211565b60058401839055600184015490915015801561134b57506002830154155b1561135a5761135a3387614263565b80156113785761012d54611378906001600160a01b031633836142c6565b604051818152869033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a36101335461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611420919061564b565b101561145d5760405162461bcd60e51b815260206004820152600c60248201526b52756e206f6e2062616e6b7360a01b6044820152606401610d47565b505050505050565b60008051602061597183398151915261147e813361413f565b61013254801561158b576000806114e461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546114fb9190615664565b925050819055508061013060008282546115159190615664565b9091555083905061152e670de0b6b3a76400008461562c565b611538919061567c565b610131600082825461154a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611595613991565b90506000805160206159b1833981519152816040516115b691815260200190565b60405180910390a161012e54600160a01b900460ff166115d75760016115da565b60005b61012e8054911515600160a01b0260ff60a01b19909216919091179055505050565b6101325480156117095760008061166261012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546116799190615664565b925050819055508061013060008282546116939190615664565b909155508390506116ac670de0b6b3a76400008461562c565b6116b6919061567c565b61013160008282546116c89190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611713613991565b90506000805160206159b18339815191528160405161173491815260200190565b60405180910390a1610138546001600160a01b031661178d5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b6520547265617375726560581b6044820152606401610d47565b600083116117cb5760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610d47565b336000908152610140602090815260408083208784529091529020548311156118365760405162461bcd60e51b815260206004820152601760248201527f576974686472617720616d6f756e7420746f6f206269670000000000000000006044820152606401610d47565b3360009081526101406020908152604080832087845290915281208054859290611861908490615795565b9091555050336000908152610141602052604081208054859290611886908490615795565b9091555050610138546000906118a6906001600160a01b03168686611cdd565b33600090815261014260205260408120805492935083929091906118cb908490615795565b909155506118da905033613f46565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a9161191e91309133918b918b916004016156f6565b600060405180830381600087803b15801561193857600080fd5b505af115801561194c573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00945061113793506001600160a01b039092169189918991615730565b6000828152606560205260409020600101546119c0813361413f565b6119ca8383614329565b505050565b6000808260048111156119e4576119e4614efa565b14156119f257506000919050565b6001826004811115611a0657611a06614efa565b1415611a16575062093a80919050565b6002826004811115611a2a57611a2a614efa565b1415611a3a575062127500919050565b6003826004811115611a4e57611a4e614efa565b1415611a5e575062278d00919050565b6004826004811115611a7257611a72614efa565b1415610c0c5750623b5380919050565b6001600160a01b0381163314611af25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d47565b611afc828261434b565b5050565b600080516020615971833981519152611b19813361413f565b610132548015611c2657600080611b7f61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254611b969190615664565b92505081905550806101306000828254611bb09190615664565b90915550839050611bc9670de0b6b3a76400008461562c565b611bd3919061567c565b6101316000828254611be59190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611c30613991565b90506000805160206159b183398151915281604051611c5191815260200190565b60405180910390a150505061013455565b600080516020615971833981519152611c7b813361413f565b5061013980546001600160a01b0319166001600160a01b0392909216919091179055565b61013b8281548110611cb057600080fd5b906000526020600020018181548110611cc857600080fd5b90600052602060002001600091509150505481565b610138546000906001600160a01b0385811691161415611d0857611d018383611ede565b9050610c05565b610139546001600160a01b0385811691161415610bc457610137546040516378afdef960e11b8152600481018590526001600160a01b039091169063f15fbdf29060240161016060405180830381865afa925050508015611d86575060408051601f3d908101601f19168201909252611d83918101906154bd565b60015b611e1057611d92615550565b806308c379a01415611dbc5750611da761556c565b80611db25750611dd6565b6000915050610c05565b634e487b711415611dd657611dcf6155f6565b90611db257505b3d808015611e00576040519150601f19603f3d011682016040523d82523d6000602084013e611e05565b606091505b506000915050610c05565b8051611e3d906002811115611e2757611e27614efa565b82604001516005811115610a9457610a94614efa565b915050610c05565b6001600160a01b038116600090815261013d602052604081208190611e699061436d565b905060005b81811015611ec5576001600160a01b038416600090815261013d60205260408120611e999083614377565b9050611ea58582613e3e565b611eaf9085615664565b9350508080611ebd906157ac565b915050611e6e565b5050919050565b6060611ed9610135613f39565b905090565b60008260271415611ef8575067010a741a46278000612305565b82602e1415611f0f575066dc44abe8130000612305565b82602f1415611f275750670103591cfc9a8000612305565b8260301415611f3e5750661c6bf526340000612305565b8260311415611f55575066354a6ba7a18000612305565b8260331415611f6d575067010e0198eaee0000612305565b8260341415611f85575067010e0198eaee0000612305565b8260351415611f9c575066d8b72d434c8000612305565b8260361415611fb3575066fc3e1fb30d8000612305565b8260441415611fca575066c6f3b40b6c0000612305565b8260451415611fe157506678cad1e25d0000612305565b8260471415611ff85750664e28e2290f0000612305565b826048141561200f575066ce0eb154f90000612305565b82604914156120265750661c6bf526340000612305565b82604a141561203d575066dfd22a8cd98000612305565b82604b1415612054575066ca8132b0328000612305565b82604c141561206b5750662aa1efb94e0000612305565b82604d14156120825750661c6bf526340000612305565b82604f14156120995750661c6bf526340000612305565b82605214156120b0575066c6f3b40b6c0000612305565b82605b14156120c7575066ce0eb154f90000612305565b82605c14156120de5750661c6bf526340000612305565b82605d14156120f557506671afd498d00000612305565b82605e141561210c575066753d533d968000612305565b82605f1415612124575067022dc6ab0dbc8000612305565b826060141561213b5750661c6bf526340000612305565b826061141561215357506702315429b2830000612305565b826062141561216a575066ffcb9e57d40000612305565b8260631415612181575066e35fa931a00000612305565b8260641415612198575066bc4b381d188000612305565b82606714156121af5750666a94d74f430000612305565b82606814156121c6575066dc44abe8130000612305565b82606914156121dd575066ee08251ff38000612305565b82607214156121f457506638d7ea4c680000612305565b826073141561220b5750661c6bf526340000612305565b8260741415612222575066ce0eb154f90000612305565b82607514156122395750661c6bf526340000612305565b8260841415612250575066e35fa931a00000612305565b82608514156122675750661c6bf526340000612305565b82608d141561227e575066d529ae9e860000612305565b82609714156122955750661c6bf526340000612305565b82609814156122ac575066d529ae9e860000612305565b82609914156122c3575066e35fa931a00000612305565b8260a114156122db5750670103591cfc9a8000612305565b8260a214156122f2575066d19c2ff9bf8000612305565b8260a41415612305575066b5303ad38b80005b610c05828261562c565b61013254801561241c5760008061237561012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461238c9190615664565b925050819055508061013060008282546123a69190615664565b909155508390506123bf670de0b6b3a76400008461562c565b6123c9919061567c565b61013160008282546123db9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612426613991565b90506000805160206159b18339815191528160405161244791815260200190565b60405180910390a160008061245b33614383565b9150915060008061246b87610c11565b3360009081526101426020526040812054929450909250670de0b6b3a76400006124958386615664565b61249f908c61562c565b6124a9919061567c565b6124b3908b615664565b90508961013360008282546124c89190615664565b925050819055508061013260008282546124e29190615664565b9091555050898655600186018a9055600286018190556125028342615664565b6003870181905560048701556101315461252a90670de0b6b3a764000090611302908461562c565b60058701556006860180548a919060ff1916600183600481111561255057612550614efa565b021790555061012d5461256e906001600160a01b031633308d614402565b84336001600160a01b03167fa7db47d395930224de3f54139208b4a958fe3747c2ad1dee5a6624643a6def938c8c6040516125aa9291906157c7565b60405180910390a350505050505050505050565b6101325480156126cb5760008061262461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461263b9190615664565b925050819055508061013060008282546126559190615664565b9091555083905061266e670de0b6b3a76400008461562c565b612678919061567c565b610131600082825461268a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006126d5613991565b90506000805160206159b1833981519152816040516126f691815260200190565b60405180910390a1610139546001600160a01b031661274d5760405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1039ba30b5b2902632b3b4b7b760691b6044820152606401610d47565b33600090815261013f60205260409020612767908461443a565b6127a85760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e481cdd185ad95960721b6044820152606401610d47565b33600090815261013f602052604090206003906127c49061436d565b11156128125760405162461bcd60e51b815260206004820152601860248201527f4d61782033206c6567696f6e73207065722077616c6c657400000000000000006044820152606401610d47565b61281b83610ade565b1561289d5733600090815261013a602052604090205460ff16156128815760405162461bcd60e51b815260206004820152601b60248201527f4d6178203120312f31206c6567696f6e207065722077616c6c657400000000006044820152606401610d47565b33600090815261013a60205260409020805460ff191660011790555b610139546000906128b9906001600160a01b0316856001611cdd565b33600090815261014260205260408120805492935083929091906128de908490615664565b909155506128ed905033613f46565b610139546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561294057600080fd5b505af1158015612954573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed94506129ad93506001600160a01b03909216918891600191615730565b60405180910390a150505050565b6001600160a01b038216600090815261013c602090815260408083208484529091528120600681015460ff16826129f1826119cf565b8360030154612a009190615664565b60038401549091504282111580612a21575061012e54600160a01b900460ff165b15612a2f5783549450612a6d565b8360040154421115612a6d57612a458183615795565b6004850154612a549042615795565b8554612a60919061562c565b612a6a919061567c565b94505b5050505092915050565b600080516020615971833981519152612a90813361413f565b81516119ca9061013b906020850190614c91565b33600090815261013d60205260408120612abd90613f39565b905060005b8151811015611afc57612af0828281518110612ae057612ae06157db565b6020026020010151600019612e61565b80612afa816157ac565b915050612ac2565b606061013b805480602002602001604051908101604052809291908181526020016000905b82821015612b9357600084815260209081902083018054604080518285028101850190915281815292830182828015612b7f57602002820191906000526020600020905b815481526020019060010190808311612b6b575b505050505081526020019060010190612b27565b50505050905090565b33600090815261013d60205260408120612bb590613f39565b905060005b8151811015611afc57612be8828281518110612bd857612bd86157db565b60200260200101516000196130d3565b5080612bf3816157ac565b915050612bba565b33600090815261013d60205260408120612c1490613f39565b905060005b8151811015611afc57612c44828281518110612c3757612c376157db565b6020026020010151611183565b80612c4e816157ac565b915050612c19565b6000828152609760205260408120610c059083614377565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b612ca762093a80600261562c565b81565b600080516020615971833981519152612cc3813361413f565b610132548015612dd057600080612d2961012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254612d409190615664565b92505081905550806101306000828254612d5a9190615664565b90915550839050612d73670de0b6b3a76400008461562c565b612d7d919061567c565b6101316000828254612d8f9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612dda613991565b90506000805160206159b183398151915281604051612dfb91815260200190565b60405180910390a1612e0f61013585614446565b612e5b5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f74206578636c756465640000000000000000006044820152606401610d47565b50505050565b612e6b82826130d3565b50611afc82611183565b600080516020615971833981519152612e8e813361413f565b610132548015612f9b57600080612ef461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254612f0b9190615664565b92505081905550806101306000828254612f259190615664565b90915550839050612f3e670de0b6b3a76400008461562c565b612f48919061567c565b6101316000828254612f5a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612fa5613991565b90506000805160206159b183398151915281604051612fc691815260200190565b60405180910390a1612fda6101358561445b565b612e5b5760405162461bcd60e51b815260206004820152601860248201527f4164647265737320616c7265616479206578636c7564656400000000000000006044820152606401610d47565b60008051602061597183398151915261303f813361413f565b5061013780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815261013f60205260409020606090610ad890613f39565b612ca762278d00600661562c565b6000818152609760205260408120610ad89061436d565b6000828152606560205260409020600101546130c9813361413f565b6119ca838361434b565b6101325460009080156131e35760008061313c61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546131539190615664565b9250508190555080610130600082825461316d9190615664565b90915550839050613186670de0b6b3a76400008461562c565b613190919061567c565b61013160008282546131a29190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006131ed613991565b90506000805160206159b18339815191528160405161320e91815260200190565b60405180910390a133600090815261013c60209081526040808320888452909152902060018101548061324657600094505050613410565b80861115613252578095505b61012e54600160a01b900460ff166132d45781600301544210156132b85760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e206973207374696c6c206c6f636b656400000000000000006044820152606401610d47565b60006132c43389614470565b9050808711156132d2578096505b505b6000816132e9670de0b6b3a76400008961562c565b6132f3919061567c565b90506000670de0b6b3a7640000828560020154613310919061562c565b61331a919061567c565b905080610132600082825461332f9190615795565b925050819055508761013360008282546133499190615795565b92505081905550878460010160008282546133649190615795565b925050819055508084600201600082825461337f9190615795565b9091555050610131546133a090670de0b6b3a764000090611302908461562c565b8460050160008282546133b39190615756565b909155505061012d546133d0906001600160a01b0316338a6142c6565b604051888152899033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a360019650505050505b505092915050565b600080516020615971833981519152613431813361413f565b61013254801561353e5760008061349761012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546134ae9190615664565b925050819055508061013060008282546134c89190615664565b909155508390506134e1670de0b6b3a76400008461562c565b6134eb919061567c565b61013160008282546134fd9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000613548613991565b90506000805160206159b18339815191528160405161356991815260200190565b60405180910390a16101308054600090915561012d54613593906001600160a01b031686836142c6565b846001600160a01b03167f7c83d02a6ed4d6182087a0e243293e39c967dc6f12958ea7201d63214728d0f0826040516135ce91815260200190565b60405180910390a25050505050565b60008060006135ea613991565b9050670429d069189e00008110156136055760009250613671565b67058d15e17628000081101561363357600a61362285600561562c565b61362c919061567c565b9250613671565b6706f05b59d3b2000081101561365057600a61362285600661562c565b670853a0d2313c000081101561366d57600a61362285600861562c565b8392505b61367b8385615795565b915050915091565b60008051602061597183398151915261369c813361413f565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6101325480156137cd5760008061372661012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461373d9190615664565b925050819055508061013060008282546137579190615664565b90915550839050613770670de0b6b3a76400008461562c565b61377a919061567c565b610131600082825461378c9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006137d7613991565b90506000805160206159b1833981519152816040516137f891815260200190565b60405180910390a133600090815261013f6020526040902061381a90846144ae565b61385a5760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081cdd185ad959607a1b6044820152606401610d47565b61386383610ade565b156138815733600090815261013a60205260409020805460ff191690555b6101395460009061389d906001600160a01b0316856001611cdd565b33600090815261014260205260408120805492935083929091906138c2908490615795565b909155506138d1905033613f46565b610139546040516323b872dd60e01b8152306004820152336024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561392457600080fd5b505af1158015613938573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de0094506129ad93506001600160a01b03909216918891600191615730565b61013454600090156139a557506101345490565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156139f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a14919061564b565b90506000613a2361013561436d565b905060005b81811015613ad45761012d546001600160a01b03166370a08231613a4e61013584614377565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab6919061564b565b613ac09084615795565b925080613acc816157ac565b915050613a28565b506101335461012d546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b48919061564b565b613b529190615795565b9050613b5e8184615795565b92508215613b8b5782670de0b6b3a764000061013354613b7e919061562c565b613b88919061567c565b93505b50505090565b612ca762278d00600361562c565b600054610100900460ff16613bba5760005460ff1615613bbe565b303b155b613c215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d47565b600054610100900460ff16158015613c43576000805461ffff19166101011790555b61012d80546001600160a01b038086166001600160a01b03199283161790925561012e805492851692909116919091179055613c8d600080516020615971833981519152806144ba565b613ca560008051602061597183398151915233614329565b60405180606001604052806040518060c001604052806753444835ec5800008152602001671bc16d674ec800008152602001670a688906bd8b00008152602001670de0b6b3a764000081526020016706f05b59d3b200008152602001600081525081526020016040518060c00160405280600081526020016703782dace9d9000081526020016000815260200167016345785d8a0000815260200166b1a2bc2ec500008152602001600081525081526020016040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525081525061013b906003613d9e929190614cea565b50613da7614505565b613daf61454e565b80156119ca576000805461ff0019169055505050565b61013b5460009083108015613df8575061013b8381548110613de957613de96157db565b60009182526020909120015482105b15610b725761013b8381548110613e1157613e116157db565b906000526020600020018281548110613e2c57613e2c6157db565b90600052602060002001549050610ad8565b6001600160a01b03828116600090815261013c60209081526040808320858452909152808220610131546101325461012e54935163f6ed201760e01b815230600482015294959294919390928692613eba929091169063f6ed201790602401602060405180830381865afa158015610ddb573d6000803e3d6000fd5b50905081613ed0670de0b6b3a76400008361562c565b613eda919061567c565b613ee49084615664565b9250612a6a8460050154613f0a670de0b6b3a7640000868860020154611302919061562c565b6113289190615756565b60006001600160e01b03198216630271189760e51b1480610ad85750610ad882614575565b60606000610c058361459a565b6001600160a01b0381166000908152610142602090815260408083205461013d9092528220909190613f7790613f39565b905060005b8151811015612e5b576000828281518110613f9957613f996157db565b6020908102919091018101516001600160a01b038716600090815261013c8352604080822083835290935291822060068101549193509190613fdd9060ff16610c11565b5060018301549091506000670de0b6b3a7640000613ffb8985615664565b614005908461562c565b61400f919061567c565b6140199083615664565b6002850154909150808211156140a65760006140358284615795565b9050614052670de0b6b3a76400006101315483611302919061562c565b86600501600082825461406591906157f1565b9250508190555080610132600082825461407f9190615664565b925050819055508086600201600082825461409a9190615664565b90915550614126915050565b808210156141265760006140ba8383615795565b90506140d7670de0b6b3a76400006101315483611302919061562c565b8660050160008282546140ea9190615756565b925050819055508061013260008282546141049190615795565b925050819055508086600201600082825461411f9190615795565b9091555050505b5050505050508080614137906157ac565b915050613f7c565b6141498282612c6e565b611afc57614161816001600160a01b031660146145f6565b61416c8360206145f6565b60405160200161417d929190615832565b60408051601f198184030181529082905262461bcd60e51b8252610d47916004016158a7565b60006001600160ff1b0382111561420d5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610d47565b5090565b60008082121561420d5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610d47565b6001600160a01b038216600090815261013d6020526040902061428690826144ae565b611afc5760405162461bcd60e51b81526020600482015260116024820152706465706f7369744964202165786973747360781b6044820152606401610d47565b6040516001600160a01b0383166024820152604481018290526119ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614792565b6143338282614864565b60008281526097602052604090206119ca908261445b565b61435582826148ea565b60008281526097602052604090206119ca9082614446565b6000610ad8825490565b6000610c058383614951565b6001600160a01b038116600090815261013e60205260408120805482919082906143ac906157ac565b91829055506001600160a01b038416600090815261013d602052604090209091506143d7908261443a565b506001600160a01b03909216600090815261013c602090815260408083208584529091529020929050565b6040516001600160a01b0380851660248301528316604482015260648101829052612e5b9085906323b872dd60e01b906084016142f2565b6000610c05838361497b565b6000610c05836001600160a01b0384166149ca565b6000610c05836001600160a01b03841661497b565b600061447c83836129bb565b6001600160a01b03909316600090815261013c6020908152604080832094835293905291909120426004909101555090565b6000610c0583836149ca565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600054610100900460ff1661452c5760405162461bcd60e51b8152600401610d47906158ba565b614534614abd565b61453c614abd565b614544614abd565b61454c614abd565b565b600054610100900460ff166145345760405162461bcd60e51b8152600401610d47906158ba565b60006001600160e01b03198216635a05180f60e01b1480610ad85750610ad882614ae4565b6060816000018054806020026020016040519081016040528092919081815260200182805480156145ea57602002820191906000526020600020905b8154815260200190600101908083116145d6575b50505050509050919050565b6060600061460583600261562c565b614610906002615664565b67ffffffffffffffff81111561462857614628615037565b6040519080825280601f01601f191660200182016040528015614652576020820181803683370190505b509050600360fc1b8160008151811061466d5761466d6157db565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061469c5761469c6157db565b60200101906001600160f81b031916908160001a90535060006146c084600261562c565b6146cb906001615664565b90505b6001811115614743576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146ff576146ff6157db565b1a60f81b828281518110614715576147156157db565b60200101906001600160f81b031916908160001a90535060049490941c9361473c81615905565b90506146ce565b508315610c055760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d47565b60006147e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b199092919063ffffffff16565b8051909150156119ca5780806020019051810190614805919061591c565b6119ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d47565b61486e8282612c6e565b611afc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556148a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6148f48282612c6e565b15611afc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826000018281548110614968576149686157db565b9060005260206000200154905092915050565b60008181526001830160205260408120546149c257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ad8565b506000610ad8565b60008181526001830160205260408120548015614ab35760006149ee600183615795565b8554909150600090614a0290600190615795565b9050818114614a67576000866000018281548110614a2257614a226157db565b9060005260206000200154905080876000018481548110614a4557614a456157db565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a7857614a7861593e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ad8565b6000915050610ad8565b600054610100900460ff1661454c5760405162461bcd60e51b8152600401610d47906158ba565b60006001600160e01b03198216637965db0b60e01b1480610ad857506301ffc9a760e01b6001600160e01b0319831614610ad8565b6060614b288484600085614b30565b949350505050565b606082471015614b915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d47565b843b614bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d47565b600080866001600160a01b03168587604051614bfb9190615954565b60006040518083038185875af1925050503d8060008114614c38576040519150601f19603f3d011682016040523d82523d6000602084013e614c3d565b606091505b5091509150614c4d828286614c58565b979650505050505050565b60608315614c67575081610c05565b825115614c775782518084602001fd5b8160405162461bcd60e51b8152600401610d4791906158a7565b828054828255906000526020600020908101928215614cde579160200282015b82811115614cde5782518051614cce918491602090910190614d31565b5091602001919060010190614cb1565b5061420d929150614d78565b828054828255906000526020600020908101928215614cde579160200282015b82811115614cde578251614d219083906006614d31565b5091602001919060010190614d0a565b828054828255906000526020600020908101928215614d6c579160200282015b82811115614d6c578251825591602001919060010190614d51565b5061420d929150614d95565b8082111561420d576000614d8c8282614daa565b50600101614d78565b5b8082111561420d5760008155600101614d96565b5080546000825590600052602060002090810190614dc89190614d95565b50565b600060208284031215614ddd57600080fd5b81356001600160e01b031981168114610c0557600080fd5b600060208284031215614e0757600080fd5b5035919050565b803560058110610c0c57600080fd5b600060208284031215614e2f57600080fd5b610c0582614e0e565b80356001600160a01b0381168114610c0c57600080fd5b600060208284031215614e6157600080fd5b610c0582614e38565b6020808252825182820181905260009190848201906040850190845b81811015614ea257835183529284019291840191600101614e86565b50909695505050505050565b60008060408385031215614ec157600080fd5b50508035926020909101359150565b60008060408385031215614ee357600080fd5b614eec83614e38565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60058110614f2e57634e487b7160e01b600052602160045260246000fd5b9052565b600060e0820190508882528760208301528660408301528560608301528460808301528360a0830152614f6860c0830184614f10565b98975050505050505050565b60008060408385031215614f8757600080fd5b82359150614f9760208401614e38565b90509250929050565b600080600060608486031215614fb557600080fd5b614fbe84614e38565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015614ea25783516001600160a01b031683529284019291840191600101614fef565b6000806040838503121561502757600080fd5b82359150614f9760208401614e0e565b634e487b7160e01b600052604160045260246000fd5b60c0810181811067ffffffffffffffff8211171561506d5761506d615037565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561509957615099615037565b6040525050565b600067ffffffffffffffff8211156150ba576150ba615037565b5060051b60200190565b600082601f8301126150d557600080fd5b813560206150e2826150a0565b6040516150ef8282615073565b83815260059390931b850182019282810191508684111561510f57600080fd5b8286015b8481101561512a5780358352918301918301615113565b509695505050505050565b6000602080838503121561514857600080fd5b823567ffffffffffffffff8082111561516057600080fd5b818501915085601f83011261517457600080fd5b813561517f816150a0565b60405161518c8282615073565b82815260059290921b84018501918581019150888311156151ac57600080fd5b8585015b838110156151e4578035858111156151c85760008081fd5b6151d68b89838a01016150c4565b8452509186019186016151b0565b5098975050505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561526d57888603603f19018552825180518088529088019088880190845b818110156152575783518352928a0192918a019160010161523b565b5090975050509386019391860191600101615219565b509398975050505050505050565b600082601f83011261528c57600080fd5b813567ffffffffffffffff8111156152a6576152a6615037565b6040516152bd601f8301601f191660200182615073565b8181528460208386010111156152d257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561530757600080fd5b61531086614e38565b945061531e60208701614e38565b9350604086013567ffffffffffffffff8082111561533b57600080fd5b61534789838a016150c4565b9450606088013591508082111561535d57600080fd5b61536989838a016150c4565b9350608088013591508082111561537f57600080fd5b5061538c8882890161527b565b9150509295509295909350565b600080604083850312156153ac57600080fd5b6153b583614e38565b9150614f9760208401614e38565b600080600080600060a086880312156153db57600080fd5b6153e486614e38565b94506153f260208701614e38565b93506040860135925060608601359150608086013567ffffffffffffffff81111561541c57600080fd5b61538c8882890161527b565b805160068110610c0c57600080fd5b805160ff81168114610c0c57600080fd5b600082601f83011261545957600080fd5b60405160c0810181811067ffffffffffffffff8211171561547c5761547c615037565b6040528060c084018581111561549157600080fd5b845b818110156154b2576154a481615437565b835260209283019201615493565b509195945050505050565b600061016082840312156154d057600080fd5b6040516154dc8161504d565b8251600381106154eb57600080fd5b81526020830151600a81106154ff57600080fd5b602082015261551060408401615428565b604082015261552160608401615437565b606082015261553260808401615437565b60808201526155448460a08501615448565b60a08201529392505050565b600060033d11156155695760046000803e5060005160e01c5b90565b600060443d101561557a5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156155aa57505050505090565b82850191508151818111156155c25750505050505090565b843d87010160208285010111156155dc5750505050505090565b6155eb60208286010187615073565b509095945050505050565b60008060233d1115615612576020600460003e50506000516001905b9091565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561564657615646615616565b500290565b60006020828403121561565d57600080fd5b5051919050565b6000821982111561567757615677615616565b500190565b60008261569957634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156156b95781810151838201526020016156a1565b83811115612e5b5750506000910152565b600081518084526156e281602086016020860161569e565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614c4d908301846156ca565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008083128015600160ff1b85018412161561577457615774615616565b6001600160ff1b038401831381161561578f5761578f615616565b50500390565b6000828210156157a7576157a7615616565b500390565b60006000198214156157c0576157c0615616565b5060010190565b82815260408101610c056020830184614f10565b634e487b7160e01b600052603260045260246000fd5b600080821280156001600160ff1b038490038513161561581357615813615616565b600160ff1b839003841281161561582c5761582c615616565b50500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161586a81601785016020880161569e565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161589b81602884016020880161569e565b01602801949350505050565b602081526000610c0560208301846156ca565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008161591457615914615616565b506000190190565b60006020828403121561592e57600080fd5b81518015158114610c0557600080fd5b634e487b7160e01b600052603160045260246000fd5b6000825161596681846020870161569e565b919091019291505056fe8854ad49c2333a9aa4c7e03244162b637ec22a8951292f983b3d3f845725ff7c51ba001b2556bfc97b1ed73ece5dee29b5c284d8435120c957515cf11017f000163eacd81cbfca2d1ec176759e7107e34229c5cbc5ec0b3fde68ffdef1157e02a264697066735822122087521846592f50339d643627a17ad16463787e07791e77d8460a49c4bece917064736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061045f5760003560e01c8063884674b01161024c578063c924e99b11610146578063e2a2189a116100c3578063f15576a611610087578063f15576a614610a5d578063f23a6e6114610a67578063fcfce63f14610a86578063fd90904c14610a99578063fdabc98614610aac57600080fd5b8063e2a2189a14610a13578063e520fc7e14610a26578063ea21cd9214610a3a578063ecbefab714610a42578063f09a401614610a4a57600080fd5b8063d5713aea1161010a578063d5713aea146109b2578063d82b99d7146109c7578063d9914e85146109da578063df3418da146109ed578063df6564d414610a0057600080fd5b8063c924e99b14610949578063ca15c8731461096d578063cd24b0a314610980578063d0d1daf414610995578063d547741f1461099f57600080fd5b8063a646c35d116101d4578063ba579c7411610198578063ba579c74146108e6578063bc168ecb146108ee578063bc197c81146108f8578063c2ee3a0814610930578063c47b633f1461093f57600080fd5b8063a646c35d14610887578063a7e69fb41461089a578063a9b54bcd146108ad578063b1a2d9bd146108c0578063b5821dc9146108d357600080fd5b80639010d07c1161021b5780639010d07c1461082757806391d148541461083a578063934d1fa41461084d5780639581372b14610855578063a217fddf1461087f57600080fd5b8063884674b0146107d55780638a7bf804146108015780638e6f6b77146108155780638ed955b91461081f57600080fd5b80633ac286421161035d578063654cfdff116102e557806373503857116102a9578063735038571461079b57806373d9a56f146107a35780637a9de514146107b85780637c4a485c146107c2578063853828b6146107cd57600080fd5b8063654cfdff1461073b578063675857eb1461074e57806367888796146107625780636902bd1014610775578063708e2ae01461078857600080fd5b806359fe213b1161032c57806359fe213b146106e25780635fdf199a146106f5578063601130481461070a57806360a7efb21461071d578063620572071461073157600080fd5b80633ac2864214610696578063456fa2c0146106a95780634ae858b3146106bc5780634b3fd3b7146106cf57600080fd5b806320f8e94e116103eb5780632aa64534116103af5780632aa64534146106425780632bf968531461064a5780632f2ff15d1461065d5780632f623e771461067057806336568abe1461068357600080fd5b806320f8e94e1461057457806321ce919d146105875780632299b8fa146105f4578063248a9ca31461061557806327cfe8561461063857600080fd5b80630dd4117a116104325780630dd4117a146104f357806317640841146105135780631ae71d2d146105285780631d3cd2a61461055757806320988cef1461056a57600080fd5b806301ffc9a71461046457806308835bf81461048c5780630a4d467c1461049f5780630d854646146104c7575b600080fd5b610477610472366004614dcb565b610acd565b60405190151581526020015b60405180910390f35b61047761049a366004614df5565b610ade565b6104b26104ad366004614e1d565b610c11565b60408051928352602083019190915201610483565b61012d546104db906001600160a01b031681565b6040516001600160a01b039091168152602001610483565b610506610501366004614e4f565b610d50565b6040516104839190614e6a565b610526610521366004614eae565b610d75565b005b610549610536366004614e4f565b6101416020526000908152604090205481565b604051908152602001610483565b610526610565366004614e4f565b611146565b61054962278d0081565b610526610582366004614df5565b611183565b6105e1610595366004614ed0565b61013c6020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919060ff1687565b6040516104839796959493929190614f32565b610549610602366004614e4f565b61013e6020526000908152604090205481565b610549610623366004614df5565b60009081526065602052604090206001015490565b6105496201518081565b610526611465565b610526610658366004614eae565b6115fc565b61052661066b366004614f74565b6119a4565b61054961067e366004614e1d565b6119cf565b610526610691366004614f74565b611a82565b6105266106a4366004614df5565b611b00565b6105266106b7366004614e4f565b611c62565b6105496106ca366004614eae565b611c9f565b6105496106dd366004614fa0565b611cdd565b6105496106f0366004614e4f565b611e45565b6106fd611ecc565b6040516104839190614fd3565b610549610718366004614eae565b611ede565b61012e546104db906001600160a01b031681565b6105496101315481565b610526610749366004615014565b61230f565b610139546104db906001600160a01b031681565b610526610770366004614df5565b6125be565b610549610783366004614ed0565b6129bb565b610526610796366004615135565b612a77565b610526612aa4565b6107ab612b02565b60405161048391906151f1565b6105496101345481565b6105496301e1338081565b610526612b9c565b6105496107e3366004614ed0565b61014060209081526000928352604080842090915290825290205481565b610137546104db906001600160a01b031681565b61054962093a8081565b610526612bfb565b6104db610835366004614eae565b612c56565b610477610848366004614f74565b612c6e565b610549612c99565b610549610863366004614e4f565b6001600160a01b03166000908152610142602052604090205490565b610549600081565b610526610895366004614e4f565b612caa565b6105266108a8366004614eae565b612e61565b6105266108bb366004614e4f565b612e75565b6105266108ce366004614e4f565b613026565b6105066108e1366004614e4f565b613063565b610549613088565b6105496101325481565b6109176109063660046152ef565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610483565b610549670de0b6b3a764000081565b6105496101305481565b610477610957366004614e4f565b61013a6020526000908152604090205460ff1681565b61054961097b366004614df5565b613096565b61012e5461047790600160a01b900460ff1681565b6105496101335481565b6105266109ad366004614f74565b6130ad565b61054960008051602061597183398151915281565b6104776109d5366004614eae565b6130d3565b6105266109e8366004614e4f565b613418565b6104b26109fb366004614df5565b6135dd565b610526610a0e366004614e4f565b613683565b610526610a21366004614df5565b6136c0565b610138546104db906001600160a01b031681565b610549613991565b610549613b91565b610526610a58366004615399565b613b9f565b61054961012f5481565b610917610a753660046153c3565b63f23a6e6160e01b95945050505050565b610549610a94366004614eae565b613dc5565b610549610aa7366004614ed0565b613e3e565b610549610aba366004614e4f565b6101426020526000908152604090205481565b6000610ad882613f14565b92915050565b610137546040516378afdef960e11b8152600481018390526000916001600160a01b03169063f15fbdf29060240161016060405180830381865afa925050508015610b46575060408051601f3d908101601f19168201909252610b43918101906154bd565b60015b610bce57610b52615550565b806308c379a01415610b7b5750610b6761556c565b80610b725750610b95565b50600092915050565b634e487b711415610b9557610b8e6155f6565b90610b7257505b3d808015610bbf576040519150601f19603f3d011682016040523d82523d6000602084013e610bc4565b606091505b5060009392505050565b600081516002811115610be357610be3614efa565b148015610c055750600081604001516005811115610c0357610c03614efa565b145b9392505050565b919050565b60008080836004811115610c2757610c27614efa565b1415610c4d5767016345785d8a0000610c4462093a80600261562c565b91509150915091565b6001836004811115610c6157610c61614efa565b1415610c7c57506703782dace9d900009262278d0092509050565b6002836004811115610c9057610c90614efa565b1415610cad57670b1a2bc2ec500000610c4462278d00600361562c565b6003836004811115610cc157610cc1614efa565b1415610cde576718fae27693b40000610c4462278d00600661562c565b6004836004811115610cf257610cf2614efa565b1415610d0e5750673782dace9d900000926301e1338092509050565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206c6f636b2076616c756560701b60448201526064015b60405180910390fd5b6001600160a01b038116600090815261013d60205260409020606090610ad890613f39565b610132548015610ea657600080610dff61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb919061564b565b915091508161012f6000828254610e169190615664565b92505081905550806101306000828254610e309190615664565b90915550839050610e49670de0b6b3a76400008461562c565b610e53919061567c565b6101316000828254610e659190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000610eb0613991565b90506000805160206159b183398151915281604051610ed191815260200190565b60405180910390a1610138546001600160a01b0316610f2a5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b6520547265617375726560581b6044820152606401610d47565b60008311610f685760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610d47565b3360009081526101406020908152604080832087845290915281208054859290610f93908490615664565b9091555050336000908152610141602052604081208054859290610fb8908490615664565b909155505033600090815261014160205260409020546014101561101e5760405162461bcd60e51b815260206004820152601b60248201527f4d617820323020747265617375726573207065722077616c6c657400000000006044820152606401610d47565b61013854600090611039906001600160a01b03168686611cdd565b336000908152610142602052604081208054929350839290919061105e908490615664565b9091555061106d905033613f46565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a916110b191339130918b918b916004016156f6565b600060405180830381600087803b1580156110cb57600080fd5b505af11580156110df573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed945061113793506001600160a01b039092169189918991615730565b60405180910390a15050505050565b60008051602061597183398151915261115f813361413f565b5061013880546001600160a01b0319166001600160a01b0392909216919091179055565b610132548015611290576000806111e961012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546112009190615664565b9250508190555080610130600082825461121a9190615664565b90915550839050611233670de0b6b3a76400008461562c565b61123d919061567c565b610131600082825461124f9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b600061129a613991565b90506000805160206159b1833981519152816040516112bb91815260200190565b60405180910390a133600090815261013c60209081526040808320868452909152812061013154600282015491929161131191670de0b6b3a764000091611302919061562c565b61130c919061567c565b6141a3565b9050600061132d8360050154836113289190615756565b614211565b60058401839055600184015490915015801561134b57506002830154155b1561135a5761135a3387614263565b80156113785761012d54611378906001600160a01b031633836142c6565b604051818152869033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a36101335461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611420919061564b565b101561145d5760405162461bcd60e51b815260206004820152600c60248201526b52756e206f6e2062616e6b7360a01b6044820152606401610d47565b505050505050565b60008051602061597183398151915261147e813361413f565b61013254801561158b576000806114e461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546114fb9190615664565b925050819055508061013060008282546115159190615664565b9091555083905061152e670de0b6b3a76400008461562c565b611538919061567c565b610131600082825461154a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611595613991565b90506000805160206159b1833981519152816040516115b691815260200190565b60405180910390a161012e54600160a01b900460ff166115d75760016115da565b60005b61012e8054911515600160a01b0260ff60a01b19909216919091179055505050565b6101325480156117095760008061166261012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546116799190615664565b925050819055508061013060008282546116939190615664565b909155508390506116ac670de0b6b3a76400008461562c565b6116b6919061567c565b61013160008282546116c89190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611713613991565b90506000805160206159b18339815191528160405161173491815260200190565b60405180910390a1610138546001600160a01b031661178d5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b6520547265617375726560581b6044820152606401610d47565b600083116117cb5760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610d47565b336000908152610140602090815260408083208784529091529020548311156118365760405162461bcd60e51b815260206004820152601760248201527f576974686472617720616d6f756e7420746f6f206269670000000000000000006044820152606401610d47565b3360009081526101406020908152604080832087845290915281208054859290611861908490615795565b9091555050336000908152610141602052604081208054859290611886908490615795565b9091555050610138546000906118a6906001600160a01b03168686611cdd565b33600090815261014260205260408120805492935083929091906118cb908490615795565b909155506118da905033613f46565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a9161191e91309133918b918b916004016156f6565b600060405180830381600087803b15801561193857600080fd5b505af115801561194c573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00945061113793506001600160a01b039092169189918991615730565b6000828152606560205260409020600101546119c0813361413f565b6119ca8383614329565b505050565b6000808260048111156119e4576119e4614efa565b14156119f257506000919050565b6001826004811115611a0657611a06614efa565b1415611a16575062093a80919050565b6002826004811115611a2a57611a2a614efa565b1415611a3a575062127500919050565b6003826004811115611a4e57611a4e614efa565b1415611a5e575062278d00919050565b6004826004811115611a7257611a72614efa565b1415610c0c5750623b5380919050565b6001600160a01b0381163314611af25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d47565b611afc828261434b565b5050565b600080516020615971833981519152611b19813361413f565b610132548015611c2657600080611b7f61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254611b969190615664565b92505081905550806101306000828254611bb09190615664565b90915550839050611bc9670de0b6b3a76400008461562c565b611bd3919061567c565b6101316000828254611be59190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000611c30613991565b90506000805160206159b183398151915281604051611c5191815260200190565b60405180910390a150505061013455565b600080516020615971833981519152611c7b813361413f565b5061013980546001600160a01b0319166001600160a01b0392909216919091179055565b61013b8281548110611cb057600080fd5b906000526020600020018181548110611cc857600080fd5b90600052602060002001600091509150505481565b610138546000906001600160a01b0385811691161415611d0857611d018383611ede565b9050610c05565b610139546001600160a01b0385811691161415610bc457610137546040516378afdef960e11b8152600481018590526001600160a01b039091169063f15fbdf29060240161016060405180830381865afa925050508015611d86575060408051601f3d908101601f19168201909252611d83918101906154bd565b60015b611e1057611d92615550565b806308c379a01415611dbc5750611da761556c565b80611db25750611dd6565b6000915050610c05565b634e487b711415611dd657611dcf6155f6565b90611db257505b3d808015611e00576040519150601f19603f3d011682016040523d82523d6000602084013e611e05565b606091505b506000915050610c05565b8051611e3d906002811115611e2757611e27614efa565b82604001516005811115610a9457610a94614efa565b915050610c05565b6001600160a01b038116600090815261013d602052604081208190611e699061436d565b905060005b81811015611ec5576001600160a01b038416600090815261013d60205260408120611e999083614377565b9050611ea58582613e3e565b611eaf9085615664565b9350508080611ebd906157ac565b915050611e6e565b5050919050565b6060611ed9610135613f39565b905090565b60008260271415611ef8575067010a741a46278000612305565b82602e1415611f0f575066dc44abe8130000612305565b82602f1415611f275750670103591cfc9a8000612305565b8260301415611f3e5750661c6bf526340000612305565b8260311415611f55575066354a6ba7a18000612305565b8260331415611f6d575067010e0198eaee0000612305565b8260341415611f85575067010e0198eaee0000612305565b8260351415611f9c575066d8b72d434c8000612305565b8260361415611fb3575066fc3e1fb30d8000612305565b8260441415611fca575066c6f3b40b6c0000612305565b8260451415611fe157506678cad1e25d0000612305565b8260471415611ff85750664e28e2290f0000612305565b826048141561200f575066ce0eb154f90000612305565b82604914156120265750661c6bf526340000612305565b82604a141561203d575066dfd22a8cd98000612305565b82604b1415612054575066ca8132b0328000612305565b82604c141561206b5750662aa1efb94e0000612305565b82604d14156120825750661c6bf526340000612305565b82604f14156120995750661c6bf526340000612305565b82605214156120b0575066c6f3b40b6c0000612305565b82605b14156120c7575066ce0eb154f90000612305565b82605c14156120de5750661c6bf526340000612305565b82605d14156120f557506671afd498d00000612305565b82605e141561210c575066753d533d968000612305565b82605f1415612124575067022dc6ab0dbc8000612305565b826060141561213b5750661c6bf526340000612305565b826061141561215357506702315429b2830000612305565b826062141561216a575066ffcb9e57d40000612305565b8260631415612181575066e35fa931a00000612305565b8260641415612198575066bc4b381d188000612305565b82606714156121af5750666a94d74f430000612305565b82606814156121c6575066dc44abe8130000612305565b82606914156121dd575066ee08251ff38000612305565b82607214156121f457506638d7ea4c680000612305565b826073141561220b5750661c6bf526340000612305565b8260741415612222575066ce0eb154f90000612305565b82607514156122395750661c6bf526340000612305565b8260841415612250575066e35fa931a00000612305565b82608514156122675750661c6bf526340000612305565b82608d141561227e575066d529ae9e860000612305565b82609714156122955750661c6bf526340000612305565b82609814156122ac575066d529ae9e860000612305565b82609914156122c3575066e35fa931a00000612305565b8260a114156122db5750670103591cfc9a8000612305565b8260a214156122f2575066d19c2ff9bf8000612305565b8260a41415612305575066b5303ad38b80005b610c05828261562c565b61013254801561241c5760008061237561012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461238c9190615664565b925050819055508061013060008282546123a69190615664565b909155508390506123bf670de0b6b3a76400008461562c565b6123c9919061567c565b61013160008282546123db9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612426613991565b90506000805160206159b18339815191528160405161244791815260200190565b60405180910390a160008061245b33614383565b9150915060008061246b87610c11565b3360009081526101426020526040812054929450909250670de0b6b3a76400006124958386615664565b61249f908c61562c565b6124a9919061567c565b6124b3908b615664565b90508961013360008282546124c89190615664565b925050819055508061013260008282546124e29190615664565b9091555050898655600186018a9055600286018190556125028342615664565b6003870181905560048701556101315461252a90670de0b6b3a764000090611302908461562c565b60058701556006860180548a919060ff1916600183600481111561255057612550614efa565b021790555061012d5461256e906001600160a01b031633308d614402565b84336001600160a01b03167fa7db47d395930224de3f54139208b4a958fe3747c2ad1dee5a6624643a6def938c8c6040516125aa9291906157c7565b60405180910390a350505050505050505050565b6101325480156126cb5760008061262461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461263b9190615664565b925050819055508061013060008282546126559190615664565b9091555083905061266e670de0b6b3a76400008461562c565b612678919061567c565b610131600082825461268a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006126d5613991565b90506000805160206159b1833981519152816040516126f691815260200190565b60405180910390a1610139546001600160a01b031661274d5760405162461bcd60e51b815260206004820152601360248201527221b0b73737ba1039ba30b5b2902632b3b4b7b760691b6044820152606401610d47565b33600090815261013f60205260409020612767908461443a565b6127a85760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e481cdd185ad95960721b6044820152606401610d47565b33600090815261013f602052604090206003906127c49061436d565b11156128125760405162461bcd60e51b815260206004820152601860248201527f4d61782033206c6567696f6e73207065722077616c6c657400000000000000006044820152606401610d47565b61281b83610ade565b1561289d5733600090815261013a602052604090205460ff16156128815760405162461bcd60e51b815260206004820152601b60248201527f4d6178203120312f31206c6567696f6e207065722077616c6c657400000000006044820152606401610d47565b33600090815261013a60205260409020805460ff191660011790555b610139546000906128b9906001600160a01b0316856001611cdd565b33600090815261014260205260408120805492935083929091906128de908490615664565b909155506128ed905033613f46565b610139546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561294057600080fd5b505af1158015612954573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed94506129ad93506001600160a01b03909216918891600191615730565b60405180910390a150505050565b6001600160a01b038216600090815261013c602090815260408083208484529091528120600681015460ff16826129f1826119cf565b8360030154612a009190615664565b60038401549091504282111580612a21575061012e54600160a01b900460ff165b15612a2f5783549450612a6d565b8360040154421115612a6d57612a458183615795565b6004850154612a549042615795565b8554612a60919061562c565b612a6a919061567c565b94505b5050505092915050565b600080516020615971833981519152612a90813361413f565b81516119ca9061013b906020850190614c91565b33600090815261013d60205260408120612abd90613f39565b905060005b8151811015611afc57612af0828281518110612ae057612ae06157db565b6020026020010151600019612e61565b80612afa816157ac565b915050612ac2565b606061013b805480602002602001604051908101604052809291908181526020016000905b82821015612b9357600084815260209081902083018054604080518285028101850190915281815292830182828015612b7f57602002820191906000526020600020905b815481526020019060010190808311612b6b575b505050505081526020019060010190612b27565b50505050905090565b33600090815261013d60205260408120612bb590613f39565b905060005b8151811015611afc57612be8828281518110612bd857612bd86157db565b60200260200101516000196130d3565b5080612bf3816157ac565b915050612bba565b33600090815261013d60205260408120612c1490613f39565b905060005b8151811015611afc57612c44828281518110612c3757612c376157db565b6020026020010151611183565b80612c4e816157ac565b915050612c19565b6000828152609760205260408120610c059083614377565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b612ca762093a80600261562c565b81565b600080516020615971833981519152612cc3813361413f565b610132548015612dd057600080612d2961012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254612d409190615664565b92505081905550806101306000828254612d5a9190615664565b90915550839050612d73670de0b6b3a76400008461562c565b612d7d919061567c565b6101316000828254612d8f9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612dda613991565b90506000805160206159b183398151915281604051612dfb91815260200190565b60405180910390a1612e0f61013585614446565b612e5b5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f74206578636c756465640000000000000000006044820152606401610d47565b50505050565b612e6b82826130d3565b50611afc82611183565b600080516020615971833981519152612e8e813361413f565b610132548015612f9b57600080612ef461012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f6000828254612f0b9190615664565b92505081905550806101306000828254612f259190615664565b90915550839050612f3e670de0b6b3a76400008461562c565b612f48919061567c565b6101316000828254612f5a9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000612fa5613991565b90506000805160206159b183398151915281604051612fc691815260200190565b60405180910390a1612fda6101358561445b565b612e5b5760405162461bcd60e51b815260206004820152601860248201527f4164647265737320616c7265616479206578636c7564656400000000000000006044820152606401610d47565b60008051602061597183398151915261303f813361413f565b5061013780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815261013f60205260409020606090610ad890613f39565b612ca762278d00600661562c565b6000818152609760205260408120610ad89061436d565b6000828152606560205260409020600101546130c9813361413f565b6119ca838361434b565b6101325460009080156131e35760008061313c61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546131539190615664565b9250508190555080610130600082825461316d9190615664565b90915550839050613186670de0b6b3a76400008461562c565b613190919061567c565b61013160008282546131a29190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006131ed613991565b90506000805160206159b18339815191528160405161320e91815260200190565b60405180910390a133600090815261013c60209081526040808320888452909152902060018101548061324657600094505050613410565b80861115613252578095505b61012e54600160a01b900460ff166132d45781600301544210156132b85760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e206973207374696c6c206c6f636b656400000000000000006044820152606401610d47565b60006132c43389614470565b9050808711156132d2578096505b505b6000816132e9670de0b6b3a76400008961562c565b6132f3919061567c565b90506000670de0b6b3a7640000828560020154613310919061562c565b61331a919061567c565b905080610132600082825461332f9190615795565b925050819055508761013360008282546133499190615795565b92505081905550878460010160008282546133649190615795565b925050819055508084600201600082825461337f9190615795565b9091555050610131546133a090670de0b6b3a764000090611302908461562c565b8460050160008282546133b39190615756565b909155505061012d546133d0906001600160a01b0316338a6142c6565b604051888152899033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a360019650505050505b505092915050565b600080516020615971833981519152613431813361413f565b61013254801561353e5760008061349761012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f60008282546134ae9190615664565b925050819055508061013060008282546134c89190615664565b909155508390506134e1670de0b6b3a76400008461562c565b6134eb919061567c565b61013160008282546134fd9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b6000613548613991565b90506000805160206159b18339815191528160405161356991815260200190565b60405180910390a16101308054600090915561012d54613593906001600160a01b031686836142c6565b846001600160a01b03167f7c83d02a6ed4d6182087a0e243293e39c967dc6f12958ea7201d63214728d0f0826040516135ce91815260200190565b60405180910390a25050505050565b60008060006135ea613991565b9050670429d069189e00008110156136055760009250613671565b67058d15e17628000081101561363357600a61362285600561562c565b61362c919061567c565b9250613671565b6706f05b59d3b2000081101561365057600a61362285600661562c565b670853a0d2313c000081101561366d57600a61362285600861562c565b8392505b61367b8385615795565b915050915091565b60008051602061597183398151915261369c813361413f565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6101325480156137cd5760008061372661012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ddb573d6000803e3d6000fd5b915091508161012f600082825461373d9190615664565b925050819055508061013060008282546137579190615664565b90915550839050613770670de0b6b3a76400008461562c565b61377a919061567c565b610131600082825461378c9190615664565b90915550506101315460408051848152602081018490528082018690526060810192909252516000805160206159918339815191529181900360800190a150505b60006137d7613991565b90506000805160206159b1833981519152816040516137f891815260200190565b60405180910390a133600090815261013f6020526040902061381a90846144ae565b61385a5760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081cdd185ad959607a1b6044820152606401610d47565b61386383610ade565b156138815733600090815261013a60205260409020805460ff191690555b6101395460009061389d906001600160a01b0316856001611cdd565b33600090815261014260205260408120805492935083929091906138c2908490615795565b909155506138d1905033613f46565b610139546040516323b872dd60e01b8152306004820152336024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561392457600080fd5b505af1158015613938573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de0094506129ad93506001600160a01b03909216918891600191615730565b61013454600090156139a557506101345490565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156139f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a14919061564b565b90506000613a2361013561436d565b905060005b81811015613ad45761012d546001600160a01b03166370a08231613a4e61013584614377565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab6919061564b565b613ac09084615795565b925080613acc816157ac565b915050613a28565b506101335461012d546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b48919061564b565b613b529190615795565b9050613b5e8184615795565b92508215613b8b5782670de0b6b3a764000061013354613b7e919061562c565b613b88919061567c565b93505b50505090565b612ca762278d00600361562c565b600054610100900460ff16613bba5760005460ff1615613bbe565b303b155b613c215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d47565b600054610100900460ff16158015613c43576000805461ffff19166101011790555b61012d80546001600160a01b038086166001600160a01b03199283161790925561012e805492851692909116919091179055613c8d600080516020615971833981519152806144ba565b613ca560008051602061597183398151915233614329565b60405180606001604052806040518060c001604052806753444835ec5800008152602001671bc16d674ec800008152602001670a688906bd8b00008152602001670de0b6b3a764000081526020016706f05b59d3b200008152602001600081525081526020016040518060c00160405280600081526020016703782dace9d9000081526020016000815260200167016345785d8a0000815260200166b1a2bc2ec500008152602001600081525081526020016040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525081525061013b906003613d9e929190614cea565b50613da7614505565b613daf61454e565b80156119ca576000805461ff0019169055505050565b61013b5460009083108015613df8575061013b8381548110613de957613de96157db565b60009182526020909120015482105b15610b725761013b8381548110613e1157613e116157db565b906000526020600020018281548110613e2c57613e2c6157db565b90600052602060002001549050610ad8565b6001600160a01b03828116600090815261013c60209081526040808320858452909152808220610131546101325461012e54935163f6ed201760e01b815230600482015294959294919390928692613eba929091169063f6ed201790602401602060405180830381865afa158015610ddb573d6000803e3d6000fd5b50905081613ed0670de0b6b3a76400008361562c565b613eda919061567c565b613ee49084615664565b9250612a6a8460050154613f0a670de0b6b3a7640000868860020154611302919061562c565b6113289190615756565b60006001600160e01b03198216630271189760e51b1480610ad85750610ad882614575565b60606000610c058361459a565b6001600160a01b0381166000908152610142602090815260408083205461013d9092528220909190613f7790613f39565b905060005b8151811015612e5b576000828281518110613f9957613f996157db565b6020908102919091018101516001600160a01b038716600090815261013c8352604080822083835290935291822060068101549193509190613fdd9060ff16610c11565b5060018301549091506000670de0b6b3a7640000613ffb8985615664565b614005908461562c565b61400f919061567c565b6140199083615664565b6002850154909150808211156140a65760006140358284615795565b9050614052670de0b6b3a76400006101315483611302919061562c565b86600501600082825461406591906157f1565b9250508190555080610132600082825461407f9190615664565b925050819055508086600201600082825461409a9190615664565b90915550614126915050565b808210156141265760006140ba8383615795565b90506140d7670de0b6b3a76400006101315483611302919061562c565b8660050160008282546140ea9190615756565b925050819055508061013260008282546141049190615795565b925050819055508086600201600082825461411f9190615795565b9091555050505b5050505050508080614137906157ac565b915050613f7c565b6141498282612c6e565b611afc57614161816001600160a01b031660146145f6565b61416c8360206145f6565b60405160200161417d929190615832565b60408051601f198184030181529082905262461bcd60e51b8252610d47916004016158a7565b60006001600160ff1b0382111561420d5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610d47565b5090565b60008082121561420d5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610d47565b6001600160a01b038216600090815261013d6020526040902061428690826144ae565b611afc5760405162461bcd60e51b81526020600482015260116024820152706465706f7369744964202165786973747360781b6044820152606401610d47565b6040516001600160a01b0383166024820152604481018290526119ca90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614792565b6143338282614864565b60008281526097602052604090206119ca908261445b565b61435582826148ea565b60008281526097602052604090206119ca9082614446565b6000610ad8825490565b6000610c058383614951565b6001600160a01b038116600090815261013e60205260408120805482919082906143ac906157ac565b91829055506001600160a01b038416600090815261013d602052604090209091506143d7908261443a565b506001600160a01b03909216600090815261013c602090815260408083208584529091529020929050565b6040516001600160a01b0380851660248301528316604482015260648101829052612e5b9085906323b872dd60e01b906084016142f2565b6000610c05838361497b565b6000610c05836001600160a01b0384166149ca565b6000610c05836001600160a01b03841661497b565b600061447c83836129bb565b6001600160a01b03909316600090815261013c6020908152604080832094835293905291909120426004909101555090565b6000610c0583836149ca565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600054610100900460ff1661452c5760405162461bcd60e51b8152600401610d47906158ba565b614534614abd565b61453c614abd565b614544614abd565b61454c614abd565b565b600054610100900460ff166145345760405162461bcd60e51b8152600401610d47906158ba565b60006001600160e01b03198216635a05180f60e01b1480610ad85750610ad882614ae4565b6060816000018054806020026020016040519081016040528092919081815260200182805480156145ea57602002820191906000526020600020905b8154815260200190600101908083116145d6575b50505050509050919050565b6060600061460583600261562c565b614610906002615664565b67ffffffffffffffff81111561462857614628615037565b6040519080825280601f01601f191660200182016040528015614652576020820181803683370190505b509050600360fc1b8160008151811061466d5761466d6157db565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061469c5761469c6157db565b60200101906001600160f81b031916908160001a90535060006146c084600261562c565b6146cb906001615664565b90505b6001811115614743576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146ff576146ff6157db565b1a60f81b828281518110614715576147156157db565b60200101906001600160f81b031916908160001a90535060049490941c9361473c81615905565b90506146ce565b508315610c055760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d47565b60006147e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b199092919063ffffffff16565b8051909150156119ca5780806020019051810190614805919061591c565b6119ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d47565b61486e8282612c6e565b611afc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556148a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6148f48282612c6e565b15611afc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000826000018281548110614968576149686157db565b9060005260206000200154905092915050565b60008181526001830160205260408120546149c257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ad8565b506000610ad8565b60008181526001830160205260408120548015614ab35760006149ee600183615795565b8554909150600090614a0290600190615795565b9050818114614a67576000866000018281548110614a2257614a226157db565b9060005260206000200154905080876000018481548110614a4557614a456157db565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a7857614a7861593e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ad8565b6000915050610ad8565b600054610100900460ff1661454c5760405162461bcd60e51b8152600401610d47906158ba565b60006001600160e01b03198216637965db0b60e01b1480610ad857506301ffc9a760e01b6001600160e01b0319831614610ad8565b6060614b288484600085614b30565b949350505050565b606082471015614b915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d47565b843b614bdf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d47565b600080866001600160a01b03168587604051614bfb9190615954565b60006040518083038185875af1925050503d8060008114614c38576040519150601f19603f3d011682016040523d82523d6000602084013e614c3d565b606091505b5091509150614c4d828286614c58565b979650505050505050565b60608315614c67575081610c05565b825115614c775782518084602001fd5b8160405162461bcd60e51b8152600401610d4791906158a7565b828054828255906000526020600020908101928215614cde579160200282015b82811115614cde5782518051614cce918491602090910190614d31565b5091602001919060010190614cb1565b5061420d929150614d78565b828054828255906000526020600020908101928215614cde579160200282015b82811115614cde578251614d219083906006614d31565b5091602001919060010190614d0a565b828054828255906000526020600020908101928215614d6c579160200282015b82811115614d6c578251825591602001919060010190614d51565b5061420d929150614d95565b8082111561420d576000614d8c8282614daa565b50600101614d78565b5b8082111561420d5760008155600101614d96565b5080546000825590600052602060002090810190614dc89190614d95565b50565b600060208284031215614ddd57600080fd5b81356001600160e01b031981168114610c0557600080fd5b600060208284031215614e0757600080fd5b5035919050565b803560058110610c0c57600080fd5b600060208284031215614e2f57600080fd5b610c0582614e0e565b80356001600160a01b0381168114610c0c57600080fd5b600060208284031215614e6157600080fd5b610c0582614e38565b6020808252825182820181905260009190848201906040850190845b81811015614ea257835183529284019291840191600101614e86565b50909695505050505050565b60008060408385031215614ec157600080fd5b50508035926020909101359150565b60008060408385031215614ee357600080fd5b614eec83614e38565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60058110614f2e57634e487b7160e01b600052602160045260246000fd5b9052565b600060e0820190508882528760208301528660408301528560608301528460808301528360a0830152614f6860c0830184614f10565b98975050505050505050565b60008060408385031215614f8757600080fd5b82359150614f9760208401614e38565b90509250929050565b600080600060608486031215614fb557600080fd5b614fbe84614e38565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015614ea25783516001600160a01b031683529284019291840191600101614fef565b6000806040838503121561502757600080fd5b82359150614f9760208401614e0e565b634e487b7160e01b600052604160045260246000fd5b60c0810181811067ffffffffffffffff8211171561506d5761506d615037565b60405250565b601f8201601f1916810167ffffffffffffffff8111828210171561509957615099615037565b6040525050565b600067ffffffffffffffff8211156150ba576150ba615037565b5060051b60200190565b600082601f8301126150d557600080fd5b813560206150e2826150a0565b6040516150ef8282615073565b83815260059390931b850182019282810191508684111561510f57600080fd5b8286015b8481101561512a5780358352918301918301615113565b509695505050505050565b6000602080838503121561514857600080fd5b823567ffffffffffffffff8082111561516057600080fd5b818501915085601f83011261517457600080fd5b813561517f816150a0565b60405161518c8282615073565b82815260059290921b84018501918581019150888311156151ac57600080fd5b8585015b838110156151e4578035858111156151c85760008081fd5b6151d68b89838a01016150c4565b8452509186019186016151b0565b5098975050505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561526d57888603603f19018552825180518088529088019088880190845b818110156152575783518352928a0192918a019160010161523b565b5090975050509386019391860191600101615219565b509398975050505050505050565b600082601f83011261528c57600080fd5b813567ffffffffffffffff8111156152a6576152a6615037565b6040516152bd601f8301601f191660200182615073565b8181528460208386010111156152d257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561530757600080fd5b61531086614e38565b945061531e60208701614e38565b9350604086013567ffffffffffffffff8082111561533b57600080fd5b61534789838a016150c4565b9450606088013591508082111561535d57600080fd5b61536989838a016150c4565b9350608088013591508082111561537f57600080fd5b5061538c8882890161527b565b9150509295509295909350565b600080604083850312156153ac57600080fd5b6153b583614e38565b9150614f9760208401614e38565b600080600080600060a086880312156153db57600080fd5b6153e486614e38565b94506153f260208701614e38565b93506040860135925060608601359150608086013567ffffffffffffffff81111561541c57600080fd5b61538c8882890161527b565b805160068110610c0c57600080fd5b805160ff81168114610c0c57600080fd5b600082601f83011261545957600080fd5b60405160c0810181811067ffffffffffffffff8211171561547c5761547c615037565b6040528060c084018581111561549157600080fd5b845b818110156154b2576154a481615437565b835260209283019201615493565b509195945050505050565b600061016082840312156154d057600080fd5b6040516154dc8161504d565b8251600381106154eb57600080fd5b81526020830151600a81106154ff57600080fd5b602082015261551060408401615428565b604082015261552160608401615437565b606082015261553260808401615437565b60808201526155448460a08501615448565b60a08201529392505050565b600060033d11156155695760046000803e5060005160e01c5b90565b600060443d101561557a5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156155aa57505050505090565b82850191508151818111156155c25750505050505090565b843d87010160208285010111156155dc5750505050505090565b6155eb60208286010187615073565b509095945050505050565b60008060233d1115615612576020600460003e50506000516001905b9091565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561564657615646615616565b500290565b60006020828403121561565d57600080fd5b5051919050565b6000821982111561567757615677615616565b500190565b60008261569957634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156156b95781810151838201526020016156a1565b83811115612e5b5750506000910152565b600081518084526156e281602086016020860161569e565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614c4d908301846156ca565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008083128015600160ff1b85018412161561577457615774615616565b6001600160ff1b038401831381161561578f5761578f615616565b50500390565b6000828210156157a7576157a7615616565b500390565b60006000198214156157c0576157c0615616565b5060010190565b82815260408101610c056020830184614f10565b634e487b7160e01b600052603260045260246000fd5b600080821280156001600160ff1b038490038513161561581357615813615616565b600160ff1b839003841281161561582c5761582c615616565b50500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161586a81601785016020880161569e565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161589b81602884016020880161569e565b01602801949350505050565b602081526000610c0560208301846156ca565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008161591457615914615616565b506000190190565b60006020828403121561592e57600080fd5b81518015158114610c0557600080fd5b634e487b7160e01b600052603160045260246000fd5b6000825161596681846020870161569e565b919091019291505056fe8854ad49c2333a9aa4c7e03244162b637ec22a8951292f983b3d3f845725ff7c51ba001b2556bfc97b1ed73ece5dee29b5c284d8435120c957515cf11017f000163eacd81cbfca2d1ec176759e7107e34229c5cbc5ec0b3fde68ffdef1157e02a264697066735822122087521846592f50339d643627a17ad16463787e07791e77d8460a49c4bece917064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentId(address)": {
        "notice": "user => deposit index"
      },
      "toggleUnlockAll()": {
        "notice": "EMERGENCY ONLY"
      },
      "userInfo(address,uint256)": {
        "notice": "user => depositId => UserInfo"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 597,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 600,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1671,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1920,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 204,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)199_storage)"
      },
      {
        "astId": 491,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 45,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2638_storage)"
      },
      {
        "astId": 154,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 964,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 905,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3022,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "magic",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20Upgradeable)1043"
      },
      {
        "astId": 3025,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "masterOfCoin",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IMasterOfCoin)6793"
      },
      {
        "astId": 3027,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "unlockAll",
        "offset": 20,
        "slot": "302",
        "type": "t_bool"
      },
      {
        "astId": 3029,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "totalRewardsEarned",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 3031,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "totalUndistributedRewards",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 3033,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "accMagicPerShare",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 3035,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "totalLpToken",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 3037,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "magicTotalDeposits",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "utilizationOverride",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 3042,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "excludedAddresses",
        "offset": 0,
        "slot": "309",
        "type": "t_struct(AddressSet)2638_storage"
      },
      {
        "astId": 3044,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "legionMetadataStore",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 3046,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "treasure",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 3048,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "legion",
        "offset": 0,
        "slot": "313",
        "type": "t_address"
      },
      {
        "astId": 3052,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "isLegion1_1Staked",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3056,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "legionBoostMatrix",
        "offset": 0,
        "slot": "315",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 3064,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "userInfo",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)2984_storage))"
      },
      {
        "astId": 3070,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "allUserDepositIds",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_address,t_struct(UintSet)2795_storage)"
      },
      {
        "astId": 3075,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "currentId",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3080,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "legionStaked",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_address,t_struct(UintSet)2795_storage)"
      },
      {
        "astId": 3086,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "treasureStaked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3090,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "treasureStakedAmount",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3094,
        "contract": "contracts/AtlasMine.sol:AtlasMine",
        "label": "boosts",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1043": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterOfCoin)6793": {
        "encoding": "inplace",
        "label": "contract IMasterOfCoin",
        "numberOfBytes": "20"
      },
      "t_enum(Lock)2968": {
        "encoding": "inplace",
        "label": "enum AtlasMine.Lock",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)2984_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct AtlasMine.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)2984_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)2795_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2795_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2638_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2638_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)199_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)199_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)2984_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlasMine.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2984_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2638_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2637,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2337_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)199_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 196,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 198,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2337_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2332,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2336,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2795_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 2794,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2337_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)2984_storage": {
        "encoding": "inplace",
        "label": "struct AtlasMine.UserInfo",
        "members": [
          {
            "astId": 2970,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "originalDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2972,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2974,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "lpAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2976,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2978,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "vestingLastUpdate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2980,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 2983,
            "contract": "contracts/AtlasMine.sol:AtlasMine",
            "label": "lock",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Lock)2968"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}