{
  "address": "0x51Fc5F5319E96157B32b15a12B408d4798f8BF16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryMine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiLP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpRewards",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getMineBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userMineBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpRewards",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiLP",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryMine",
      "outputs": [
        {
          "internalType": "contract TreasuryMine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd03a8b0da8b317125f2ace4bc830762688d488b67bc8327edcf330dce6d2294",
  "receipt": {
    "to": null,
    "from": "0x393248aE29A7C2128E8E27d23330b1F87E0600fc",
    "contractAddress": "0x51Fc5F5319E96157B32b15a12B408d4798f8BF16",
    "transactionIndex": 0,
    "gasUsed": "40276233",
    "logsBloom": "0x
    "blockHash": "0x9831c7d5c6f46e774e60d2286f6e61cbbf7a1da7c3a5a5c4f1483240168c16ba",
    "transactionHash": "0xcd03a8b0da8b317125f2ace4bc830762688d488b67bc8327edcf330dce6d2294",
    "logs": [],
    "blockNumber": 2837970,
    "cumulativeGasUsed": "30196253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDf19f1216aA406DF8bC585246bee7D96933f285F",
    "0xB7E50106A5bd3Cf21AF210A755F9C8740890A8c9",
    "0x73EB8b2b235F7957f830ea66ABE433D9EED9f0E3"
  ],
  "solcInputHash": "840ade874a1471b0c00a4e030de8320f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryMine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpRewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMineBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userMineBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewards\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiLP\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMine\",\"outputs\":[{\"internalType\":\"contract TreasuryMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MagicGov.sol\":\"TreasureDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/MagicGov.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './TreasuryMine.sol';\\n\\ncontract TreasureDAO is ERC20 {\\n    TreasuryMine public treasuryMine;\\n    IUniswapV2Pair public sushiLP;\\n    ERC20 public lpRewards;\\n\\n    constructor(address _treasuryMine, address _sushiLP, address _lpRewards) ERC20(\\\"Treasure DAO Governance\\\", \\\"gMAGIC\\\") {\\n        treasuryMine = TreasuryMine(_treasuryMine);\\n        sushiLP = IUniswapV2Pair(_sushiLP);\\n        lpRewards = ERC20(_lpRewards);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return treasuryMine.magic().totalSupply();\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return getMineBalance(_account) + getLPBalance(_account);\\n    }\\n\\n    function getMineBalance(address _account) public view returns (uint256 userMineBalance) {\\n        uint256[] memory allUserDepositIds = treasuryMine.getAllUserDepositIds(_account);\\n        uint256 len = allUserDepositIds.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 depositId = allUserDepositIds[i];\\n            (, uint256 lpAmount,,,) = treasuryMine.userInfo(_account, depositId);\\n            userMineBalance += lpAmount;\\n        }\\n    }\\n\\n    function getLPBalance(address _account) public view returns (uint256) {\\n        uint256 liquidity = lpRewards.balanceOf(_account);\\n        (uint112 _reserve0, uint112 _reserve1,) = sushiLP.getReserves();\\n\\n        if (address(treasuryMine.magic()) == sushiLP.token0()) {\\n            return _reserve0 * liquidity / sushiLP.totalSupply();\\n        } else {\\n            return _reserve1 * liquidity / sushiLP.totalSupply();\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        revert(\\\"Non-transferable\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbb9f8a6e8467c76afdf9a0a02f2619b87650b1eba2f330be6a19f7a986a3fe7f\",\"license\":\"MIT\"},\"contracts/TreasuryMine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\nimport './TreasuryStake.sol';\\n\\ncontract TreasuryMine is Ownable {\\n    using SafeERC20 for ERC20;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    enum Lock { twoWeeks, oneMonth, threeMonths }\\n\\n    uint256 public constant DAY = 60 * 60 * 24;\\n    uint256 public constant ONE_WEEK = DAY * 7;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = DAY * 30;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant LIFECYCLE = THREE_MONTHS;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Magic token addr\\n    ERC20 public immutable magic;\\n    address public immutable treasuryStake;\\n\\n    bool public unlockAll;\\n    uint256 public endTimestamp;\\n\\n    uint256 public maxMagicPerSecond;\\n    uint256 public magicPerSecond;\\n    uint256 public totalRewardsEarned;\\n    uint256 public accMagicPerShare;\\n    uint256 public totalLpToken;\\n    uint256 public magicTotalDeposits;\\n    uint256 public lastRewardTimestamp;\\n\\n    address[] public excludedAddresses;\\n\\n    struct UserInfo {\\n        uint256 depositAmount;\\n        uint256 lpAmount;\\n        uint256 lockedUntil;\\n        int256 rewardDebt;\\n        Lock lock;\\n    }\\n\\n    /// @notice user => depositId => UserInfo\\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\\n    /// @notice user => depositId[]\\n    mapping (address => uint256[]) public allUserDepositIds;\\n    /// @notice user => depositId => index in allUserDepositIds\\n    mapping (address => mapping(uint256 => uint256)) public depositIdIndex;\\n    /// @notice user => deposit index array\\n    mapping (address => uint256) public currentId;\\n\\n    event Deposit(address indexed user, uint256 indexed index, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed index, uint256 amount);\\n    event EmergencyWithdraw(address indexed to, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(uint256 indexed lastRewardTimestamp, uint256 lpSupply, uint256 accMagicPerShare);\\n\\n    modifier refreshMagicRate() {\\n        _;\\n        uint256 util = utilization();\\n        if (util < 2e17) {\\n            magicPerSecond = 0;\\n        } else if (util < 3e17) { // >20%\\n            // 50%\\n            magicPerSecond = maxMagicPerSecond * 5 / 10;\\n        } else if (util < 4e17) { // >30%\\n            // 60%\\n            magicPerSecond = maxMagicPerSecond * 6 / 10;\\n        } else if (util < 5e17) { // >40%\\n            // 80%\\n            magicPerSecond = maxMagicPerSecond * 8 / 10;\\n        } else if (util < 6e17) { // >50%\\n            // 90%\\n            magicPerSecond = maxMagicPerSecond * 9 / 10;\\n        } else { // >60%\\n            // 100%\\n            magicPerSecond = maxMagicPerSecond;\\n        }\\n    }\\n\\n    modifier updateRewards() {\\n        if (block.timestamp > lastRewardTimestamp && lastRewardTimestamp < endTimestamp && endTimestamp != 0) {\\n            uint256 lpSupply = totalLpToken;\\n            if (lpSupply > 0) {\\n                uint256 timeDelta;\\n                if (block.timestamp > endTimestamp) {\\n                    timeDelta = endTimestamp - lastRewardTimestamp;\\n                    lastRewardTimestamp = endTimestamp;\\n                } else {\\n                    timeDelta = block.timestamp - lastRewardTimestamp;\\n                    lastRewardTimestamp = block.timestamp;\\n                }\\n                uint256 magicReward = timeDelta * magicPerSecond;\\n                // send 10% to treasury\\n                uint256 treasuryReward = magicReward / 10;\\n                _fundTreasury(treasuryReward);\\n                magicReward -= treasuryReward;\\n                totalRewardsEarned += magicReward;\\n                accMagicPerShare += magicReward * ONE / lpSupply;\\n            }\\n            emit LogUpdateRewards(lastRewardTimestamp, lpSupply, accMagicPerShare);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _magic, address _treasuryStake, address _owner) {\\n        magic = ERC20(_magic);\\n        treasuryStake = _treasuryStake;\\n        transferOwnership(_owner);\\n    }\\n\\n    function init() external onlyOwner refreshMagicRate {\\n        require(endTimestamp == 0, \\\"Cannot init again\\\");\\n\\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\\n        require(rewardsAmount > 0, \\\"No rewards sent\\\");\\n\\n        maxMagicPerSecond = rewardsAmount / LIFECYCLE;\\n        endTimestamp = block.timestamp + LIFECYCLE;\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    function isInitialized() public view returns (bool) {\\n        return endTimestamp != 0;\\n    }\\n\\n    function utilization() public view returns (uint256 util) {\\n        uint256 circulatingSupply = magic.totalSupply();\\n        uint256 len = excludedAddresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            circulatingSupply -= magic.balanceOf(excludedAddresses[i]);\\n        }\\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\\n        circulatingSupply -= rewardsAmount;\\n        if (circulatingSupply != 0) {\\n            util = magicTotalDeposits * ONE / circulatingSupply;\\n        }\\n    }\\n\\n    function getAllUserDepositIds(address _user) public view returns (uint256[] memory) {\\n        return allUserDepositIds[_user];\\n    }\\n\\n    function getExcludedAddresses() public view returns (address[] memory) {\\n        return excludedAddresses;\\n    }\\n\\n    function getBoost(Lock _lock) public pure returns (uint256 boost, uint256 timelock) {\\n        if (_lock == Lock.twoWeeks) {\\n            // 20%\\n            return (2e17, TWO_WEEKS);\\n        } else if (_lock == Lock.oneMonth) {\\n            // 50%\\n            return (5e17, ONE_MONTH);\\n        } else if (_lock == Lock.threeMonths) {\\n            // 200%\\n            return (2e18, THREE_MONTHS);\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n    }\\n\\n    function pendingRewardsPosition(address _user, uint256 _depositId) public view returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        uint256 _accMagicPerShare = accMagicPerShare;\\n        uint256 lpSupply = totalLpToken;\\n        if (block.timestamp > lastRewardTimestamp && magicPerSecond != 0) {\\n            uint256 timeDelta;\\n            if (block.timestamp > endTimestamp) {\\n                timeDelta = endTimestamp - lastRewardTimestamp;\\n            } else {\\n                timeDelta = block.timestamp - lastRewardTimestamp;\\n            }\\n            uint256 magicReward = timeDelta * magicPerSecond;\\n            // send 10% to treasury\\n            uint256 treasuryReward = magicReward / 10;\\n            magicReward -= treasuryReward;\\n\\n            _accMagicPerShare += magicReward * ONE / lpSupply;\\n        }\\n\\n        pending = ((user.lpAmount * _accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function pendingRewardsAll(address _user) external view returns (uint256 pending) {\\n        uint256 len = allUserDepositIds[_user].length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = allUserDepositIds[_user][i];\\n            pending += pendingRewardsPosition(_user, depositId);\\n        }\\n    }\\n\\n    function deposit(uint256 _amount, Lock _lock) public refreshMagicRate updateRewards {\\n        require(isInitialized(), \\\"Not initialized\\\");\\n\\n        if (_lock == Lock.twoWeeks) {\\n            // give 1 DAY of grace period\\n            require(block.timestamp + TWO_WEEKS - DAY <= endTimestamp, \\\"Less than 2 weeks left\\\");\\n        } else if (_lock == Lock.oneMonth) {\\n            // give 3 DAY of grace period\\n            require(block.timestamp + ONE_MONTH - 3 * DAY<= endTimestamp, \\\"Less than 1 month left\\\");\\n        } else if (_lock == Lock.threeMonths) {\\n            // give ONE_WEEK of grace period\\n            require(block.timestamp + THREE_MONTHS - ONE_WEEK <= endTimestamp, \\\"Less than 3 months left\\\");\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n\\n        (UserInfo storage user, uint256 depositId) = _addDeposit(msg.sender);\\n        (uint256 boost, uint256 timelock) = getBoost(_lock);\\n        uint256 lpAmount = _amount + _amount * boost / ONE;\\n        magicTotalDeposits += _amount;\\n        totalLpToken += lpAmount;\\n\\n        user.depositAmount = _amount;\\n        user.lpAmount = lpAmount;\\n        user.lockedUntil = block.timestamp + timelock;\\n        user.rewardDebt = (lpAmount * accMagicPerShare / ONE).toInt256();\\n        user.lock = _lock;\\n\\n        magic.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, depositId, _amount);\\n    }\\n\\n    function withdrawPosition(uint256 _depositId, uint256 _amount) public refreshMagicRate updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n        uint256 depositAmount = user.depositAmount;\\n        require(depositAmount > 0, \\\"Position does not exists\\\");\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n        // anyone can withdraw when mine ends or kill swith was used\\n        if (block.timestamp < endTimestamp && !unlockAll) {\\n            require(block.timestamp >= user.lockedUntil, \\\"Position is still locked\\\");\\n        }\\n\\n        // Effects\\n        uint256 ratio = _amount * ONE / depositAmount;\\n        uint256 lpAmount = user.lpAmount * ratio / ONE;\\n\\n        totalLpToken -= lpAmount;\\n        magicTotalDeposits -= _amount;\\n\\n        user.depositAmount -= _amount;\\n        user.lpAmount -= lpAmount;\\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        // Interactions\\n        magic.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _depositId, _amount);\\n    }\\n\\n    function withdrawAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            withdrawPosition(depositId, type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _depositId) public refreshMagicRate updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n\\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedMagic;\\n\\n        if (user.depositAmount == 0 && user.lpAmount == 0) {\\n            _removeDeposit(msg.sender, _depositId);\\n        }\\n\\n        // Interactions\\n        if (_pendingMagic != 0) {\\n            magic.safeTransfer(msg.sender, _pendingMagic);\\n        }\\n\\n        emit Harvest(msg.sender, _depositId, _pendingMagic);\\n    }\\n\\n    function harvestAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            harvestPosition(depositId);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _depositId, uint256 _amount) public {\\n        withdrawPosition(_depositId, _amount);\\n        harvestPosition(_depositId);\\n    }\\n\\n    function withdrawAndHarvestAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            withdrawAndHarvestPosition(depositId, type(uint256).max);\\n        }\\n    }\\n\\n    function burnLeftovers() public refreshMagicRate updateRewards {\\n        require(block.timestamp > endTimestamp, \\\"Will not burn before end\\\");\\n        address blackhole = 0x000000000000000000000000000000000000dEaD;\\n        int256 burnAmount =\\n            (LIFECYCLE * maxMagicPerSecond).toInt256() // rewards originally sent\\n            - (totalRewardsEarned).toInt256() // rewards distributed to users\\n            - (totalRewardsEarned / 9).toInt256(); // rewards distributed to treasury\\n        if (burnAmount > 0) magic.safeTransfer(blackhole, uint256(burnAmount));\\n    }\\n\\n    function addExcludedAddress(address exclude) external onlyOwner refreshMagicRate updateRewards {\\n        uint256 len = excludedAddresses.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            require(excludedAddresses[i] != exclude, \\\"Already excluded\\\");\\n        }\\n        excludedAddresses.push(exclude);\\n    }\\n\\n    function removeExcludedAddress(address include) external onlyOwner refreshMagicRate updateRewards {\\n        uint256 index;\\n        uint256 len = excludedAddresses.length;\\n        require(len > 0, \\\"no excluded addresses\\\");\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (excludedAddresses[i] == include) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        require(excludedAddresses[index] == include, \\\"address not excluded\\\");\\n\\n        uint256 lastIndex = len - 1;\\n        if (index != lastIndex) {\\n            excludedAddresses[index] = excludedAddresses[lastIndex];\\n        }\\n        excludedAddresses.pop();\\n    }\\n\\n    /// @notice EMERGENCY ONLY\\n    function kill() external onlyOwner refreshMagicRate updateRewards {\\n        require(block.timestamp <= endTimestamp, \\\"Will not kill after end\\\");\\n        require(!unlockAll, \\\"Already dead\\\");\\n\\n        int256 withdrawAmount =\\n            (LIFECYCLE * maxMagicPerSecond).toInt256() // rewards originally sent\\n            - (totalRewardsEarned).toInt256() // rewards distributed to users\\n            - (totalRewardsEarned / 9).toInt256(); // rewards distributed to treasury\\n        if (withdrawAmount > 0) {\\n            magic.safeTransfer(owner(), uint256(withdrawAmount));\\n            emit EmergencyWithdraw(owner(), uint256(withdrawAmount));\\n        }\\n        maxMagicPerSecond = 0;\\n        magicPerSecond = 0;\\n        unlockAll = true;\\n    }\\n\\n    function _addDeposit(address _user) internal returns (UserInfo storage user, uint256 newDepositId) {\\n        // start depositId from 1\\n        newDepositId = ++currentId[_user];\\n        depositIdIndex[_user][newDepositId] = allUserDepositIds[_user].length;\\n        allUserDepositIds[_user].push(newDepositId);\\n        user = userInfo[_user][newDepositId];\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _depositId) internal {\\n        uint256 depositIndex = depositIdIndex[_user][_depositId];\\n\\n        require(allUserDepositIds[_user][depositIndex] == _depositId, 'depositId !exists');\\n\\n        uint256 lastDepositIndex = allUserDepositIds[_user].length - 1;\\n        if (depositIndex != lastDepositIndex) {\\n            uint256 lastDepositId = allUserDepositIds[_user][lastDepositIndex];\\n            allUserDepositIds[_user][depositIndex] = lastDepositId;\\n            depositIdIndex[_user][lastDepositId] = depositIndex;\\n        }\\n        allUserDepositIds[_user].pop();\\n        delete depositIdIndex[_user][_depositId];\\n    }\\n\\n    function _fundTreasury(uint256 _amount) internal {\\n        magic.approve(treasuryStake, _amount);\\n        TreasuryStake(treasuryStake).notifyRewards(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd83267454cdbef78861637782d1382855162daa175a1416fcf5c7fd39a6238d5\",\"license\":\"MIT\"},\"contracts/TreasuryStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\ncontract TreasuryStake is ERC1155Holder {\\n    using SafeERC20 for ERC20;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    uint256 public constant DAY = 60 * 60 * 24;\\n    uint256 public constant ONE_WEEK = DAY * 7;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = DAY * 30;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant LIFECYCLE = THREE_MONTHS;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Magic token addr\\n    ERC20 public immutable magic;\\n    IERC1155 public immutable lpToken;\\n\\n    uint256 public totalRewardsEarned;\\n    uint256 public accMagicPerShare;\\n    uint256 public totalLpToken;\\n    uint256 public undistributedRewards;\\n\\n    struct UserInfo {\\n        uint256 depositAmount;\\n        uint256 tokenId;\\n        uint256 lpAmount;\\n        int256 rewardDebt;\\n    }\\n\\n    /// @notice user => tokenId => UserInfo\\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\\n    /// @notice user => tokenId[]\\n    mapping (address => uint256[]) public allUserTokenIds;\\n    // @notice user => tokenId => index in allUserIndex\\n    mapping (address => mapping(uint256 => uint256)) public tokenIdIndex;\\n\\n    event Deposit(address indexed user, uint256 lpAmount, uint256 tokenId, uint256 depositAmount);\\n    event Withdraw(address indexed user, uint256 tokenId, uint256 withdrawAmount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(uint256 lpSupply, uint256 accMagicPerShare);\\n\\n    constructor(address _magic, address _lpToken) {\\n        magic = ERC20(_magic);\\n        lpToken = IERC1155(_lpToken);\\n    }\\n\\n    function getLpAmount(uint256 _tokenId, uint256 _amount) public pure returns (uint256) {\\n        uint256 boost;\\n        uint256 boostDecimal = 100;\\n\\n        if (_tokenId == 39) { // Ancient Relic 10.03\\n            boost = 1003;\\n        } else if (_tokenId == 46) { // Bag of Rare Mushrooms 8.21\\n            boost = 821;\\n        } else if (_tokenId == 47) { // Bait for Monsters 9.73\\n            boost = 973;\\n        } else if (_tokenId == 48) { // Beetle-wing 1.00\\n            boost = 100;\\n        } else if (_tokenId == 49) { // Blue Rupee 2.04\\n            boost = 204;\\n        } else if (_tokenId == 51) { // Bottomless Elixir 10.15\\n            boost = 1015;\\n        } else if (_tokenId == 52) { // Cap of Invisibility 10.15\\n            boost = 1015;\\n        } else if (_tokenId == 53) { // Carriage 8.09\\n            boost = 809;\\n        } else if (_tokenId == 54) { // Castle 9.77\\n            boost = 977;\\n        } else if (_tokenId == 68) { // Common Bead 7.52\\n            boost = 752;\\n        } else if (_tokenId == 69) { // Common Feather 4.50\\n            boost = 450;\\n        } else if (_tokenId == 71) { // Common Relic 2.87\\n            boost = 287;\\n        } else if (_tokenId == 72) { // Cow 7.74\\n            boost = 774;\\n        } else if (_tokenId == 73) { // Diamond 1.04\\n            boost = 104;\\n        } else if (_tokenId == 74) { // Divine Hourglass 8.46\\n            boost = 846;\\n        } else if (_tokenId == 75) { // Divine Mask 7.62\\n            boost = 762;\\n        } else if (_tokenId == 76) { // Donkey 1.62\\n            boost = 162;\\n        } else if (_tokenId == 77) { // Dragon Tail 1.03\\n            boost = 103;\\n        } else if (_tokenId == 79) { // Emerald 1.01\\n            boost = 101;\\n        } else if (_tokenId == 82) { // Favor from the Gods 7.39\\n            boost = 739;\\n        } else if (_tokenId == 91) { // Framed Butterfly 7.79\\n            boost = 779;\\n        } else if (_tokenId == 92) { // Gold Coin 1.03\\n            boost = 103;\\n        } else if (_tokenId == 93) { // Grain 4.29\\n            boost = 429;\\n        } else if (_tokenId == 94) { // Green Rupee 4.36\\n            boost = 436;\\n        } else if (_tokenId == 95) { // Grin 10.47\\n            boost = 1047;\\n        } else if (_tokenId == 96) { // Half-Penny 1.05\\n            boost = 105;\\n        } else if (_tokenId == 97) { // Honeycomb 10.52\\n            boost = 1052;\\n        } else if (_tokenId == 98) { // Immovable Stone 9.65\\n            boost = 965;\\n        } else if (_tokenId == 99) { // Ivory Breastpin 8.49\\n            boost = 849;\\n        } else if (_tokenId == 100) { // Jar of Fairies 7.10\\n            boost = 710;\\n        } else if (_tokenId == 103) { // Lumber 4.02\\n            boost = 402;\\n        } else if (_tokenId == 104) { // Military Stipend 8.30\\n            boost = 830;\\n        } else if (_tokenId == 105) { // Mollusk Shell 8.96\\n            boost = 896;\\n        } else if (_tokenId == 114) { // Ox 2.12\\n            boost = 212;\\n        } else if (_tokenId == 115) { // Pearl 1.03\\n            boost = 103;\\n        } else if (_tokenId == 116) { // Pot of Gold 7.72\\n            boost = 772;\\n        } else if (_tokenId == 117) { // Quarter-Penny 1.00\\n            boost = 100;\\n        } else if (_tokenId == 132) { // Red Feather 8.51\\n            boost = 851;\\n        } else if (_tokenId == 133) { // Red Rupee 1.03\\n            boost = 103;\\n        } else if (_tokenId == 141) { // Score of Ivory 7.94\\n            boost = 794;\\n        } else if (_tokenId == 151) { // Silver Coin 1.05\\n            boost = 105;\\n        } else if (_tokenId == 152) { // Small Bird 7.98\\n            boost = 798;\\n        } else if (_tokenId == 153) { // Snow White Feather 8.54\\n            boost = 854;\\n        } else if (_tokenId == 161) { // Thread of Divine Silk 9.77\\n            boost = 977;\\n        } else if (_tokenId == 162) { // Unbreakable Pocketwatch 7.91\\n            boost = 791;\\n        } else if (_tokenId == 164) { // Witches Broom 6.76\\n            boost = 676;\\n        } else {\\n            boost = 0;\\n        }\\n        _amount = addDecimals(_amount);\\n        return _amount + _amount * boost / boostDecimal;\\n    }\\n\\n    function addDecimals(uint256 _amount) public pure returns (uint256) {\\n        return _amount * ONE;\\n    }\\n\\n    function getAllUserTokenIds(address _user) public view returns (uint256[] memory) {\\n        return allUserTokenIds[_user];\\n    }\\n\\n    function pendingRewardsPosition(address _user, uint256 _tokenId) public view returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_tokenId];\\n        pending = ((user.lpAmount * accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function pendingRewardsAll(address _user) external view returns (uint256 pending) {\\n        uint256 len = allUserTokenIds[_user].length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = allUserTokenIds[_user][i];\\n            pending += pendingRewardsPosition(_user, tokenId);\\n        }\\n    }\\n\\n    function deposit(uint256 _tokenId, uint256 _amount) public {\\n        UserInfo storage user = _addDeposit(msg.sender, _tokenId);\\n\\n        uint256 lpAmount = getLpAmount(_tokenId, _amount);\\n        totalLpToken += lpAmount;\\n\\n        user.tokenId = _tokenId;\\n        user.depositAmount += _amount;\\n        user.lpAmount += lpAmount;\\n        user.rewardDebt += (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        lpToken.safeTransferFrom(msg.sender, address(this), _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Deposit(msg.sender, lpAmount, _tokenId, _amount);\\n    }\\n\\n    function withdrawPosition(uint256 _tokenId, uint256 _amount) public {\\n        UserInfo storage user = userInfo[msg.sender][_tokenId];\\n        uint256 lpAmount = user.lpAmount;\\n        uint256 depositAmount = user.depositAmount;\\n        require(depositAmount > 0, \\\"Position does not exists\\\");\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n\\n        // Effects\\n        uint256 ratio = _amount * ONE / depositAmount;\\n        lpAmount = lpAmount * ratio / ONE;\\n\\n        totalLpToken -= lpAmount;\\n\\n        user.depositAmount -= _amount;\\n        user.lpAmount -= lpAmount;\\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        // Interactions\\n        lpToken.safeTransferFrom(address(this), msg.sender, _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Withdraw(msg.sender, _tokenId, _amount);\\n    }\\n\\n    function withdrawAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            withdrawPosition(tokenId, type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _tokenId) public {\\n        UserInfo storage user = userInfo[msg.sender][_tokenId];\\n\\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedMagic;\\n\\n        if (user.lpAmount == 0) {\\n            _removeDeposit(msg.sender, _tokenId);\\n        }\\n\\n        // Interactions\\n        if (_pendingMagic != 0) {\\n            magic.safeTransfer(msg.sender, _pendingMagic);\\n        }\\n\\n        emit Harvest(msg.sender, _tokenId, _pendingMagic);\\n    }\\n\\n    function harvestAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            harvestPosition(tokenId);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _tokenId, uint256 _amount) public {\\n        withdrawPosition(_tokenId, _amount);\\n        harvestPosition(_tokenId);\\n    }\\n\\n    function withdrawAndHarvestAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            withdrawAndHarvestPosition(tokenId, type(uint256).max);\\n        }\\n    }\\n\\n    function notifyRewards(uint256 _amount) external {\\n        if (_amount != 0) magic.safeTransferFrom(msg.sender, address(this), _amount);\\n        _updateRewards(_amount);\\n    }\\n\\n    function _updateRewards(uint256 _amount) internal {\\n        uint256 lpSupply = totalLpToken;\\n        if (lpSupply > 0) {\\n            uint256 magicReward = _amount + undistributedRewards;\\n            accMagicPerShare += magicReward * ONE / lpSupply;\\n            undistributedRewards = 0;\\n        } else {\\n            undistributedRewards += _amount;\\n        }\\n        emit LogUpdateRewards(lpSupply, accMagicPerShare);\\n    }\\n\\n    function _addDeposit(address _user, uint256 _tokenId) internal returns (UserInfo storage user) {\\n        user = userInfo[_user][_tokenId];\\n        uint256 tokenIndex = tokenIdIndex[_user][_tokenId];\\n        if (allUserTokenIds[_user].length == 0 || allUserTokenIds[_user][tokenIndex] != _tokenId) {\\n            tokenIdIndex[_user][_tokenId] = allUserTokenIds[_user].length;\\n            allUserTokenIds[_user].push(_tokenId);\\n        }\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _tokenId) internal {\\n        uint256 tokenIndex = tokenIdIndex[_user][_tokenId];\\n\\n        require(allUserTokenIds[_user][tokenIndex] == _tokenId, 'tokenId !exists');\\n\\n        uint256 lastDepositIndex = allUserTokenIds[_user].length - 1;\\n        if (tokenIndex != lastDepositIndex) {\\n            uint256 lastDepositId = allUserTokenIds[_user][lastDepositIndex];\\n            allUserTokenIds[_user][tokenIndex] = lastDepositId;\\n            tokenIdIndex[_user][lastDepositId] = tokenIndex;\\n        }\\n\\n        allUserTokenIds[_user].pop();\\n        delete tokenIdIndex[_user][_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9009c0f42549e5ac546cce9daa70222cfaa7a5c36e6da904dc69ca959c34117f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xd0e45ca072bd92bec11e6c4997db49684a5d57c60538e19f173755f2a4d7e67f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063adc8566e11610066578063adc8566e14610210578063d2258beb14610223578063dd62ed3e14610236578063f828b6561461026f57600080fd5b806370a08231146101cf57806395d89b41146101e2578063a457c2d7146101ea578063a9059cbb146101fd57600080fd5b806323b872dd116100d357806323b872dd14610187578063313ce5671461019a57806339509351146101a95780636742508c146101bc57600080fd5b806306fdde0314610105578063095ea7b3146101235780630c7621411461014657806318160ddd14610171575b600080fd5b61010d610282565b60405161011a9190611084565b60405180910390f35b610136610131366004610ed9565b610314565b604051901515815260200161011a565b600754610159906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61017961032a565b60405190815260200161011a565b610136610195366004610e98565b61041c565b6040516012815260200161011a565b6101366101b7366004610ed9565b6104cb565b6101796101ca366004610e1e565b610507565b6101796101dd366004610e1e565b610676565b61010d61069a565b6101366101f8366004610ed9565b6106a9565b61013661020b366004610ed9565b610742565b600554610159906001600160a01b031681565b610179610231366004610e1e565b61074f565b610179610244366004610e5f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600654610159906001600160a01b031681565b60606003805461029190611132565b80601f01602080910402602001604051908101604052809291908181526020018280546102bd90611132565b801561030a5780601f106102df5761010080835404028352916020019161030a565b820191906000526020600020905b8154815290600101906020018083116102ed57829003601f168201915b5050505050905090565b6000610321338484610ac9565b50600192915050565b600554604080516306c2a32360e11b815290516000926001600160a01b031691630d854646916004808301926020929190829003018186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a79190610e42565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610417919061101a565b905090565b6000610429848484610bed565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104b35760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104c08533858403610ac9565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103219185906105029086906110d9565b610ac9565b6005546040516306ea08bd60e11b81526001600160a01b0383811660048301526000928392911690630dd4117a9060240160006040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058c9190810190610f05565b805190915060005b8181101561066e5760008382815181106105b0576105b061119e565b60209081029190910101516005546040516321ce919d60e01b81526001600160a01b03898116600483015260248201849052929350600092909116906321ce919d9060440160a06040518083038186803b15801561060d57600080fd5b505afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190611033565b505050915050808661065791906110d9565b9550505080806106669061116d565b915050610594565b505050919050565b60006106818261074f565b61068a83610507565b61069491906110d9565b92915050565b60606004805461029190611132565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561072b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104aa565b6107383385858403610ac9565b5060019392505050565b6000610321338484610bed565b6007546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a082319060240160206040518083038186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d0919061101a565b9050600080600660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561082357600080fd5b505afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b9190610fca565b5091509150600660009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190610e42565b6001600160a01b0316600560009054906101000a90046001600160a01b03166001600160a01b0316630d8546466040518163ffffffff1660e01b815260040160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190610e42565b6001600160a01b03161415610a3057600660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a919061101a565b610a1d846001600160701b038516611113565b610a2791906110f1565b95945050505050565b600660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7e57600080fd5b505afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab6919061101a565b610a1d846001600160701b038416611113565b6001600160a01b038316610b2b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104aa565b6001600160a01b038216610b8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104aa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c515760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104aa565b6001600160a01b038216610cb35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104aa565b610cbe838383610dc7565b6001600160a01b03831660009081526020819052604090205481811015610d365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104aa565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d6d9084906110d9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610db991815260200190565b60405180910390a350505050565b60405162461bcd60e51b815260206004820152601060248201526f4e6f6e2d7472616e7366657261626c6560801b60448201526064016104aa565b80516001600160701b0381168114610e1957600080fd5b919050565b600060208284031215610e3057600080fd5b8135610e3b816111ca565b9392505050565b600060208284031215610e5457600080fd5b8151610e3b816111ca565b60008060408385031215610e7257600080fd5b8235610e7d816111ca565b91506020830135610e8d816111ca565b809150509250929050565b600080600060608486031215610ead57600080fd5b8335610eb8816111ca565b92506020840135610ec8816111ca565b929592945050506040919091013590565b60008060408385031215610eec57600080fd5b8235610ef7816111ca565b946020939093013593505050565b60006020808385031215610f1857600080fd5b825167ffffffffffffffff80821115610f3057600080fd5b818501915085601f830112610f4457600080fd5b815181811115610f5657610f566111b4565b8060051b604051601f19603f83011681018181108582111715610f7b57610f7b6111b4565b604052828152858101935084860182860187018a1015610f9a57600080fd5b600095505b83861015610fbd578051855260019590950194938601938601610f9f565b5098975050505050505050565b600080600060608486031215610fdf57600080fd5b610fe884610e02565b9250610ff660208501610e02565b9150604084015163ffffffff8116811461100f57600080fd5b809150509250925092565b60006020828403121561102c57600080fd5b5051919050565b600080600080600060a0868803121561104b57600080fd5b8551945060208601519350604086015192506060860151915060808601516003811061107657600080fd5b809150509295509295909350565b600060208083528351808285015260005b818110156110b157858101830151858201604001528201611095565b818111156110c3576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156110ec576110ec611188565b500190565b60008261110e57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561112d5761112d611188565b500290565b600181811c9082168061114657607f821691505b6020821081141561116757634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561118157611181611188565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146111df57600080fd5b5056fea264697066735822122017366c279add497f0cc8a06d274f01966e6b0ac595009d104a48391a22696e0364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2454,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2460,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2462,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2464,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2466,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 6549,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "treasuryMine",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(TreasuryMine)8378"
      },
      {
        "astId": 6552,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "sushiLP",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Pair)9953"
      },
      {
        "astId": 6555,
        "contract": "contracts/MagicGov.sol:TreasureDAO",
        "label": "lpRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20)2984"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)2984": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)9953": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(TreasuryMine)8378": {
        "encoding": "inplace",
        "label": "contract TreasuryMine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}