{
  "address": "0xDf19f1216aA406DF8bC585246bee7D96933f285F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_magic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryStake",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accMagicPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdateRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIFECYCLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_WEEKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accMagicPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exclude",
          "type": "address"
        }
      ],
      "name": "addExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allUserDepositIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnLeftovers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TreasuryMine.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositIdIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllUserDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TreasuryMine.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "getBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcludedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "harvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magic",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magicPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magicTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMagicPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewardsAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardsPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "include",
          "type": "address"
        }
      ],
      "name": "removeExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryStake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        },
        {
          "internalType": "enum TreasuryMine.Lock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "util",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAndHarvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndHarvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeaf6518d819afe45dc6efef3b26da7ac91f4f90563cf00007d197fbbb8aa8d4b",
  "receipt": {
    "to": null,
    "from": "0x393248aE29A7C2128E8E27d23330b1F87E0600fc",
    "contractAddress": "0xDf19f1216aA406DF8bC585246bee7D96933f285F",
    "transactionIndex": 0,
    "gasUsed": "107524975",
    "logsBloom": "0x
    "blockHash": "0x10631fd7e6a6e50b578d0e6ab4e50088f42986b685ae9c6fa9823e7096f7a81c",
    "transactionHash": "0xeaf6518d819afe45dc6efef3b26da7ac91f4f90563cf00007d197fbbb8aa8d4b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2458616,
        "transactionHash": "0xeaf6518d819afe45dc6efef3b26da7ac91f4f90563cf00007d197fbbb8aa8d4b",
        "address": "0xDf19f1216aA406DF8bC585246bee7D96933f285F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000393248ae29a7c2128e8e27d23330b1f87e0600fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x10631fd7e6a6e50b578d0e6ab4e50088f42986b685ae9c6fa9823e7096f7a81c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2458616,
        "transactionHash": "0xeaf6518d819afe45dc6efef3b26da7ac91f4f90563cf00007d197fbbb8aa8d4b",
        "address": "0xDf19f1216aA406DF8bC585246bee7D96933f285F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000393248ae29a7c2128e8e27d23330b1f87e0600fc",
          "0x0000000000000000000000003d210e741cdedea81efcd9711ce7ef7fee45684b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x10631fd7e6a6e50b578d0e6ab4e50088f42986b685ae9c6fa9823e7096f7a81c"
      }
    ],
    "blockNumber": 2458616,
    "cumulativeGasUsed": "82699235",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x539bdE0d7Dbd336b79148AA742883198BBF60342",
    "0xd300322832765FEe6b910D314F2c2d879427226F",
    "0x3D210e741cDeDeA81efCd9711Ce7ef7FEe45684B"
  ],
  "solcInputHash": "b3935d23b502b19e524270344128b062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_magic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryStake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accMagicPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIFECYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_WEEKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accMagicPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exclude\",\"type\":\"address\"}],\"name\":\"addExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUserDepositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLeftovers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TreasuryMine.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositIdIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllUserDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TreasuryMine.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"harvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magic\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMagicPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardsAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"include\",\"type\":\"address\"}],\"name\":\"removeExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"enum TreasuryMine.Lock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"util\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndHarvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndHarvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allUserDepositIds(address,uint256)\":{\"notice\":\"user => depositId[]\"},\"currentId(address)\":{\"notice\":\"user => deposit index array\"},\"depositIdIndex(address,uint256)\":{\"notice\":\"user => depositId => index in allUserDepositIds\"},\"kill()\":{\"notice\":\"EMERGENCY ONLY\"},\"userInfo(address,uint256)\":{\"notice\":\"user => depositId => UserInfo\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreasuryMine.sol\":\"TreasuryMine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/TreasuryMine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\nimport './TreasuryStake.sol';\\n\\ncontract TreasuryMine is Ownable {\\n    using SafeERC20 for ERC20;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    enum Lock { twoWeeks, oneMonth, threeMonths }\\n\\n    uint256 public constant DAY = 60 * 60 * 24;\\n    uint256 public constant ONE_WEEK = DAY * 7;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = DAY * 30;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant LIFECYCLE = THREE_MONTHS;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Magic token addr\\n    ERC20 public immutable magic;\\n    address public immutable treasuryStake;\\n\\n    bool public unlockAll;\\n    uint256 public endTimestamp;\\n\\n    uint256 public maxMagicPerSecond;\\n    uint256 public magicPerSecond;\\n    uint256 public totalRewardsEarned;\\n    uint256 public accMagicPerShare;\\n    uint256 public totalLpToken;\\n    uint256 public magicTotalDeposits;\\n    uint256 public lastRewardTimestamp;\\n\\n    address[] public excludedAddresses;\\n\\n    struct UserInfo {\\n        uint256 depositAmount;\\n        uint256 lpAmount;\\n        uint256 lockedUntil;\\n        int256 rewardDebt;\\n        Lock lock;\\n    }\\n\\n    /// @notice user => depositId => UserInfo\\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\\n    /// @notice user => depositId[]\\n    mapping (address => uint256[]) public allUserDepositIds;\\n    /// @notice user => depositId => index in allUserDepositIds\\n    mapping (address => mapping(uint256 => uint256)) public depositIdIndex;\\n    /// @notice user => deposit index array\\n    mapping (address => uint256) public currentId;\\n\\n    event Deposit(address indexed user, uint256 indexed index, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed index, uint256 amount);\\n    event EmergencyWithdraw(address indexed to, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(uint256 indexed lastRewardTimestamp, uint256 lpSupply, uint256 accMagicPerShare);\\n\\n    modifier refreshMagicRate() {\\n        _;\\n        uint256 util = utilization();\\n        if (util < 2e17) {\\n            magicPerSecond = 0;\\n        } else if (util < 3e17) { // >20%\\n            // 50%\\n            magicPerSecond = maxMagicPerSecond * 5 / 10;\\n        } else if (util < 4e17) { // >30%\\n            // 60%\\n            magicPerSecond = maxMagicPerSecond * 6 / 10;\\n        } else if (util < 5e17) { // >40%\\n            // 80%\\n            magicPerSecond = maxMagicPerSecond * 8 / 10;\\n        } else if (util < 6e17) { // >50%\\n            // 90%\\n            magicPerSecond = maxMagicPerSecond * 9 / 10;\\n        } else { // >60%\\n            // 100%\\n            magicPerSecond = maxMagicPerSecond;\\n        }\\n    }\\n\\n    modifier updateRewards() {\\n        if (block.timestamp > lastRewardTimestamp && lastRewardTimestamp < endTimestamp && endTimestamp != 0) {\\n            uint256 lpSupply = totalLpToken;\\n            if (lpSupply > 0) {\\n                uint256 timeDelta;\\n                if (block.timestamp > endTimestamp) {\\n                    timeDelta = endTimestamp - lastRewardTimestamp;\\n                    lastRewardTimestamp = endTimestamp;\\n                } else {\\n                    timeDelta = block.timestamp - lastRewardTimestamp;\\n                    lastRewardTimestamp = block.timestamp;\\n                }\\n                uint256 magicReward = timeDelta * magicPerSecond;\\n                // send 10% to treasury\\n                uint256 treasuryReward = magicReward / 10;\\n                _fundTreasury(treasuryReward);\\n                magicReward -= treasuryReward;\\n                totalRewardsEarned += magicReward;\\n                accMagicPerShare += magicReward * ONE / lpSupply;\\n            }\\n            emit LogUpdateRewards(lastRewardTimestamp, lpSupply, accMagicPerShare);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _magic, address _treasuryStake, address _owner) {\\n        magic = ERC20(_magic);\\n        treasuryStake = _treasuryStake;\\n        transferOwnership(_owner);\\n    }\\n\\n    function init() external onlyOwner refreshMagicRate {\\n        require(endTimestamp == 0, \\\"Cannot init again\\\");\\n\\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\\n        require(rewardsAmount > 0, \\\"No rewards sent\\\");\\n\\n        maxMagicPerSecond = rewardsAmount / LIFECYCLE;\\n        endTimestamp = block.timestamp + LIFECYCLE;\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    function isInitialized() public view returns (bool) {\\n        return endTimestamp != 0;\\n    }\\n\\n    function utilization() public view returns (uint256 util) {\\n        uint256 circulatingSupply = magic.totalSupply();\\n        uint256 len = excludedAddresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            circulatingSupply -= magic.balanceOf(excludedAddresses[i]);\\n        }\\n        uint256 rewardsAmount = magic.balanceOf(address(this)) - magicTotalDeposits;\\n        circulatingSupply -= rewardsAmount;\\n        if (circulatingSupply != 0) {\\n            util = magicTotalDeposits * ONE / circulatingSupply;\\n        }\\n    }\\n\\n    function getAllUserDepositIds(address _user) public view returns (uint256[] memory) {\\n        return allUserDepositIds[_user];\\n    }\\n\\n    function getExcludedAddresses() public view returns (address[] memory) {\\n        return excludedAddresses;\\n    }\\n\\n    function getBoost(Lock _lock) public pure returns (uint256 boost, uint256 timelock) {\\n        if (_lock == Lock.twoWeeks) {\\n            // 20%\\n            return (2e17, TWO_WEEKS);\\n        } else if (_lock == Lock.oneMonth) {\\n            // 50%\\n            return (5e17, ONE_MONTH);\\n        } else if (_lock == Lock.threeMonths) {\\n            // 200%\\n            return (2e18, THREE_MONTHS);\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n    }\\n\\n    function pendingRewardsPosition(address _user, uint256 _depositId) public view returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        uint256 _accMagicPerShare = accMagicPerShare;\\n        uint256 lpSupply = totalLpToken;\\n        if (block.timestamp > lastRewardTimestamp && magicPerSecond != 0) {\\n            uint256 timeDelta;\\n            if (block.timestamp > endTimestamp) {\\n                timeDelta = endTimestamp - lastRewardTimestamp;\\n            } else {\\n                timeDelta = block.timestamp - lastRewardTimestamp;\\n            }\\n            uint256 magicReward = timeDelta * magicPerSecond;\\n            // send 10% to treasury\\n            uint256 treasuryReward = magicReward / 10;\\n            magicReward -= treasuryReward;\\n\\n            _accMagicPerShare += magicReward * ONE / lpSupply;\\n        }\\n\\n        pending = ((user.lpAmount * _accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function pendingRewardsAll(address _user) external view returns (uint256 pending) {\\n        uint256 len = allUserDepositIds[_user].length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = allUserDepositIds[_user][i];\\n            pending += pendingRewardsPosition(_user, depositId);\\n        }\\n    }\\n\\n    function deposit(uint256 _amount, Lock _lock) public refreshMagicRate updateRewards {\\n        require(isInitialized(), \\\"Not initialized\\\");\\n\\n        if (_lock == Lock.twoWeeks) {\\n            // give 1 DAY of grace period\\n            require(block.timestamp + TWO_WEEKS - DAY <= endTimestamp, \\\"Less than 2 weeks left\\\");\\n        } else if (_lock == Lock.oneMonth) {\\n            // give 3 DAY of grace period\\n            require(block.timestamp + ONE_MONTH - 3 * DAY<= endTimestamp, \\\"Less than 1 month left\\\");\\n        } else if (_lock == Lock.threeMonths) {\\n            // give ONE_WEEK of grace period\\n            require(block.timestamp + THREE_MONTHS - ONE_WEEK <= endTimestamp, \\\"Less than 3 months left\\\");\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n\\n        (UserInfo storage user, uint256 depositId) = _addDeposit(msg.sender);\\n        (uint256 boost, uint256 timelock) = getBoost(_lock);\\n        uint256 lpAmount = _amount + _amount * boost / ONE;\\n        magicTotalDeposits += _amount;\\n        totalLpToken += lpAmount;\\n\\n        user.depositAmount = _amount;\\n        user.lpAmount = lpAmount;\\n        user.lockedUntil = block.timestamp + timelock;\\n        user.rewardDebt = (lpAmount * accMagicPerShare / ONE).toInt256();\\n        user.lock = _lock;\\n\\n        magic.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, depositId, _amount);\\n    }\\n\\n    function withdrawPosition(uint256 _depositId, uint256 _amount) public refreshMagicRate updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n        uint256 depositAmount = user.depositAmount;\\n        require(depositAmount > 0, \\\"Position does not exists\\\");\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n        // anyone can withdraw when mine ends or kill swith was used\\n        if (block.timestamp < endTimestamp && !unlockAll) {\\n            require(block.timestamp >= user.lockedUntil, \\\"Position is still locked\\\");\\n        }\\n\\n        // Effects\\n        uint256 ratio = _amount * ONE / depositAmount;\\n        uint256 lpAmount = user.lpAmount * ratio / ONE;\\n\\n        totalLpToken -= lpAmount;\\n        magicTotalDeposits -= _amount;\\n\\n        user.depositAmount -= _amount;\\n        user.lpAmount -= lpAmount;\\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        // Interactions\\n        magic.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _depositId, _amount);\\n    }\\n\\n    function withdrawAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            withdrawPosition(depositId, type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _depositId) public refreshMagicRate updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n\\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedMagic;\\n\\n        if (user.depositAmount == 0 && user.lpAmount == 0) {\\n            _removeDeposit(msg.sender, _depositId);\\n        }\\n\\n        // Interactions\\n        if (_pendingMagic != 0) {\\n            magic.safeTransfer(msg.sender, _pendingMagic);\\n        }\\n\\n        emit Harvest(msg.sender, _depositId, _pendingMagic);\\n    }\\n\\n    function harvestAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            harvestPosition(depositId);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _depositId, uint256 _amount) public {\\n        withdrawPosition(_depositId, _amount);\\n        harvestPosition(_depositId);\\n    }\\n\\n    function withdrawAndHarvestAll() public {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender];\\n        uint256 len = depositIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 depositId = depositIds[i];\\n            withdrawAndHarvestPosition(depositId, type(uint256).max);\\n        }\\n    }\\n\\n    function burnLeftovers() public refreshMagicRate updateRewards {\\n        require(block.timestamp > endTimestamp, \\\"Will not burn before end\\\");\\n        address blackhole = 0x000000000000000000000000000000000000dEaD;\\n        int256 burnAmount =\\n            (LIFECYCLE * maxMagicPerSecond).toInt256() // rewards originally sent\\n            - (totalRewardsEarned).toInt256() // rewards distributed to users\\n            - (totalRewardsEarned / 9).toInt256(); // rewards distributed to treasury\\n        if (burnAmount > 0) magic.safeTransfer(blackhole, uint256(burnAmount));\\n    }\\n\\n    function addExcludedAddress(address exclude) external onlyOwner refreshMagicRate updateRewards {\\n        uint256 len = excludedAddresses.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            require(excludedAddresses[i] != exclude, \\\"Already excluded\\\");\\n        }\\n        excludedAddresses.push(exclude);\\n    }\\n\\n    function removeExcludedAddress(address include) external onlyOwner refreshMagicRate updateRewards {\\n        uint256 index;\\n        uint256 len = excludedAddresses.length;\\n        require(len > 0, \\\"no excluded addresses\\\");\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (excludedAddresses[i] == include) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        require(excludedAddresses[index] == include, \\\"address not excluded\\\");\\n\\n        uint256 lastIndex = len - 1;\\n        if (index != lastIndex) {\\n            excludedAddresses[index] = excludedAddresses[lastIndex];\\n        }\\n        excludedAddresses.pop();\\n    }\\n\\n    /// @notice EMERGENCY ONLY\\n    function kill() external onlyOwner refreshMagicRate updateRewards {\\n        require(block.timestamp <= endTimestamp, \\\"Will not kill after end\\\");\\n        require(!unlockAll, \\\"Already dead\\\");\\n\\n        int256 withdrawAmount =\\n            (LIFECYCLE * maxMagicPerSecond).toInt256() // rewards originally sent\\n            - (totalRewardsEarned).toInt256() // rewards distributed to users\\n            - (totalRewardsEarned / 9).toInt256(); // rewards distributed to treasury\\n        if (withdrawAmount > 0) {\\n            magic.safeTransfer(owner(), uint256(withdrawAmount));\\n            emit EmergencyWithdraw(owner(), uint256(withdrawAmount));\\n        }\\n        maxMagicPerSecond = 0;\\n        magicPerSecond = 0;\\n        unlockAll = true;\\n    }\\n\\n    function _addDeposit(address _user) internal returns (UserInfo storage user, uint256 newDepositId) {\\n        // start depositId from 1\\n        newDepositId = ++currentId[_user];\\n        depositIdIndex[_user][newDepositId] = allUserDepositIds[_user].length;\\n        allUserDepositIds[_user].push(newDepositId);\\n        user = userInfo[_user][newDepositId];\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _depositId) internal {\\n        uint256 depositIndex = depositIdIndex[_user][_depositId];\\n\\n        require(allUserDepositIds[_user][depositIndex] == _depositId, 'depositId !exists');\\n\\n        uint256 lastDepositIndex = allUserDepositIds[_user].length - 1;\\n        if (depositIndex != lastDepositIndex) {\\n            uint256 lastDepositId = allUserDepositIds[_user][lastDepositIndex];\\n            allUserDepositIds[_user][depositIndex] = lastDepositId;\\n            depositIdIndex[_user][lastDepositId] = depositIndex;\\n        }\\n        allUserDepositIds[_user].pop();\\n        delete depositIdIndex[_user][_depositId];\\n    }\\n\\n    function _fundTreasury(uint256 _amount) internal {\\n        magic.approve(treasuryStake, _amount);\\n        TreasuryStake(treasuryStake).notifyRewards(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd83267454cdbef78861637782d1382855162daa175a1416fcf5c7fd39a6238d5\",\"license\":\"MIT\"},\"contracts/TreasuryStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\n\\ncontract TreasuryStake is ERC1155Holder {\\n    using SafeERC20 for ERC20;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    uint256 public constant DAY = 60 * 60 * 24;\\n    uint256 public constant ONE_WEEK = DAY * 7;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = DAY * 30;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant LIFECYCLE = THREE_MONTHS;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Magic token addr\\n    ERC20 public immutable magic;\\n    IERC1155 public immutable lpToken;\\n\\n    uint256 public totalRewardsEarned;\\n    uint256 public accMagicPerShare;\\n    uint256 public totalLpToken;\\n    uint256 public undistributedRewards;\\n\\n    struct UserInfo {\\n        uint256 depositAmount;\\n        uint256 tokenId;\\n        uint256 lpAmount;\\n        int256 rewardDebt;\\n    }\\n\\n    /// @notice user => tokenId => UserInfo\\n    mapping (address => mapping (uint256 => UserInfo)) public userInfo;\\n    /// @notice user => tokenId[]\\n    mapping (address => uint256[]) public allUserTokenIds;\\n    // @notice user => tokenId => index in allUserIndex\\n    mapping (address => mapping(uint256 => uint256)) public tokenIdIndex;\\n\\n    event Deposit(address indexed user, uint256 lpAmount, uint256 tokenId, uint256 depositAmount);\\n    event Withdraw(address indexed user, uint256 tokenId, uint256 withdrawAmount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(uint256 lpSupply, uint256 accMagicPerShare);\\n\\n    constructor(address _magic, address _lpToken) {\\n        magic = ERC20(_magic);\\n        lpToken = IERC1155(_lpToken);\\n    }\\n\\n    function getLpAmount(uint256 _tokenId, uint256 _amount) public pure returns (uint256) {\\n        uint256 boost;\\n        uint256 boostDecimal = 100;\\n\\n        if (_tokenId == 39) { // Ancient Relic 10.03\\n            boost = 1003;\\n        } else if (_tokenId == 46) { // Bag of Rare Mushrooms 8.21\\n            boost = 821;\\n        } else if (_tokenId == 47) { // Bait for Monsters 9.73\\n            boost = 973;\\n        } else if (_tokenId == 48) { // Beetle-wing 1.00\\n            boost = 100;\\n        } else if (_tokenId == 49) { // Blue Rupee 2.04\\n            boost = 204;\\n        } else if (_tokenId == 51) { // Bottomless Elixir 10.15\\n            boost = 1015;\\n        } else if (_tokenId == 52) { // Cap of Invisibility 10.15\\n            boost = 1015;\\n        } else if (_tokenId == 53) { // Carriage 8.09\\n            boost = 809;\\n        } else if (_tokenId == 54) { // Castle 9.77\\n            boost = 977;\\n        } else if (_tokenId == 68) { // Common Bead 7.52\\n            boost = 752;\\n        } else if (_tokenId == 69) { // Common Feather 4.50\\n            boost = 450;\\n        } else if (_tokenId == 71) { // Common Relic 2.87\\n            boost = 287;\\n        } else if (_tokenId == 72) { // Cow 7.74\\n            boost = 774;\\n        } else if (_tokenId == 73) { // Diamond 1.04\\n            boost = 104;\\n        } else if (_tokenId == 74) { // Divine Hourglass 8.46\\n            boost = 846;\\n        } else if (_tokenId == 75) { // Divine Mask 7.62\\n            boost = 762;\\n        } else if (_tokenId == 76) { // Donkey 1.62\\n            boost = 162;\\n        } else if (_tokenId == 77) { // Dragon Tail 1.03\\n            boost = 103;\\n        } else if (_tokenId == 79) { // Emerald 1.01\\n            boost = 101;\\n        } else if (_tokenId == 82) { // Favor from the Gods 7.39\\n            boost = 739;\\n        } else if (_tokenId == 91) { // Framed Butterfly 7.79\\n            boost = 779;\\n        } else if (_tokenId == 92) { // Gold Coin 1.03\\n            boost = 103;\\n        } else if (_tokenId == 93) { // Grain 4.29\\n            boost = 429;\\n        } else if (_tokenId == 94) { // Green Rupee 4.36\\n            boost = 436;\\n        } else if (_tokenId == 95) { // Grin 10.47\\n            boost = 1047;\\n        } else if (_tokenId == 96) { // Half-Penny 1.05\\n            boost = 105;\\n        } else if (_tokenId == 97) { // Honeycomb 10.52\\n            boost = 1052;\\n        } else if (_tokenId == 98) { // Immovable Stone 9.65\\n            boost = 965;\\n        } else if (_tokenId == 99) { // Ivory Breastpin 8.49\\n            boost = 849;\\n        } else if (_tokenId == 100) { // Jar of Fairies 7.10\\n            boost = 710;\\n        } else if (_tokenId == 103) { // Lumber 4.02\\n            boost = 402;\\n        } else if (_tokenId == 104) { // Military Stipend 8.30\\n            boost = 830;\\n        } else if (_tokenId == 105) { // Mollusk Shell 8.96\\n            boost = 896;\\n        } else if (_tokenId == 114) { // Ox 2.12\\n            boost = 212;\\n        } else if (_tokenId == 115) { // Pearl 1.03\\n            boost = 103;\\n        } else if (_tokenId == 116) { // Pot of Gold 7.72\\n            boost = 772;\\n        } else if (_tokenId == 117) { // Quarter-Penny 1.00\\n            boost = 100;\\n        } else if (_tokenId == 132) { // Red Feather 8.51\\n            boost = 851;\\n        } else if (_tokenId == 133) { // Red Rupee 1.03\\n            boost = 103;\\n        } else if (_tokenId == 141) { // Score of Ivory 7.94\\n            boost = 794;\\n        } else if (_tokenId == 151) { // Silver Coin 1.05\\n            boost = 105;\\n        } else if (_tokenId == 152) { // Small Bird 7.98\\n            boost = 798;\\n        } else if (_tokenId == 153) { // Snow White Feather 8.54\\n            boost = 854;\\n        } else if (_tokenId == 161) { // Thread of Divine Silk 9.77\\n            boost = 977;\\n        } else if (_tokenId == 162) { // Unbreakable Pocketwatch 7.91\\n            boost = 791;\\n        } else if (_tokenId == 164) { // Witches Broom 6.76\\n            boost = 676;\\n        } else {\\n            boost = 0;\\n        }\\n        _amount = addDecimals(_amount);\\n        return _amount + _amount * boost / boostDecimal;\\n    }\\n\\n    function addDecimals(uint256 _amount) public pure returns (uint256) {\\n        return _amount * ONE;\\n    }\\n\\n    function getAllUserTokenIds(address _user) public view returns (uint256[] memory) {\\n        return allUserTokenIds[_user];\\n    }\\n\\n    function pendingRewardsPosition(address _user, uint256 _tokenId) public view returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_tokenId];\\n        pending = ((user.lpAmount * accMagicPerShare / ONE).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function pendingRewardsAll(address _user) external view returns (uint256 pending) {\\n        uint256 len = allUserTokenIds[_user].length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = allUserTokenIds[_user][i];\\n            pending += pendingRewardsPosition(_user, tokenId);\\n        }\\n    }\\n\\n    function deposit(uint256 _tokenId, uint256 _amount) public {\\n        UserInfo storage user = _addDeposit(msg.sender, _tokenId);\\n\\n        uint256 lpAmount = getLpAmount(_tokenId, _amount);\\n        totalLpToken += lpAmount;\\n\\n        user.tokenId = _tokenId;\\n        user.depositAmount += _amount;\\n        user.lpAmount += lpAmount;\\n        user.rewardDebt += (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        lpToken.safeTransferFrom(msg.sender, address(this), _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Deposit(msg.sender, lpAmount, _tokenId, _amount);\\n    }\\n\\n    function withdrawPosition(uint256 _tokenId, uint256 _amount) public {\\n        UserInfo storage user = userInfo[msg.sender][_tokenId];\\n        uint256 lpAmount = user.lpAmount;\\n        uint256 depositAmount = user.depositAmount;\\n        require(depositAmount > 0, \\\"Position does not exists\\\");\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n\\n        // Effects\\n        uint256 ratio = _amount * ONE / depositAmount;\\n        lpAmount = lpAmount * ratio / ONE;\\n\\n        totalLpToken -= lpAmount;\\n\\n        user.depositAmount -= _amount;\\n        user.lpAmount -= lpAmount;\\n        user.rewardDebt -= (lpAmount * accMagicPerShare / ONE).toInt256();\\n\\n        // Interactions\\n        lpToken.safeTransferFrom(address(this), msg.sender, _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Withdraw(msg.sender, _tokenId, _amount);\\n    }\\n\\n    function withdrawAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            withdrawPosition(tokenId, type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _tokenId) public {\\n        UserInfo storage user = userInfo[msg.sender][_tokenId];\\n\\n        int256 accumulatedMagic = (user.lpAmount * accMagicPerShare / ONE).toInt256();\\n        uint256 _pendingMagic = (accumulatedMagic - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedMagic;\\n\\n        if (user.lpAmount == 0) {\\n            _removeDeposit(msg.sender, _tokenId);\\n        }\\n\\n        // Interactions\\n        if (_pendingMagic != 0) {\\n            magic.safeTransfer(msg.sender, _pendingMagic);\\n        }\\n\\n        emit Harvest(msg.sender, _tokenId, _pendingMagic);\\n    }\\n\\n    function harvestAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            harvestPosition(tokenId);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _tokenId, uint256 _amount) public {\\n        withdrawPosition(_tokenId, _amount);\\n        harvestPosition(_tokenId);\\n    }\\n\\n    function withdrawAndHarvestAll() public {\\n        uint256[] memory tokenIds = allUserTokenIds[msg.sender];\\n        uint256 len = tokenIds.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            withdrawAndHarvestPosition(tokenId, type(uint256).max);\\n        }\\n    }\\n\\n    function notifyRewards(uint256 _amount) external {\\n        if (_amount != 0) magic.safeTransferFrom(msg.sender, address(this), _amount);\\n        _updateRewards(_amount);\\n    }\\n\\n    function _updateRewards(uint256 _amount) internal {\\n        uint256 lpSupply = totalLpToken;\\n        if (lpSupply > 0) {\\n            uint256 magicReward = _amount + undistributedRewards;\\n            accMagicPerShare += magicReward * ONE / lpSupply;\\n            undistributedRewards = 0;\\n        } else {\\n            undistributedRewards += _amount;\\n        }\\n        emit LogUpdateRewards(lpSupply, accMagicPerShare);\\n    }\\n\\n    function _addDeposit(address _user, uint256 _tokenId) internal returns (UserInfo storage user) {\\n        user = userInfo[_user][_tokenId];\\n        uint256 tokenIndex = tokenIdIndex[_user][_tokenId];\\n        if (allUserTokenIds[_user].length == 0 || allUserTokenIds[_user][tokenIndex] != _tokenId) {\\n            tokenIdIndex[_user][_tokenId] = allUserTokenIds[_user].length;\\n            allUserTokenIds[_user].push(_tokenId);\\n        }\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _tokenId) internal {\\n        uint256 tokenIndex = tokenIdIndex[_user][_tokenId];\\n\\n        require(allUserTokenIds[_user][tokenIndex] == _tokenId, 'tokenId !exists');\\n\\n        uint256 lastDepositIndex = allUserTokenIds[_user].length - 1;\\n        if (tokenIndex != lastDepositIndex) {\\n            uint256 lastDepositId = allUserTokenIds[_user][lastDepositIndex];\\n            allUserTokenIds[_user][tokenIndex] = lastDepositId;\\n            tokenIdIndex[_user][lastDepositId] = tokenIndex;\\n        }\\n\\n        allUserTokenIds[_user].pop();\\n        delete tokenIdIndex[_user][_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9009c0f42549e5ac546cce9daa70222cfaa7a5c36e6da904dc69ca959c34117f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620035ae380380620035ae8339810160408190526200003491620001af565b6200003f336200006d565b6001600160601b0319606084811b821660805283901b1660a0526200006481620000bd565b505050620001f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200011d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000114565b6200018f816200006d565b50565b80516001600160a01b0381168114620001aa57600080fd5b919050565b600080600060608486031215620001c557600080fd5b620001d08462000192565b9250620001e06020850162000192565b9150620001f06040850162000192565b90509250925092565b60805160601c60a05160601c61333562000279600039600081816104f2015281816127a401526128660152600081816102b60152818161090901528181610cc60152818161132001528181611f0a0152818161214f0152818161221401528181612355015281816123f7015281816124fd01526127d301526133356000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80638ed955b91161015c578063d82b99d7116100ce578063ecbefab711610087578063ecbefab714610575578063f091ba2a14610585578063f15576a614610598578063f2fde38b146105a1578063f8077fae146105b4578063fd90904c146105bd57600080fd5b8063d82b99d714610549578063dbb556291461055c578063e11398e814610565578063e1c7392a1461056d578063e8622e6714610575578063ea21cd921461057d57600080fd5b8063a9b54bcd11610120578063a9b54bcd146104da578063b958dd19146104ed578063bc168ecb14610514578063c2ee3a081461051d578063cd24b0a31461052c578063d0d1daf41461054057600080fd5b80638ed955b91461049b578063934d1fa4146104a3578063a646c35d146104ab578063a7e69fb4146104be578063a85adeab146104d157600080fd5b806341c0e1b5116101f5578063654cfdff116101b9578063654cfdff14610457578063715018a61461046a5780637350385714610472578063853828b61461047a5780638da5cb5b146104825780638e6f6b771461049357600080fd5b806341c0e1b5146103f35780634ebdd340146103fb57806359fe213b146104265780635fdf199a14610439578063620572071461044e57600080fd5b806321ce919d1161024757806321ce919d1461033b5780632299b8fa1461039757806327cfe856146103b75780632f4c4678146103c1578063344a15c5146103d4578063392e53cd146103dd57600080fd5b80630a4a3c9f146102845780630d854646146102b15780630dd4117a146102f057806320988cef1461031057806320f8e94e14610326575b600080fd5b610297610292366004612fa2565b6105d0565b604080519283526020830191909152015b60405180910390f35b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102a8565b6103036102fe366004612f3b565b6106c6565b6040516102a891906130a6565b610318610732565b6040519081526020016102a8565b610339610334366004612fbd565b610743565b005b610386610349366004612f56565b600a602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040516102a8959493929190613146565b6103186103a5366004612f3b565b600d6020526000908152604090205481565b6103186201518081565b6102d86103cf366004612fbd565b610a2f565b61031860035481565b60015415155b60405190151581526020016102a8565b610339610a59565b610318610409366004612f56565b600c60209081526000928352604080842090915290825290205481565b610318610434366004612f3b565b610e1a565b610441610ea3565b6040516102a89190613059565b61031860055481565b610339610465366004612fef565b610f05565b61033961144c565b610339611482565b61033961152a565b6000546001600160a01b03166102d8565b6103186115d2565b6103396115e0565b610318611685565b6103396104b9366004612f3b565b61169e565b6103396104cc36600461301b565b6119d0565b61031860015481565b6103396104e8366004612f3b565b6119e3565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b61031860065481565b610318670de0b6b3a764000081565b6000546103e390600160a01b900460ff1681565b61031860075481565b61033961055736600461301b565b611c13565b61031860025481565b610339611f76565b610339612182565b610318612337565b610318612350565b610318610593366004612f56565b6125bf565b61031860045481565b6103396105af366004612f3b565b6125f0565b61031860085481565b6103186105cb366004612f56565b612688565b600080808360028111156105e6576105e661329d565b1415610617576702c68af0bb1400006106036201518060076131cb565b61060e9060026131cb565b91509150915091565b600183600281111561062b5761062b61329d565b1415610648576706f05b59d3b2000061060e62015180601e6131cb565b600283600281111561065c5761065c61329d565b141561068457671bc16d674ec8000061067962015180601e6131cb565b61060e9060036131cb565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206c6f636b2076616c756560701b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561072657602002820191906000526020600020905b815481526020019060010190808311610712575b50505050509050919050565b61074062015180601e6131cb565b81565b600854421180156107575750600154600854105b8015610764575060015415155b1561086457600654801561083457600060015442111561079b5760085460015461078e9190613229565b60015460085590506107af565b6008546107a89042613229565b4260085590505b6000600354826107bf91906131cb565b905060006107ce600a836131a9565b90506107d98161278d565b6107e38183613229565b915081600460008282546107f79190613191565b90915550849050610810670de0b6b3a7640000846131cb565b61081a91906131a9565b6005600082825461082b9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b336000908152600a60209081526040808320848452909152812060055460018201549192916108b091670de0b6b3a7640000916108a191906131cb565b6108ab91906131a9565b6128cd565b905060006108cc8360030154836108c791906131ea565b61293b565b6003840183905583549091501580156108e757506001830154155b156108f6576108f6338561298d565b8015610930576109306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612b50565b604051818152849033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050506000610974612350565b90506702c68af0bb14000081101561098f5760006003555050565b670429d069189e00008110156109c157600a60025460056109b091906131cb565b6109ba91906131a9565b6003555050565b67058d15e1762800008110156109e257600a60025460066109b091906131cb565b6706f05b59d3b20000811015610a0357600a60025460086109b091906131cb565b670853a0d2313c0000811015610a2457600a60025460096109b091906131cb565b6002546003555b5050565b60098181548110610a3f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610a835760405162461bcd60e51b81526004016106bd90613111565b60085442118015610a975750600154600854105b8015610aa4575060015415155b15610ba4576006548015610b74576000600154421115610adb57600854600154610ace9190613229565b6001546008559050610aef565b600854610ae89042613229565b4260085590505b600060035482610aff91906131cb565b90506000610b0e600a836131a9565b9050610b198161278d565b610b238183613229565b91508160046000828254610b379190613191565b90915550849050610b50670de0b6b3a7640000846131cb565b610b5a91906131a9565b60056000828254610b6b9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b600154421115610bf65760405162461bcd60e51b815260206004820152601760248201527f57696c6c206e6f74206b696c6c20616674657220656e6400000000000000000060448201526064016106bd565b600054600160a01b900460ff1615610c3f5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481919585960a21b60448201526064016106bd565b6000610c5360096004546108ab91906131a9565b610c5e6004546128cd565b600254610c8890610c7362015180601e6131cb565b610c7e9060036131cb565b6108ab91906131cb565b610c9291906131ea565b610c9c91906131ea565b90506000811315610d3c57610ced610cbc6000546001600160a01b031690565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083612b50565b6000546001600160a01b03166001600160a01b03167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051610d3391815260200190565b60405180910390a25b50600060028190556003819055805460ff60a01b1916600160a01b178155610d62612350565b90506702c68af0bb140000811015610d7c57600060035550565b670429d069189e0000811015610dad57600a6002546005610d9d91906131cb565b610da791906131a9565b60035550565b67058d15e176280000811015610dce57600a6002546006610d9d91906131cb565b6706f05b59d3b20000811015610def57600a6002546008610d9d91906131cb565b670853a0d2313c0000811015610e1057600a6002546009610d9d91906131cb565b6002546003555b50565b6001600160a01b0381166000908152600b6020526040812054815b81811015610e9c576001600160a01b0384166000908152600b60205260408120805483908110610e6757610e676132c9565b90600052602060002001549050610e7e8582612688565b610e889085613191565b93505080610e959061326c565b9050610e35565b5050919050565b60606009805480602002602001604051908101604052809291908181526020018280548015610efb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610edd575b5050505050905090565b60085442118015610f195750600154600854105b8015610f26575060015415155b15611026576006548015610ff6576000600154421115610f5d57600854600154610f509190613229565b6001546008559050610f71565b600854610f6a9042613229565b4260085590505b600060035482610f8191906131cb565b90506000610f90600a836131a9565b9050610f9b8161278d565b610fa58183613229565b91508160046000828254610fb99190613191565b90915550849050610fd2670de0b6b3a7640000846131cb565b610fdc91906131a9565b60056000828254610fed9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b6001546110675760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b60448201526064016106bd565b600081600281111561107b5761107b61329d565b14156110fe57600154620151806110938160076131cb565b61109e9060026131cb565b6110a89042613191565b6110b29190613229565b11156110f95760405162461bcd60e51b815260206004820152601660248201527513195cdcc81d1a185b880c881dd9595adcc81b19599d60521b60448201526064016106bd565b611238565b60018160028111156111125761111261329d565b1415611192576001546111296201518060036131cb565b61113762015180601e6131cb565b6111419042613191565b61114b9190613229565b11156110f95760405162461bcd60e51b815260206004820152601660248201527513195cdcc81d1a185b880c481b5bdb9d1a081b19599d60521b60448201526064016106bd565b60028160028111156111a6576111a661329d565b1415610684576001546111bd6201518060076131cb565b6111cb62015180601e6131cb565b6111d69060036131cb565b6111e09042613191565b6111ea9190613229565b11156110f95760405162461bcd60e51b815260206004820152601760248201527f4c657373207468616e2033206d6f6e746873206c65667400000000000000000060448201526064016106bd565b60008061124433612bb3565b91509150600080611254856105d0565b90925090506000670de0b6b3a764000061126e84896131cb565b61127891906131a9565b6112829088613191565b905086600760008282546112969190613191565b9250508190555080600660008282546112af9190613191565b9091555050868555600185018190556112c88242613191565b60028601556005546112e890670de0b6b3a7640000906108a190846131cb565b600386015560048501805487919060ff1916600183600281111561130e5761130e61329d565b02179055506113486001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a612c36565b604051878152849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a35050505050600061138e612350565b90506702c68af0bb1400008110156113aa576000600355505050565b670429d069189e00008110156113dd57600a60025460056113cb91906131cb565b6113d591906131a9565b600355505050565b67058d15e1762800008110156113fe57600a60025460066113cb91906131cb565b6706f05b59d3b2000081101561141f57600a60025460086113cb91906131cb565b670853a0d2313c000081101561144057600a60025460096113cb91906131cb565b6002546003555b505050565b6000546001600160a01b031633146114765760405162461bcd60e51b81526004016106bd90613111565b6114806000612c74565b565b336000908152600b60209081526040808320805482518185028101850190935280835291929091908301828280156114d957602002820191906000526020600020905b8154815260200190600101908083116114c5575b505083519394506000925050505b81811015611447576000838281518110611503576115036132c9565b60200260200101519050611519816000196119d0565b506115238161326c565b90506114e7565b336000908152600b602090815260408083208054825181850281018501909352808352919290919083018282801561158157602002820191906000526020600020905b81548152602001906001019080831161156d575b505083519394506000925050505b818110156114475760008382815181106115ab576115ab6132c9565b602002602001015190506115c181600019611c13565b506115cb8161326c565b905061158f565b6107406201518060076131cb565b336000908152600b602090815260408083208054825181850281018501909352808352919290919083018282801561163757602002820191906000526020600020905b815481526020019060010190808311611623575b505083519394506000925050505b81811015611447576000838281518110611661576116616132c9565b6020026020010151905061167481610743565b5061167e8161326c565b9050611645565b6116936201518060076131cb565b6107409060026131cb565b6000546001600160a01b031633146116c85760405162461bcd60e51b81526004016106bd90613111565b600854421180156116dc5750600154600854105b80156116e9575060015415155b156117e95760065480156117b9576000600154421115611720576008546001546117139190613229565b6001546008559050611734565b60085461172d9042613229565b4260085590505b60006003548261174491906131cb565b90506000611753600a836131a9565b905061175e8161278d565b6117688183613229565b9150816004600082825461177c9190613191565b90915550849050611795670de0b6b3a7640000846131cb565b61179f91906131a9565b600560008282546117b09190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b600954600090806118345760405162461bcd60e51b81526020600482015260156024820152746e6f206578636c756465642061646472657373657360581b60448201526064016106bd565b60005b8181101561188f57836001600160a01b03166009828154811061185c5761185c6132c9565b6000918252602090912001546001600160a01b0316141561187f5780925061188f565b6118888161326c565b9050611837565b50826001600160a01b0316600983815481106118ad576118ad6132c9565b6000918252602090912001546001600160a01b0316146119065760405162461bcd60e51b81526020600482015260146024820152731859191c995cdcc81b9bdd08195e18db1d59195960621b60448201526064016106bd565b6000611913600183613229565b905080831461198a576009818154811061192f5761192f6132c9565b600091825260209091200154600980546001600160a01b03909216918590811061195b5761195b6132c9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600980548061199b5761199b6132b3565b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590555050506000610974612350565b6119da8282611c13565b610a2b82610743565b6000546001600160a01b03163314611a0d5760405162461bcd60e51b81526004016106bd90613111565b60085442118015611a215750600154600854105b8015611a2e575060015415155b15611b2e576006548015611afe576000600154421115611a6557600854600154611a589190613229565b6001546008559050611a79565b600854611a729042613229565b4260085590505b600060035482611a8991906131cb565b90506000611a98600a836131a9565b9050611aa38161278d565b611aad8183613229565b91508160046000828254611ac19190613191565b90915550849050611ada670de0b6b3a7640000846131cb565b611ae491906131a9565b60056000828254611af59190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b60095460005b81811015611bbf57826001600160a01b031660098281548110611b5957611b596132c9565b6000918252602090912001546001600160a01b03161415611baf5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e18db1d59195960821b60448201526064016106bd565b611bb88161326c565b9050611b34565b50506009805460018101825560009182527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b038416179055610974612350565b60085442118015611c275750600154600854105b8015611c34575060015415155b15611d34576006548015611d04576000600154421115611c6b57600854600154611c5e9190613229565b6001546008559050611c7f565b600854611c789042613229565b4260085590505b600060035482611c8f91906131cb565b90506000611c9e600a836131a9565b9050611ca98161278d565b611cb38183613229565b91508160046000828254611cc79190613191565b90915550849050611ce0670de0b6b3a7640000846131cb565b611cea91906131a9565b60056000828254611cfb9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b336000908152600a602090815260408083208584529091529020805480611d9d5760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e20646f6573206e6f7420657869737473000000000000000060448201526064016106bd565b80831115611da9578092505b60015442108015611dc45750600054600160a01b900460ff16155b15611e1d578160020154421015611e1d5760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e206973207374696c6c206c6f636b6564000000000000000060448201526064016106bd565b600081611e32670de0b6b3a7640000866131cb565b611e3c91906131a9565b90506000670de0b6b3a7640000828560010154611e5991906131cb565b611e6391906131a9565b90508060066000828254611e779190613229565b925050819055508460076000828254611e909190613229565b9091555050835485908590600090611ea9908490613229565b9250508190555080846001016000828254611ec49190613229565b9091555050600554611ee490670de0b6b3a7640000906108a190846131cb565b846003016000828254611ef791906131ea565b90915550611f3190506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163387612b50565b604051858152869033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a350505050600061138e612350565b60085442118015611f8a5750600154600854105b8015611f97575060015415155b15612097576006548015612067576000600154421115611fce57600854600154611fc19190613229565b6001546008559050611fe2565b600854611fdb9042613229565b4260085590505b600060035482611ff291906131cb565b90506000612001600a836131a9565b905061200c8161278d565b6120168183613229565b9150816004600082825461202a9190613191565b90915550849050612043670de0b6b3a7640000846131cb565b61204d91906131a9565b6005600082825461205e9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b60015442116120e85760405162461bcd60e51b815260206004820152601860248201527f57696c6c206e6f74206275726e206265666f726520656e64000000000000000060448201526064016106bd565b600061dead9050600061210360096004546108ab91906131a9565b61210e6004546128cd565b60025461212390610c7362015180601e6131cb565b61212d91906131ea565b61213791906131ea565b90506000811315612176576121766001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612b50565b50506000610d62612350565b6000546001600160a01b031633146121ac5760405162461bcd60e51b81526004016106bd90613111565b600154156121f05760405162461bcd60e51b815260206004820152601160248201527021b0b73737ba1034b734ba1030b3b0b4b760791b60448201526064016106bd565b6007546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561225657600080fd5b505afa15801561226a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228e9190612fd6565b6122989190613229565b9050600081116122dc5760405162461bcd60e51b815260206004820152600f60248201526e139bc81c995dd85c991cc81cd95b9d608a1b60448201526064016106bd565b6122ea62015180601e6131cb565b6122f59060036131cb565b6122ff90826131a9565b60025561231062015180601e6131cb565b61231b9060036131cb565b6123259042613191565b60015550426008556000610d62612350565b61234562015180601e6131cb565b6107409060036131cb565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ac57600080fd5b505afa1580156123c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e49190612fd6565b60095490915060005b818110156124d8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a0823160098381548110612437576124376132c9565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b15801561248257600080fd5b505afa158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba9190612fd6565b6124c49084613229565b9250806124d08161326c565b9150506123ed565b506007546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561253f57600080fd5b505afa158015612553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125779190612fd6565b6125819190613229565b905061258d8184613229565b925082156125b95782670de0b6b3a76400006007546125ac91906131cb565b6125b691906131a9565b93505b50505090565b600b60205281600052604060002081815481106125db57600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b0316331461261a5760405162461bcd60e51b81526004016106bd90613111565b6001600160a01b03811661267f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bd565b610e1781612c74565b6001600160a01b0382166000908152600a602090815260408083208484529091528120600554600654600854421180156126c3575060035415155b156127555760006001544211156126eb576008546001546126e49190613229565b90506126fb565b6008546126f89042613229565b90505b60006003548261270b91906131cb565b9050600061271a600a836131a9565b90506127268183613229565b91508361273b670de0b6b3a7640000846131cb565b61274591906131a9565b61274f9086613191565b94505050505b6127838360030154612779670de0b6b3a76400008587600101546108a191906131cb565b6108c791906131ea565b9695505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561281757600080fd5b505af115801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190612f80565b5060405163d3512cef60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d3512cef90602401600060405180830381600087803b1580156128b257600080fd5b505af11580156128c6573d6000803e3d6000fd5b5050505050565b60006001600160ff1b038211156129375760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016106bd565b5090565b6000808212156129375760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016106bd565b6001600160a01b0382166000818152600c60209081526040808320858452825280832054938352600b90915290208054839190839081106129d0576129d06132c9565b906000526020600020015414612a1c5760405162461bcd60e51b81526020600482015260116024820152706465706f7369744964202165786973747360781b60448201526064016106bd565b6001600160a01b0383166000908152600b6020526040812054612a4190600190613229565b9050808214612aea576001600160a01b0384166000908152600b60205260408120805483908110612a7457612a746132c9565b9060005260206000200154905080600b6000876001600160a01b03166001600160a01b031681526020019081526020016000208481548110612ab857612ab86132c9565b60009182526020808320909101929092556001600160a01b0387168152600c8252604080822093825292909152208290555b6001600160a01b0384166000908152600b60205260409020805480612b1157612b116132b3565b6000828152602080822083016000199081018390559092019092556001600160a01b039095168152600c85526040808220948252939094525050812055565b6040516001600160a01b03831660248201526044810182905261144790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612cc4565b6001600160a01b0381166000908152600d6020526040812080548291908290612bdb9061326c565b91829055506001600160a01b039093166000818152600b602090815260408083208054600c8452828520898652845282852081905560018101825590845282842001879055928252600a815282822086835290522093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052612c6e9085906323b872dd60e01b90608401612b7c565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612d19826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d969092919063ffffffff16565b8051909150156114475780806020019051810190612d379190612f80565b6114475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bd565b6060612da58484600085612daf565b90505b9392505050565b606082471015612e105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bd565b843b612e5e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bd565b600080866001600160a01b03168587604051612e7a919061303d565b60006040518083038185875af1925050503d8060008114612eb7576040519150601f19603f3d011682016040523d82523d6000602084013e612ebc565b606091505b5091509150612ecc828286612ed7565b979650505050505050565b60608315612ee6575081612da8565b825115612ef65782518084602001fd5b8160405162461bcd60e51b81526004016106bd91906130de565b80356001600160a01b0381168114612f2757600080fd5b919050565b803560038110612f2757600080fd5b600060208284031215612f4d57600080fd5b612da882612f10565b60008060408385031215612f6957600080fd5b612f7283612f10565b946020939093013593505050565b600060208284031215612f9257600080fd5b81518015158114612da857600080fd5b600060208284031215612fb457600080fd5b612da882612f2c565b600060208284031215612fcf57600080fd5b5035919050565b600060208284031215612fe857600080fd5b5051919050565b6000806040838503121561300257600080fd5b8235915061301260208401612f2c565b90509250929050565b6000806040838503121561302e57600080fd5b50508035926020909101359150565b6000825161304f818460208701613240565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561309a5783516001600160a01b031683529284019291840191600101613075565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561309a578351835292840192918401916001016130c2565b60208152600082518060208401526130fd816040850160208701613240565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060a0820190508682528560208301528460408301528360608301526003831061318157634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600082198211156131a4576131a4613287565b500190565b6000826131c657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156131e5576131e5613287565b500290565b60008083128015600160ff1b85018412161561320857613208613287565b6001600160ff1b038401831381161561322357613223613287565b50500390565b60008282101561323b5761323b613287565b500390565b60005b8381101561325b578181015183820152602001613243565b83811115612c6e5750506000910152565b600060001982141561328057613280613287565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe46fa466115eb42eb54d375f82faa91f2a3d06d3dc2d7ed4a4f936cda1b561efca264697066735822122049dbaa85f1dc338109cd62b3198bf23a37366085dc5ee70b913c1b97972da49d64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80638ed955b91161015c578063d82b99d7116100ce578063ecbefab711610087578063ecbefab714610575578063f091ba2a14610585578063f15576a614610598578063f2fde38b146105a1578063f8077fae146105b4578063fd90904c146105bd57600080fd5b8063d82b99d714610549578063dbb556291461055c578063e11398e814610565578063e1c7392a1461056d578063e8622e6714610575578063ea21cd921461057d57600080fd5b8063a9b54bcd11610120578063a9b54bcd146104da578063b958dd19146104ed578063bc168ecb14610514578063c2ee3a081461051d578063cd24b0a31461052c578063d0d1daf41461054057600080fd5b80638ed955b91461049b578063934d1fa4146104a3578063a646c35d146104ab578063a7e69fb4146104be578063a85adeab146104d157600080fd5b806341c0e1b5116101f5578063654cfdff116101b9578063654cfdff14610457578063715018a61461046a5780637350385714610472578063853828b61461047a5780638da5cb5b146104825780638e6f6b771461049357600080fd5b806341c0e1b5146103f35780634ebdd340146103fb57806359fe213b146104265780635fdf199a14610439578063620572071461044e57600080fd5b806321ce919d1161024757806321ce919d1461033b5780632299b8fa1461039757806327cfe856146103b75780632f4c4678146103c1578063344a15c5146103d4578063392e53cd146103dd57600080fd5b80630a4a3c9f146102845780630d854646146102b15780630dd4117a146102f057806320988cef1461031057806320f8e94e14610326575b600080fd5b610297610292366004612fa2565b6105d0565b604080519283526020830191909152015b60405180910390f35b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102a8565b6103036102fe366004612f3b565b6106c6565b6040516102a891906130a6565b610318610732565b6040519081526020016102a8565b610339610334366004612fbd565b610743565b005b610386610349366004612f56565b600a602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040516102a8959493929190613146565b6103186103a5366004612f3b565b600d6020526000908152604090205481565b6103186201518081565b6102d86103cf366004612fbd565b610a2f565b61031860035481565b60015415155b60405190151581526020016102a8565b610339610a59565b610318610409366004612f56565b600c60209081526000928352604080842090915290825290205481565b610318610434366004612f3b565b610e1a565b610441610ea3565b6040516102a89190613059565b61031860055481565b610339610465366004612fef565b610f05565b61033961144c565b610339611482565b61033961152a565b6000546001600160a01b03166102d8565b6103186115d2565b6103396115e0565b610318611685565b6103396104b9366004612f3b565b61169e565b6103396104cc36600461301b565b6119d0565b61031860015481565b6103396104e8366004612f3b565b6119e3565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b61031860065481565b610318670de0b6b3a764000081565b6000546103e390600160a01b900460ff1681565b61031860075481565b61033961055736600461301b565b611c13565b61031860025481565b610339611f76565b610339612182565b610318612337565b610318612350565b610318610593366004612f56565b6125bf565b61031860045481565b6103396105af366004612f3b565b6125f0565b61031860085481565b6103186105cb366004612f56565b612688565b600080808360028111156105e6576105e661329d565b1415610617576702c68af0bb1400006106036201518060076131cb565b61060e9060026131cb565b91509150915091565b600183600281111561062b5761062b61329d565b1415610648576706f05b59d3b2000061060e62015180601e6131cb565b600283600281111561065c5761065c61329d565b141561068457671bc16d674ec8000061067962015180601e6131cb565b61060e9060036131cb565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206c6f636b2076616c756560701b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561072657602002820191906000526020600020905b815481526020019060010190808311610712575b50505050509050919050565b61074062015180601e6131cb565b81565b600854421180156107575750600154600854105b8015610764575060015415155b1561086457600654801561083457600060015442111561079b5760085460015461078e9190613229565b60015460085590506107af565b6008546107a89042613229565b4260085590505b6000600354826107bf91906131cb565b905060006107ce600a836131a9565b90506107d98161278d565b6107e38183613229565b915081600460008282546107f79190613191565b90915550849050610810670de0b6b3a7640000846131cb565b61081a91906131a9565b6005600082825461082b9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b336000908152600a60209081526040808320848452909152812060055460018201549192916108b091670de0b6b3a7640000916108a191906131cb565b6108ab91906131a9565b6128cd565b905060006108cc8360030154836108c791906131ea565b61293b565b6003840183905583549091501580156108e757506001830154155b156108f6576108f6338561298d565b8015610930576109306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612b50565b604051818152849033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050506000610974612350565b90506702c68af0bb14000081101561098f5760006003555050565b670429d069189e00008110156109c157600a60025460056109b091906131cb565b6109ba91906131a9565b6003555050565b67058d15e1762800008110156109e257600a60025460066109b091906131cb565b6706f05b59d3b20000811015610a0357600a60025460086109b091906131cb565b670853a0d2313c0000811015610a2457600a60025460096109b091906131cb565b6002546003555b5050565b60098181548110610a3f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610a835760405162461bcd60e51b81526004016106bd90613111565b60085442118015610a975750600154600854105b8015610aa4575060015415155b15610ba4576006548015610b74576000600154421115610adb57600854600154610ace9190613229565b6001546008559050610aef565b600854610ae89042613229565b4260085590505b600060035482610aff91906131cb565b90506000610b0e600a836131a9565b9050610b198161278d565b610b238183613229565b91508160046000828254610b379190613191565b90915550849050610b50670de0b6b3a7640000846131cb565b610b5a91906131a9565b60056000828254610b6b9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b600154421115610bf65760405162461bcd60e51b815260206004820152601760248201527f57696c6c206e6f74206b696c6c20616674657220656e6400000000000000000060448201526064016106bd565b600054600160a01b900460ff1615610c3f5760405162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481919585960a21b60448201526064016106bd565b6000610c5360096004546108ab91906131a9565b610c5e6004546128cd565b600254610c8890610c7362015180601e6131cb565b610c7e9060036131cb565b6108ab91906131cb565b610c9291906131ea565b610c9c91906131ea565b90506000811315610d3c57610ced610cbc6000546001600160a01b031690565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083612b50565b6000546001600160a01b03166001600160a01b03167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051610d3391815260200190565b60405180910390a25b50600060028190556003819055805460ff60a01b1916600160a01b178155610d62612350565b90506702c68af0bb140000811015610d7c57600060035550565b670429d069189e0000811015610dad57600a6002546005610d9d91906131cb565b610da791906131a9565b60035550565b67058d15e176280000811015610dce57600a6002546006610d9d91906131cb565b6706f05b59d3b20000811015610def57600a6002546008610d9d91906131cb565b670853a0d2313c0000811015610e1057600a6002546009610d9d91906131cb565b6002546003555b50565b6001600160a01b0381166000908152600b6020526040812054815b81811015610e9c576001600160a01b0384166000908152600b60205260408120805483908110610e6757610e676132c9565b90600052602060002001549050610e7e8582612688565b610e889085613191565b93505080610e959061326c565b9050610e35565b5050919050565b60606009805480602002602001604051908101604052809291908181526020018280548015610efb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610edd575b5050505050905090565b60085442118015610f195750600154600854105b8015610f26575060015415155b15611026576006548015610ff6576000600154421115610f5d57600854600154610f509190613229565b6001546008559050610f71565b600854610f6a9042613229565b4260085590505b600060035482610f8191906131cb565b90506000610f90600a836131a9565b9050610f9b8161278d565b610fa58183613229565b91508160046000828254610fb99190613191565b90915550849050610fd2670de0b6b3a7640000846131cb565b610fdc91906131a9565b60056000828254610fed9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b6001546110675760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b60448201526064016106bd565b600081600281111561107b5761107b61329d565b14156110fe57600154620151806110938160076131cb565b61109e9060026131cb565b6110a89042613191565b6110b29190613229565b11156110f95760405162461bcd60e51b815260206004820152601660248201527513195cdcc81d1a185b880c881dd9595adcc81b19599d60521b60448201526064016106bd565b611238565b60018160028111156111125761111261329d565b1415611192576001546111296201518060036131cb565b61113762015180601e6131cb565b6111419042613191565b61114b9190613229565b11156110f95760405162461bcd60e51b815260206004820152601660248201527513195cdcc81d1a185b880c481b5bdb9d1a081b19599d60521b60448201526064016106bd565b60028160028111156111a6576111a661329d565b1415610684576001546111bd6201518060076131cb565b6111cb62015180601e6131cb565b6111d69060036131cb565b6111e09042613191565b6111ea9190613229565b11156110f95760405162461bcd60e51b815260206004820152601760248201527f4c657373207468616e2033206d6f6e746873206c65667400000000000000000060448201526064016106bd565b60008061124433612bb3565b91509150600080611254856105d0565b90925090506000670de0b6b3a764000061126e84896131cb565b61127891906131a9565b6112829088613191565b905086600760008282546112969190613191565b9250508190555080600660008282546112af9190613191565b9091555050868555600185018190556112c88242613191565b60028601556005546112e890670de0b6b3a7640000906108a190846131cb565b600386015560048501805487919060ff1916600183600281111561130e5761130e61329d565b02179055506113486001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a612c36565b604051878152849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a35050505050600061138e612350565b90506702c68af0bb1400008110156113aa576000600355505050565b670429d069189e00008110156113dd57600a60025460056113cb91906131cb565b6113d591906131a9565b600355505050565b67058d15e1762800008110156113fe57600a60025460066113cb91906131cb565b6706f05b59d3b2000081101561141f57600a60025460086113cb91906131cb565b670853a0d2313c000081101561144057600a60025460096113cb91906131cb565b6002546003555b505050565b6000546001600160a01b031633146114765760405162461bcd60e51b81526004016106bd90613111565b6114806000612c74565b565b336000908152600b60209081526040808320805482518185028101850190935280835291929091908301828280156114d957602002820191906000526020600020905b8154815260200190600101908083116114c5575b505083519394506000925050505b81811015611447576000838281518110611503576115036132c9565b60200260200101519050611519816000196119d0565b506115238161326c565b90506114e7565b336000908152600b602090815260408083208054825181850281018501909352808352919290919083018282801561158157602002820191906000526020600020905b81548152602001906001019080831161156d575b505083519394506000925050505b818110156114475760008382815181106115ab576115ab6132c9565b602002602001015190506115c181600019611c13565b506115cb8161326c565b905061158f565b6107406201518060076131cb565b336000908152600b602090815260408083208054825181850281018501909352808352919290919083018282801561163757602002820191906000526020600020905b815481526020019060010190808311611623575b505083519394506000925050505b81811015611447576000838281518110611661576116616132c9565b6020026020010151905061167481610743565b5061167e8161326c565b9050611645565b6116936201518060076131cb565b6107409060026131cb565b6000546001600160a01b031633146116c85760405162461bcd60e51b81526004016106bd90613111565b600854421180156116dc5750600154600854105b80156116e9575060015415155b156117e95760065480156117b9576000600154421115611720576008546001546117139190613229565b6001546008559050611734565b60085461172d9042613229565b4260085590505b60006003548261174491906131cb565b90506000611753600a836131a9565b905061175e8161278d565b6117688183613229565b9150816004600082825461177c9190613191565b90915550849050611795670de0b6b3a7640000846131cb565b61179f91906131a9565b600560008282546117b09190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b600954600090806118345760405162461bcd60e51b81526020600482015260156024820152746e6f206578636c756465642061646472657373657360581b60448201526064016106bd565b60005b8181101561188f57836001600160a01b03166009828154811061185c5761185c6132c9565b6000918252602090912001546001600160a01b0316141561187f5780925061188f565b6118888161326c565b9050611837565b50826001600160a01b0316600983815481106118ad576118ad6132c9565b6000918252602090912001546001600160a01b0316146119065760405162461bcd60e51b81526020600482015260146024820152731859191c995cdcc81b9bdd08195e18db1d59195960621b60448201526064016106bd565b6000611913600183613229565b905080831461198a576009818154811061192f5761192f6132c9565b600091825260209091200154600980546001600160a01b03909216918590811061195b5761195b6132c9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600980548061199b5761199b6132b3565b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590555050506000610974612350565b6119da8282611c13565b610a2b82610743565b6000546001600160a01b03163314611a0d5760405162461bcd60e51b81526004016106bd90613111565b60085442118015611a215750600154600854105b8015611a2e575060015415155b15611b2e576006548015611afe576000600154421115611a6557600854600154611a589190613229565b6001546008559050611a79565b600854611a729042613229565b4260085590505b600060035482611a8991906131cb565b90506000611a98600a836131a9565b9050611aa38161278d565b611aad8183613229565b91508160046000828254611ac19190613191565b90915550849050611ada670de0b6b3a7640000846131cb565b611ae491906131a9565b60056000828254611af59190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b60095460005b81811015611bbf57826001600160a01b031660098281548110611b5957611b596132c9565b6000918252602090912001546001600160a01b03161415611baf5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e18db1d59195960821b60448201526064016106bd565b611bb88161326c565b9050611b34565b50506009805460018101825560009182527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b038416179055610974612350565b60085442118015611c275750600154600854105b8015611c34575060015415155b15611d34576006548015611d04576000600154421115611c6b57600854600154611c5e9190613229565b6001546008559050611c7f565b600854611c789042613229565b4260085590505b600060035482611c8f91906131cb565b90506000611c9e600a836131a9565b9050611ca98161278d565b611cb38183613229565b91508160046000828254611cc79190613191565b90915550849050611ce0670de0b6b3a7640000846131cb565b611cea91906131a9565b60056000828254611cfb9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b336000908152600a602090815260408083208584529091529020805480611d9d5760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e20646f6573206e6f7420657869737473000000000000000060448201526064016106bd565b80831115611da9578092505b60015442108015611dc45750600054600160a01b900460ff16155b15611e1d578160020154421015611e1d5760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e206973207374696c6c206c6f636b6564000000000000000060448201526064016106bd565b600081611e32670de0b6b3a7640000866131cb565b611e3c91906131a9565b90506000670de0b6b3a7640000828560010154611e5991906131cb565b611e6391906131a9565b90508060066000828254611e779190613229565b925050819055508460076000828254611e909190613229565b9091555050835485908590600090611ea9908490613229565b9250508190555080846001016000828254611ec49190613229565b9091555050600554611ee490670de0b6b3a7640000906108a190846131cb565b846003016000828254611ef791906131ea565b90915550611f3190506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163387612b50565b604051858152869033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a350505050600061138e612350565b60085442118015611f8a5750600154600854105b8015611f97575060015415155b15612097576006548015612067576000600154421115611fce57600854600154611fc19190613229565b6001546008559050611fe2565b600854611fdb9042613229565b4260085590505b600060035482611ff291906131cb565b90506000612001600a836131a9565b905061200c8161278d565b6120168183613229565b9150816004600082825461202a9190613191565b90915550849050612043670de0b6b3a7640000846131cb565b61204d91906131a9565b6005600082825461205e9190613191565b90915550505050505b6008546005546040805184815260208101929092526000805160206132e0833981519152910160405180910390a2505b60015442116120e85760405162461bcd60e51b815260206004820152601860248201527f57696c6c206e6f74206275726e206265666f726520656e64000000000000000060448201526064016106bd565b600061dead9050600061210360096004546108ab91906131a9565b61210e6004546128cd565b60025461212390610c7362015180601e6131cb565b61212d91906131ea565b61213791906131ea565b90506000811315612176576121766001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612b50565b50506000610d62612350565b6000546001600160a01b031633146121ac5760405162461bcd60e51b81526004016106bd90613111565b600154156121f05760405162461bcd60e51b815260206004820152601160248201527021b0b73737ba1034b734ba1030b3b0b4b760791b60448201526064016106bd565b6007546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561225657600080fd5b505afa15801561226a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228e9190612fd6565b6122989190613229565b9050600081116122dc5760405162461bcd60e51b815260206004820152600f60248201526e139bc81c995dd85c991cc81cd95b9d608a1b60448201526064016106bd565b6122ea62015180601e6131cb565b6122f59060036131cb565b6122ff90826131a9565b60025561231062015180601e6131cb565b61231b9060036131cb565b6123259042613191565b60015550426008556000610d62612350565b61234562015180601e6131cb565b6107409060036131cb565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ac57600080fd5b505afa1580156123c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e49190612fd6565b60095490915060005b818110156124d8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a0823160098381548110612437576124376132c9565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b15801561248257600080fd5b505afa158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba9190612fd6565b6124c49084613229565b9250806124d08161326c565b9150506123ed565b506007546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561253f57600080fd5b505afa158015612553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125779190612fd6565b6125819190613229565b905061258d8184613229565b925082156125b95782670de0b6b3a76400006007546125ac91906131cb565b6125b691906131a9565b93505b50505090565b600b60205281600052604060002081815481106125db57600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b0316331461261a5760405162461bcd60e51b81526004016106bd90613111565b6001600160a01b03811661267f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bd565b610e1781612c74565b6001600160a01b0382166000908152600a602090815260408083208484529091528120600554600654600854421180156126c3575060035415155b156127555760006001544211156126eb576008546001546126e49190613229565b90506126fb565b6008546126f89042613229565b90505b60006003548261270b91906131cb565b9050600061271a600a836131a9565b90506127268183613229565b91508361273b670de0b6b3a7640000846131cb565b61274591906131a9565b61274f9086613191565b94505050505b6127838360030154612779670de0b6b3a76400008587600101546108a191906131cb565b6108c791906131ea565b9695505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561281757600080fd5b505af115801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190612f80565b5060405163d3512cef60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d3512cef90602401600060405180830381600087803b1580156128b257600080fd5b505af11580156128c6573d6000803e3d6000fd5b5050505050565b60006001600160ff1b038211156129375760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016106bd565b5090565b6000808212156129375760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016106bd565b6001600160a01b0382166000818152600c60209081526040808320858452825280832054938352600b90915290208054839190839081106129d0576129d06132c9565b906000526020600020015414612a1c5760405162461bcd60e51b81526020600482015260116024820152706465706f7369744964202165786973747360781b60448201526064016106bd565b6001600160a01b0383166000908152600b6020526040812054612a4190600190613229565b9050808214612aea576001600160a01b0384166000908152600b60205260408120805483908110612a7457612a746132c9565b9060005260206000200154905080600b6000876001600160a01b03166001600160a01b031681526020019081526020016000208481548110612ab857612ab86132c9565b60009182526020808320909101929092556001600160a01b0387168152600c8252604080822093825292909152208290555b6001600160a01b0384166000908152600b60205260409020805480612b1157612b116132b3565b6000828152602080822083016000199081018390559092019092556001600160a01b039095168152600c85526040808220948252939094525050812055565b6040516001600160a01b03831660248201526044810182905261144790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612cc4565b6001600160a01b0381166000908152600d6020526040812080548291908290612bdb9061326c565b91829055506001600160a01b039093166000818152600b602090815260408083208054600c8452828520898652845282852081905560018101825590845282842001879055928252600a815282822086835290522093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052612c6e9085906323b872dd60e01b90608401612b7c565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000612d19826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d969092919063ffffffff16565b8051909150156114475780806020019051810190612d379190612f80565b6114475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bd565b6060612da58484600085612daf565b90505b9392505050565b606082471015612e105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bd565b843b612e5e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bd565b600080866001600160a01b03168587604051612e7a919061303d565b60006040518083038185875af1925050503d8060008114612eb7576040519150601f19603f3d011682016040523d82523d6000602084013e612ebc565b606091505b5091509150612ecc828286612ed7565b979650505050505050565b60608315612ee6575081612da8565b825115612ef65782518084602001fd5b8160405162461bcd60e51b81526004016106bd91906130de565b80356001600160a01b0381168114612f2757600080fd5b919050565b803560038110612f2757600080fd5b600060208284031215612f4d57600080fd5b612da882612f10565b60008060408385031215612f6957600080fd5b612f7283612f10565b946020939093013593505050565b600060208284031215612f9257600080fd5b81518015158114612da857600080fd5b600060208284031215612fb457600080fd5b612da882612f2c565b600060208284031215612fcf57600080fd5b5035919050565b600060208284031215612fe857600080fd5b5051919050565b6000806040838503121561300257600080fd5b8235915061301260208401612f2c565b90509250929050565b6000806040838503121561302e57600080fd5b50508035926020909101359150565b6000825161304f818460208701613240565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561309a5783516001600160a01b031683529284019291840191600101613075565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561309a578351835292840192918401916001016130c2565b60208152600082518060208401526130fd816040850160208701613240565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060a0820190508682528560208301528460408301528360608301526003831061318157634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600082198211156131a4576131a4613287565b500190565b6000826131c657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156131e5576131e5613287565b500290565b60008083128015600160ff1b85018412161561320857613208613287565b6001600160ff1b038401831381161561322357613223613287565b50500390565b60008282101561323b5761323b613287565b500390565b60005b8381101561325b578181015183820152602001613243565b83811115612c6e5750506000910152565b600060001982141561328057613280613287565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe46fa466115eb42eb54d375f82faa91f2a3d06d3dc2d7ed4a4f936cda1b561efca264697066735822122049dbaa85f1dc338109cd62b3198bf23a37366085dc5ee70b913c1b97972da49d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allUserDepositIds(address,uint256)": {
        "notice": "user => depositId[]"
      },
      "currentId(address)": {
        "notice": "user => deposit index array"
      },
      "depositIdIndex(address,uint256)": {
        "notice": "user => depositId => index in allUserDepositIds"
      },
      "kill()": {
        "notice": "EMERGENCY ONLY"
      },
      "userInfo(address,uint256)": {
        "notice": "user => depositId => UserInfo"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6599,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "unlockAll",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6601,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "endTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6603,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "maxMagicPerSecond",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6605,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "magicPerSecond",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6607,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "totalRewardsEarned",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6609,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "accMagicPerShare",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6611,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "totalLpToken",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6613,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "magicTotalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6615,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6618,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "excludedAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6638,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "userInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)6630_storage))"
      },
      {
        "astId": 6644,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "allUserDepositIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6651,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "depositIdIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6656,
        "contract": "contracts/TreasuryMine.sol:TreasuryMine",
        "label": "currentId",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Lock)6559": {
        "encoding": "inplace",
        "label": "enum TreasuryMine.Lock",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)6630_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct TreasuryMine.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)6630_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)6630_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TreasuryMine.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6630_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)6630_storage": {
        "encoding": "inplace",
        "label": "struct TreasuryMine.UserInfo",
        "members": [
          {
            "astId": 6620,
            "contract": "contracts/TreasuryMine.sol:TreasuryMine",
            "label": "depositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6622,
            "contract": "contracts/TreasuryMine.sol:TreasuryMine",
            "label": "lpAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6624,
            "contract": "contracts/TreasuryMine.sol:TreasuryMine",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6626,
            "contract": "contracts/TreasuryMine.sol:TreasuryMine",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 6629,
            "contract": "contracts/TreasuryMine.sol:TreasuryMine",
            "label": "lock",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Lock)6559"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}